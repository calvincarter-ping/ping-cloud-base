# This defines the pingfederate admin statefulset.

apiVersion: v1
kind: ConfigMap
metadata:
  name: collectd-conf
data:
  collectd.conf: |-
    /etc/collectd/collectd.conf
    # Install:
    #  You can usually install with apt-get or yum

    # Documentation:
    #   https://collectd.org/documentation.shtml

    # System modifications:
    #   None

    # Config file modifications:
    #   If you want to use a custom source name, change
    #   the "Hostname" paramter and set
    #
    #     FQDNLookup false
    #
    #   Make sure TypesDB points to a valid file:
    #
    #     which /usr/share/collectd/types.db
    #
    #   Create the directory managed_config and put
    #   extra config files there:
    #
    #     mkdir /etc/collectd.d/managed_config
    #

    TypesDB "/usr/share/collectd/types.db"

    #   If you use the Hostname parameter, you
    #   must quote ("...") the second argument

    %%%HOSTNAME%%%

    Interval %%%INTERVAL%%%
    Timeout 2
    ReadThreads 5
    WriteQueueLimitHigh 500000
    WriteQueueLimitLow  400000
    CollectInternalStats true

    LoadPlugin logfile

    <Plugin logfile>
            LogLevel "info"
            File "stdout"
            Timestamp true
            PrintSeverity false
    </Plugin>

    LoadPlugin write_http
    <Plugin write_http>
      <Node "collectd_exporter">
        URL "http://localhost:9103"
        Format "JSON"
        StoreRates false
      </Node>
    </Plugin>

    %%%CPU%%%

    %%%CPUFREQ%%%

    %%%DF%%%

    %%%DISK%%%

    %%%INTERFACE%%%

    %%%LOAD%%%

    %%%MEMORY%%%

    %%%PROTOCOLS%%%

    %%%VMEM%%%

    %%%UPTIME%%%

    %%%AGENT_PROCESS_STATS%%%

    CollectInternalStats true

    # Note: You will get warnings on startup if you have no *.conf files.
    #       This is ok: CollectD will still start.
    Include "/etc/collectd/managed_config/*.conf"

    Include "/etc/collectd/filtering_config/*.conf"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: collectd-init
data:
  collectd-init.sh: |-
    #!/bin/sh
    /bin/collectd_exporter --web.collectd-push-path="" &
    while :
    do
      python /opt/collect-heartbeat.py
      sleep 5
    done

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: collect-heartbeat
data:
  collect-heartbeat.py: |-
    import collectd
    import json
    import requests
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    NAME = 'ping_identity'
    VERBOSE_LOGGING = False
    DEFAULT_HEARTBEAT_URL = 'https://127.0.0.1:8080/pf/heartbeat.ping'
    DEFAULT_INSTANCE = 'engine'
    DEFAULT_PRODUCT = 'federate'
    CONFIGS = []
    METRIC_TYPES = {
      'cpu.load': ('cpu_load', 'gauge'),
      'total.jvm.memory': ('jvm_total_memory', 'gauge'),
      'free.jvm.memory': ('jvm_free_memory', 'gauge'),
      'used.jvm.memory': ('jvm_used_memory', 'gauge'),
      'total.physical.system.memory': ('device_total_memory', 'gauge'),
      'total.free.system.memory': ('device_free_memory', 'gauge'),
      'total.used.system.memory': ('device_used_memory', 'gauge'),
      'number.of.cpus': ('total_cores', 'gauge'),
      'open.client.connections': ('current_open_connections', 'gauge'),
      'number.of.applications': ('number_of_applications', 'gauge'),
      'number.of.virtual.hosts': ('number_of_virtual_hosts', 'gauge'),
      'response.concurrency.statistics.mean': ('response_concurrency_statistics_mean', 'gauge'),
      'response.time.statistics.mean': ('response_time_statistics_mean', 'gauge'),
      'response.time.statistics.90.percentile': ('response_tim_statistics_90_percentile', 'gauge')
    }

    METRIC_NA = {
        'N/A': ('0.00')
    }

    HEADER = {
        'Accept': "Content-Type,Authorization,Cache-Control",
        'Content-Type': "application/json",
        'X-Xsrf-Header': "PingIdentity",
        'Cache-Control': "no-cache"
    }


    def configure_callback(conf):
        # global CONFIGS ### HEARTBEAT_URL
        # CONFIGS = []
        VERBOSE_LOGGING = False

        for node in conf.children:
            if node.key == "url":
                heartbeat_url = node.values[0]
            elif node.key == "type":
                instance_type = node.values[0]
            elif node.key == "product":
                product_type = node.values[0]
            else:
                logger('warn', 'Unknown config key: %s' % node.key)

        CONFIGS.append({
            'url': heartbeat_url,
            'type': instance_type,
            'product': product_type
        })

    def get_stats(conf):
        _conf = conf
        stats = dict()
        # logger('info', "HEARTBEAT_URL: %s" % HEARTBEAT_URL )
        try:
            r = requests.request('GET', _conf['url'], headers=HEADER, verify=False)
            stats = r.json()
            # stats = json.loads(r.content)
        except Exception as e:
            logger('warn', "Unable to retrieve stats: %s" % e.message)
            return stats

        return stats["items"]


    def read_callback():
        logger('verb', "beginning read_callback")

        for conf in CONFIGS:
            info = get_stats(conf)

            if not info:
                logger('warn', "%s: No data received" % NAME)
                return

            for collectd_data in info:
                for key, value in collectd_data.items():
                    if key in METRIC_TYPES:
                        key_root, val_type = METRIC_TYPES[key]
                        clean_value = '0.00' if value.split(' ')[0] == 'N/A' else  value.split(' ')[0]
                        val = collectd.Values(plugin=NAME, type=val_type, plugin_instance="ping-" + conf['product'])
                        val.type_instance = conf['type'] + "." + key_root
                        val.values = [ clean_value ]
                        val.dispatch()


    def logger(t, msg):
        if t == 'err':
            collectd.error('%s: %s' % (NAME, msg))
        elif t == 'warn':
            collectd.warning('%s: %s' % (NAME, msg))
        elif t == 'verb':
            if VERBOSE_LOGGING:
                collectd.info('%s: %s' % (NAME, msg))
        else:
            collectd.notice('%s: %s' % (NAME, msg))

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pingfederate-admin
  labels:
    cluster: pingfederate-cluster
    role: pingfederate-admin
spec:
  serviceName: pingfederate-admin
  selector:
    matchLabels:
      role: pingfederate-admin
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      name: pingfederate-admin
      labels:
        cluster: pingfederate-cluster
        role: pingfederate-admin
      annotations:
        lastUpdateReason: "NA"
    spec:
      serviceAccount: ping-serviceaccount
      initContainers:
      - name: pingfederate-init
        # FIXME: switch to same user as app
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        image: pingcloud-mirror.jfrog.io/bitnami/kubectl:1.15.3
        imagePullPolicy: IfNotPresent
        command:
        - /copy-dependencies.sh
        volumeMounts:
        - name: ssh-dir
          mountPath: /.ssh
        - name: data-dir
          mountPath: /data
        - name: ssh-id-key-secret
          mountPath: /id_rsa
          subPath: id_rsa
        - name: known-hosts-config
          mountPath: /known_hosts
          subPath: known_hosts
        - name: pingfederate-init
          mountPath: /copy-dependencies.sh
          subPath: copy-dependencies.sh
        - name: pingfederate-init
          mountPath: /utils.lib.sh
          subPath: utils.lib.sh
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
      - name: wait-for-services
        # FIXME: switch to same user as app
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        image: pingcloud-mirror.jfrog.io/busybox:1.32
        imagePullPolicy: IfNotPresent
        command:
        - /wait-for-services.sh
        volumeMounts:
        - name: pingfederate-init
          mountPath: /utils.lib.sh
          subPath: utils.lib.sh
        - name: pingfederate-init
          mountPath: /wait-for-services.sh
          subPath: wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
      containers:
      - name: pingfederate-admin
        image: pingcloud-mirror.jfrog.io/pingidentity/pingfederate:2010-10.1.2
        imagePullPolicy: IfNotPresent
        env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: AUTHENTICATION_MODE
          value: LDAP
        - name: PF_DNS_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingcommon-passwords
              key: PF_LDAP_PASSWORD
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingcommon-passwords
              key: PF_ADMIN_USER_PASSWORD
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        - secretRef:
            name: devops-secret
            optional: true
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "2Gi"
            cpu: "1"
        volumeMounts:
        # FIXME: fix home directory when containers run as non-root user
        - name: ssh-dir
          mountPath: /root/.ssh
        - name: topology-descriptor
          mountPath: /opt/staging/topology/descriptor.json
          subPath: descriptor.json
        - name: data-dir
          mountPath: /usr/local/bin/kubectl
          subPath: kubectl
        - name: data-dir
          mountPath: /usr/local/bin/skbn
          subPath: skbn
        - name: data-dir
          mountPath: /opt/staging/native-s3-ping.jar
          subPath: native-s3-ping.jar
        - name: data-dir
          mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - name: out-dir
          mountPath: /opt/out
        - name: pingfederate-license
          mountPath: /opt/in/instance/server/default/conf/pingfederate.lic
          subPath: pingfederate.lic
        - name: data-dir
          mountPath: /opt/staging/ds_env_vars
          subPath: ds_env_vars
        - mountPath: /etc/podinfo
          name: podinfo
        readinessProbe:
          exec:
            command: [ /opt/staging/hooks/85-pf-admin-readiness.sh ]
          initialDelaySeconds: 90
          periodSeconds: 5
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command: [ /opt/staging/hooks/99-pf-admin-liveness.sh ]
          initialDelaySeconds: 90
          periodSeconds: 30
          failureThreshold: 3
          timeoutSeconds: 5
        ports:
        - containerPort: 9999
      volumes:
      - name: podinfo
        downwardAPI:
          items:
            - path: labels
              fieldRef:
                fieldPath: metadata.labels
            - path: annotations
              fieldRef:
                fieldPath: metadata.annotations
            - path: cpu_limit
              resourceFieldRef:
                containerName: pingfederate-admin
                divisor: 1m
                resource: limits.cpu
            - path: cpu_request
              resourceFieldRef:
                containerName: pingfederate-admin
                divisor: 1m
                resource: requests.cpu
      - name: ssh-dir
        emptyDir: {}
      - name: data-dir
        emptyDir: {}
      - name: pingfederate-init
        configMap:
          name: pingcommon-init
          defaultMode: 0555
      - name: topology-descriptor
        configMap:
          name: topology-descriptor
          optional: true
          defaultMode: 0644
      - name: ssh-id-key-secret
        secret:
          secretName: ssh-id-key-secret
          optional: true
          defaultMode: 0400
      - name: known-hosts-config
        configMap:
          name: known-hosts-config
          optional: true
          defaultMode: 0644
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingfederate-license
        secret:
          secretName: pingfederate-license
          optional: true
          defaultMode: 0400
      - name: pingaccess-passwords
        secret:
          secretName: pingaccess-passwords
          optional: true
          defaultMode: 0400
  volumeClaimTemplates:
  - metadata:
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: pingfederate-gp2
      resources:
        requests:
          storage: 20Gi

---

#
# This defines the pingfederate runtime/engine statefulset.
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pingfederate
  labels:
    cluster: pingfederate-cluster
    role: pingfederate-engine
spec:
  selector:
    matchLabels:
      role: pingfederate-engine
  serviceName: pingfederate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      name: pingfederate-engine
      labels:
        cluster: pingfederate-cluster
        role: pingfederate-engine
      annotations:
        lastUpdateReason: "NA"
    spec:
      serviceAccount: ping-serviceaccount
      affinity:
        podAntiAffinity:
          # Add a soft requirement for each PF runtime pod to be deployed to a different AZ
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: role
                      operator: In
                      values:
                        - pingfederate-engine
                topologyKey: "failure-domain.beta.kubernetes.io/zone"
      initContainers:
      - name: pingfederate-init
        # FIXME: switch to same user as app
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        image: pingcloud-mirror.jfrog.io/bitnami/kubectl:1.15.3
        imagePullPolicy: IfNotPresent
        command:
        - /copy-dependencies.sh
        volumeMounts:
        - name: ssh-dir
          mountPath: /.ssh
        - name: data-dir
          mountPath: /data
        - name: ssh-id-key-secret
          mountPath: /id_rsa
          subPath: id_rsa
        - name: known-hosts-config
          mountPath: /known_hosts
          subPath: known_hosts
        - name: pingfederate-init
          mountPath: /copy-dependencies.sh
          subPath: copy-dependencies.sh
        - name: pingfederate-init
          mountPath: /utils.lib.sh
          subPath: utils.lib.sh
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
      - name: wait-for-services
        # FIXME: switch to same user as app
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        image: pingcloud-mirror.jfrog.io/busybox:1.32
        imagePullPolicy: IfNotPresent
        command:
        - /wait-for-services.sh
        volumeMounts:
        - name: pingfederate-init
          mountPath: /utils.lib.sh
          subPath: utils.lib.sh
        - name: pingfederate-init
          mountPath: /wait-for-services.sh
          subPath: wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
      containers:
      - name: pingfederate
        image: pingcloud-mirror.jfrog.io/pingidentity/pingfederate:2010-10.1.2
        imagePullPolicy: IfNotPresent
        env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_ENGINE
        - name: AUTHENTICATION_MODE
          value: none
        - name: PF_DNS_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingcommon-passwords
              key: PF_ADMIN_USER_PASSWORD
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingcommon-passwords
              key: PF_LDAP_PASSWORD
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        - secretRef:
            name: devops-secret
            optional: true
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
          limits:
            memory: "4Gi"
            cpu: "2"
        volumeMounts:
        # FIXME: fix home directory when containers run as non-root user
        - name: ssh-dir
          mountPath: /root/.ssh
        - name: topology-descriptor
          mountPath: /opt/staging/topology/descriptor.json
          subPath: descriptor.json
        - name: data-dir
          mountPath: /usr/local/bin/kubectl
          subPath: kubectl
        - name: data-dir
          mountPath: /usr/local/bin/skbn
          subPath: skbn
        - name: data-dir
          mountPath: /opt/staging/native-s3-ping.jar
          subPath: native-s3-ping.jar
        - name: data-dir
          mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - name: pingfederate-license
          mountPath: /opt/in/instance/server/default/conf/pingfederate.lic
          subPath: pingfederate.lic
        - name: data-dir
          mountPath: /opt/staging/ds_env_vars
          subPath: ds_env_vars
        - mountPath: /etc/podinfo
          name: podinfo
        readinessProbe:
          exec:
            command: [ /opt/staging/hooks/99-pf-engine-liveness.sh ]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command: [ /opt/staging/hooks/99-pf-engine-liveness.sh ]
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 3
          timeoutSeconds: 5
        ports:
        - containerPort: 9031
        - containerPort: 8080

      - name: pingfederate-collectd-exporter
        ### SHOULD BE UPLOADED TO PING REPO AND CHANGED!
        image: quay.io/signalfuse/collectd
        command:
        - "collectd-init.sh:"
        ports:
          - containerPort: 9103
            name: pingfederate-collectd-tcp
            protocol: TCP
          - containerPort: 8126
            protocol: UDP
        volumeMounts:
          - mountPath: /etc/collectd/collectd.conf
            subPath: collectd.conf
            name: collectd-conf
          - mountPath: /etc/collectd/collectd-init.sh
            subPath: collectd-init.sh
            name: collectd-init
          - mountPath: /opt/collect-heartbeat.py
            subPath: collect-heartbeat.py
            name: collect-heartbeat
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi

      volumes:
      - name: podinfo
        downwardAPI:
          items:
            - path: labels
              fieldRef:
                fieldPath: metadata.labels
            - path: annotations
              fieldRef:
                fieldPath: metadata.annotations
            - path: cpu_limit
              resourceFieldRef:
                containerName: pingfederate
                divisor: 1m
                resource: limits.cpu
            - path: cpu_request
              resourceFieldRef:
                containerName: pingfederate
                divisor: 1m
                resource: requests.cpu
      - name: ssh-dir
        emptyDir: {}
      - name: data-dir
        emptyDir: {}
      - name: pingfederate-init
        configMap:
          name: pingcommon-init
          defaultMode: 0555
      - name: topology-descriptor
        configMap:
          name: topology-descriptor
          optional: true
          defaultMode: 0644
      - name: ssh-id-key-secret
        secret:
          secretName: ssh-id-key-secret
          optional: true
          defaultMode: 0400
      - name: known-hosts-config
        configMap:
          name: known-hosts-config
          optional: true
          defaultMode: 0644
      - name: pingfederate-license
        secret:
          secretName: pingfederate-license
          optional: true
          defaultMode: 0400
      - name: collectd-conf
        configMap:
          name: collectd-conf
          defaultMode: 0644
      - name: collectd-init
        configMap:
          name: collectd-init
          defaultMode: 0644
      - name: collect-heartbeat
        configMap:
          name: collect-heartbeat
          defaultMode: 0644
