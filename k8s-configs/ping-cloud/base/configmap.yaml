apiVersion: v1
kind: ConfigMap
metadata:
  name: known-hosts-config

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: pingcommon-init
data:
  init.sh: |-
    #!/bin/sh -e

    #--- Sleep for the configured initial delay seconds --- #
    SLEEP_SECONDS=${INITIAL_DELAY_SECONDS:-0}
    sleep ${SLEEP_SECONDS}

    #--- Copy SSH configuration files --- #
    test -f /known_hosts && cp /known_hosts /.ssh
    test -f /id_rsa && cp /id_rsa /.ssh

    # Install kubectl
    echo "Installing kubectl"
    curl https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl -o /data/kubectl

    chmod +x /data/kubectl
    alias kubectl=/data/kubectl

    #--- Wait for services if there are any dependent services we must wait on --- #
    if test ! -z "${WAIT_FOR_SERVICES}"; then
      WAIT_PER_REPLICA=${WAIT_PER_REPLICA:-900}

      for SERVICE in ${WAIT_FOR_SERVICES}; do
        DEPLOYMENT=$(kubectl get statefulset,deployment -o name | grep "${SERVICE}$")

        if test -z "${DEPLOYMENT}"; then
          echo "Service ${SERVICE} does not exist"
          continue
        fi

        NUM_REPLICAS=$(kubectl get "${DEPLOYMENT}" -o jsonpath='{.spec.replicas}')
        TIMEOUT=$((NUM_REPLICAS * WAIT_PER_REPLICA))

        echo "Waiting ${TIMEOUT} seconds for ${NUM_REPLICAS} replica(s) of ${SERVICE} to be ready"
        kubectl rollout status --timeout "${TIMEOUT}s" "${DEPLOYMENT}" -w
      done
    fi

    #--- Note: this initialization is only needed for PingDirectory ---#
    #--- Generate a dummy topology JSON file so the hook that generates it in the image is not triggered ---#
    TOPOLOGY_FILE=/data/topology.json
    cat <<EOF > "${TOPOLOGY_FILE}"
    {
          "serverInstances" : []
    }
    EOF

    exit 0