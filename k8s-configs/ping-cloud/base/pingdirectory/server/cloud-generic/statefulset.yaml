# This defines the deployment (as a stateful set) of the pingdirectory servers

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pingdirectory
  labels:
    class: pingdirectory-server
spec:
  serviceName: pingdirectory
  replicas: 3
  selector:
    matchLabels:
      class: pingdirectory-server
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      annotations:
        lastUpdateReason: "NA"
        prometheus.io/scrape: "true"
        prometheus.io/path: "/"
        prometheus.io/port: "8080"
        newrelic.io/scrape: "true"
      labels:
        class: pingdirectory-server
        entitled-app: "true"
    spec:
      serviceAccount: ping-serviceaccount
      priorityClassName: high-priority-apps-to-avoid-pending-state
      affinity:
        podAntiAffinity:
          # Add a hard requirement for each PD pod to be deployed to a different node
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - pingdirectory
              topologyKey: "kubernetes.io/hostname"
          # Add a soft requirement for each PD pod to be deployed to a different AZ
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: role
                      operator: In
                      values:
                        - pingdirectory
                topologyKey: "topology.kubernetes.io/zone"
        # this does not apply in dev/test and is removed via kustomize
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: pingidentity.com/pd
                    operator: In
                    values:
                      - "true"
      # this does not apply in dev/test and is removed via kustomize
      tolerations:
        - key: "pingidentity.com/pd-only"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      terminationGracePeriodSeconds: 300
      initContainers:
      - command:
        - /wait-for-services.sh
        env:
        - name: WAIT_FOR_SERVICES
          value: pingdirectory
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.36
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 9031
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingdirectory-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingdirectory-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingdirectory-init
          subPath: wait-for-services.sh
      - name: newrelic-tags-exporter
        env:
        - name: NEW_RELIC_APP_NAME
          value: pingdirectory
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v2.0-release-branch-latest
        imagePullPolicy: IfNotPresent
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 9031
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      - image: 705370621539.dkr.ecr.us-west-2.amazonaws.com/geoff/codecommit:0.0.1
        imagePullPolicy: Always
        name: download-profile
        env:
          - name: KEY_PATH
            value: /secrets/key/id_rsa
          - name: SERVER_PROFILE_DIR
            value: /tmp/profile
          - name: SERVER_PROFILE_BRANCH
            value: dev
          - name: SERVER_PROFILE_PATH
            value: profiles/pingdirectory
          - name: BUILD_INFO_PATH
            value: /out/data/build-info.txt
        envFrom:
        - configMapRef:
            name: pd-restart-strategy
        - configMapRef:
            name: pingdirectory-environment-variables
        volumeMounts:
          - mountPath: /tmp/profile
            name: server-profile
          - mountPath: /secrets/key
            name: ssh-id-key-secret
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 9031
      - image: 705370621539.dkr.ecr.us-west-2.amazonaws.com/geoff/python-topology:0.0.1
        imagePullPolicy: Always
        name: topology-generation
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: K8S_STATEFUL_SET_NAME
          value: pingdirectory
        - name: REGION_NICK_NAME
          valueFrom:
            configMapKeyRef:
              key: REGION_NICK_NAME
              name: global-config
        - name: ADS_CRT_FILE
          value: /usr/local/secrets/ads.crt
        - name: ADS_KEY_FILE
          value: /usr/local/secrets/ads.key
        - name: TOPOLOGY_DESCRIPTOR_JSON
          value: /tmp/descriptor/descriptor.json
        - name: TOPOLOGY_OUTPUT_PATH
          value: /out/data/topology.json
        envFrom:
        - configMapRef:
            name: topology-config
        - configMapRef:
            name: pd-default-config
        - configMapRef:
            name: pd-common-config
        - configMapRef:
            name: pd-restart-strategy
        - configMapRef:
            name: pingcommon-environment-variables
        volumeMounts:
        - mountPath: /usr/local/secrets
          name: pingdirectory-passwords
          readOnly: true
        - mountPath: /tmp/descriptor
          name: topology-descriptor
        - mountPath: /out/data
          name: out-dir
      - command:
        - ./entrypoint.sh
        env:
        - name: VERBOSE
          value: "true"
        - name: TOPOLOGY_FILE_PATH
          value: /out/data/topology.json
        - name: ADS_CRT_FILE
          value: /usr/local/secrets/ads.crt
        - name: ADS_KEY_FILE
          value: /usr/local/secrets/ads.key
        - name: P14C_ENVIRONMENT_ID
          valueFrom:
            secretKeyRef:
              key: P14C_ENVIRONMENT_ID
              name: pingdirectory-passwords
        - name: P14C_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: P14C_CLIENT_ID
              name: pingdirectory-passwords
        - name: P14C_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: P14C_CLIENT_SECRET
              name: pingdirectory-passwords
        - name: ROOT_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: root-user-password
              name: pingdirectory-passwords
        - name: DMANAGER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: DMANAGER_PASSWORD
              name: pingdirectory-dmanager-password
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_LDAP_PASSWORD
              name: pingcommon-passwords
        - name: ACME_CERT_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ACME_CERT_KEYSTORE_PASSWORD
              name: pingcommon-passwords
        - name: DA_OAUTH_TOKEN_VALIDATOR_SECRET
          valueFrom:
            secretKeyRef:
              key: DA_OAUTH_TOKEN_VALIDATOR_SECRET
              name: pingcommon-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        - name: LICENSE_KEY_FILE
          value: /out/data/PD.license
        - name: LICENSE_SERVER_URL
          value: https://license.pingidentity.com/devops/license
        - name: OUT_CONFIG_DIR
          value: /out/data/instance/config
        - name: OUT_DB_DIR
          value: /out/data/db
        - name: OUT_DIR
          value: /out/data
        - name: REGION
          value: us-west-2
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: LOCAL_INSTANCE_NAME
          value: $(POD_NAME)-$(REGION_NICK_NAME)
        - name: SERVER_PROFILE_DIR
          value: /profile
        envFrom:
        - configMapRef:
            name: pd-restart-strategy
        - configMapRef:
            name: pd-common-config
        - configMapRef:
            name: global-config
        - configMapRef:
            name: pingdirectory-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: 705370621539.dkr.ecr.us-west-2.amazonaws.com/geoff/pd:10.0.0.2-alpine-example
        imagePullPolicy: Always
        name: pd-init
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /out/data
          name: out-dir
        - mountPath: /profile
          name: server-profile    
        - mountPath: /usr/local/secrets
          name: pingdirectory-passwords
          readOnly: true
        - mountPath: /usr/local/secrets/certs
          name: acme-tls-cert
          readOnly: true
        - mountPath: /usr/local/secrets/truststore_certs
          name: pingdirectory-truststore-certs
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 9031
      containers:
      - env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: LDAPS_PORT
          valueFrom:
            configMapKeyRef:
              key: LDAPS_PORT
              name: pd-default-config
        - name: PD_INIT_SOURCE
          value: pingdirectory-0.pingdirectory.ping-cloud.svc.cluster.local
        envFrom:
        - configMapRef:
            name: pd-common-config
        - secretRef:
            name: newrelic-license-key
        - configMapRef:
            name: pingdirectory-environment-variables
        image: 705370621539.dkr.ecr.us-west-2.amazonaws.com/geoff/pd:10.0.0.2-alpine-example
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /available-state
            port: 1443
            scheme: HTTPS
          failureThreshold: 3
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: /available-state
            port: 1443
            scheme: HTTPS
          failureThreshold: 3
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
          initialDelaySeconds: 5
        name: pingdirectory
        ports:
        - containerPort: 1389
          name: ldap
          protocol: TCP
        - containerPort: 1636
          name: ldaps
          protocol: TCP
        - containerPort: 1443
          name: https
          protocol: TCP
        - containerPort: 8989
          name: repl
          protocol: TCP
        resources:
          limits:
            cpu: "3"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 9031
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/pingidentity/runtime/config
          name: out-dir
          subPath: ./instance/config
        - mountPath: /opt/pingidentity/runtime/velocity
          name: out-dir
          subPath: ./instance/velocity
        - mountPath: /opt/pingidentity/runtime/lib/extensions
          name: out-dir
          subPath: ./instance/lib/extensions
        - mountPath: /out/data
          name: out-dir
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /usr/local/secrets
          name: pingdirectory-passwords
          readOnly: true
        - mountPath: /opt/in/instance/PingDirectory.lic
          name: pingdirectory-license
          subPath: PingDirectory.lic
      - args:
        - --statsd.mapping-config=/tmp/mapping/pingdirectory-statsd-mapping.yml
        - --statsd.listen-udp=:8125
        - --web.listen-address=:9102
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/prom/statsd-exporter:v0.14.1
        imagePullPolicy: IfNotPresent
        name: pingdirectory-statsd-exporter
        ports:
        - containerPort: 9102
          protocol: TCP
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8125
          protocol: UDP
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 0
          runAsNonRoot: true
          runAsUser: 9031
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /tmp/mapping/
          name: pingdirectory-statsd-mapping
      securityContext:
        fsGroup: 9999
        runAsGroup: 0
      volumes:
      - name: server-profile
        emptyDir: {}
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingdirectory-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingdirectory-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingdirectory-license
      - name: pingdirectory-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingdirectory-passwords
      - name: acme-tls-cert
        secret:
          defaultMode: 256
          optional: true
          secretName: acme-tls-cert
      - configMap:
          defaultMode: 420
          name: pingdirectory-statsd-mapping
        name: pingdirectory-statsd-mapping
      - name: pingdirectory-truststore-certs
        secret:
          defaultMode: 256
          optional: true
          secretName: pingdirectory-truststore-certs
  volumeClaimTemplates:
    - metadata:
        name: out-dir
        annotations:
          volume.autoscaler.kubernetes.io/ignore: "true"
        labels:
          class: pingdirectory-server
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: pingdirectory-gp3
        resources:
          requests:
            storage: 40Gi
      