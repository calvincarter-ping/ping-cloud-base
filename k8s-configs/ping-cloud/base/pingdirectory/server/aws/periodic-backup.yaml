apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-backup-cronjob
data:
  backup-cronjob.sh: |-
    #!/bin/sh
    
    # Function to get the full pod name based on the prefix
    get_pod_name() {
      kubectl get pods -n "$NAMESPACE" --no-headers -o custom-columns=":metadata.name" | grep "^$POD_PREFIX" | head -n 1
    }

    # Function to check pod status
    check_pod_status() {
      kubectl get pod "$1" -n "$NAMESPACE" -o jsonpath='{.status.phase}'
    }
    
    # Variables
    POD_PREFIX="pingdirectory-backup"  # Known prefix of the pod name that backup Job will recreate
    PVC_NAME="pingdirectory-backup"
    NAMESPACE="ping-cloud"
    
    #    POD_NAME=$(get_pod_name)
    #    if [ -n "$POD_NAME" ]; then
    #        kubectl delete pvc "$PVC_NAME" -n "$NAMESPACE"
    #    fi

    # Execute backup-ops.sh script (which kicks off the k8s pingdirectory-backup Job)
    SCRIPT="/opt/in/backup-ops.sh"
    test -x ${SCRIPT} && ${SCRIPT} "scheduled-cronjob"

    # Wait for pod to be in Terminating or Completed state
    while true; do
      POD_NAME=$(get_pod_name)
  
      if [ -z "$POD_NAME" ]; then
        echo "Pod with prefix $POD_PREFIX not found. Waiting..."
      else
        POD_STATUS=$(check_pod_status "$POD_NAME")
  
        if [ "$POD_STATUS" = "Terminating" ] || [ "$POD_STATUS" = "Succeeded" ]; then
          echo "Pod $POD_NAME is in $POD_STATUS state. Proceeding to delete PVC $PVC_NAME."
          kubectl delete pvc "$PVC_NAME" -n "$NAMESPACE"
          break
        else
          echo "Pod $POD_NAME is in $POD_STATUS state. Waiting..."
        fi
      fi
  
      sleep 5  # Wait for 5 seconds before checking again
    done

---

# Do a full backup of the user backend every 6 hours.
# A manual restore can be performed using the restore job (restore.yaml) when
# necessary.

apiVersion: batch/v1
kind: CronJob
metadata:
  name: pingdirectory-periodic-backup
spec:
  schedule: "30 */6 * * *"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 90
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          serviceAccountName: pingdirectory-ops-serviceaccount
          restartPolicy: OnFailure
          initContainers:
            - name: pingdirectory-init
              securityContext:
                runAsGroup: 9999
                runAsNonRoot: true
                runAsUser: 9031
                allowPrivilegeEscalation: false
              image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.19.0
              imagePullPolicy: IfNotPresent
              command:
                - /copy-dependencies.sh
              envFrom:
                - configMapRef:
                    name: pingdirectory-environment-variables
                - configMapRef:
                    name: pingcommon-environment-variables
              volumeMounts:
                - name: data-dir
                  mountPath: /data
                - name: pingdirectory-init
                  mountPath: /copy-dependencies.sh
                  subPath: copy-dependencies.sh
                - name: pingdirectory-init
                  mountPath: /utils.lib.sh
                  subPath: utils.lib.sh
                - name: pingdirectory-init
                  mountPath: /logger.lib.sh
                  subPath: logger.lib.sh
          containers:
          - name: pingdirectory-backup
            image: 705370621539.dkr.ecr.us-west-2.amazonaws.com/pingcloud-apps/pingdirectory:pdo-8201-pd-backup
            imagePullPolicy: Always
            securityContext:
              runAsGroup: 9999
              runAsNonRoot: true
              runAsUser: 9031
              allowPrivilegeEscalation: false
            command:
            - /opt/in/backup-cronjob.sh
            envFrom:
            - configMapRef:
                name: pingdirectory-environment-variables
            - configMapRef:
                name: pingcommon-environment-variables
            env:
            - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
              value: "true"
            - name: PING_CLOUD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            volumeMounts:
            - name: data-dir
              mountPath: /usr/local/bin/kubectl
              subPath: kubectl
            - name: backup-cronjob-script
              mountPath: /opt/in/backup-cronjob.sh
              subPath: backup-cronjob.sh
            - name: backup-ops-script
              mountPath: /opt/in/backup-ops.sh
              subPath: backup-ops.sh
            - name: pingdirectory-init
              mountPath: /opt/in/hooks/logger.lib.sh
              subPath: logger.lib.sh
          securityContext:
            fsGroup: 9999
          volumes:
          - name: data-dir
            emptyDir: {}
          - name: backup-cronjob-script
            configMap:
              name: pingdirectory-backup-cronjob
              defaultMode: 0555
          - name: backup-ops-script
            configMap:
              name: pingdirectory-backup-ops-template-files
              items:
              - key: backup-ops.sh
                path: backup-ops.sh
              defaultMode: 0555
          - name: pingdirectory-init
            configMap:
              name: pingcommon-init
              defaultMode: 0555