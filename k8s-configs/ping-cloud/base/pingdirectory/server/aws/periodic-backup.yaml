apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-backup
data:
  backup.sh: |-
    #!/bin/sh
    set -e

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl
    
    chmod +x /tmp/kubectl
    echo "Running backup script within pingdirectory pod"

    # This is the backup directory on the Pingdirectory-backup persistant volume
    SERVER_BACKUP_DIR="/opt/backup"
    
    BACKENDS=$(echo "${BACKENDS_TO_BACKUP}" | tr ';' ' ')
    echo "Doing a full backup of backends \"${BACKENDS}\" to ${SERVER_BACKUP_DIR}"
    for BACKEND_ID in ${BACKENDS}; do
      # Doing LDAP search on backends before running backups such that only the backends available in the server are uploaded to S3 .
      ldapsearch -D "${ROOT_USER_DN}" -w "${ROOT_USER_PASSWORD}" -h "localhost" -p ${LDAPS_PORT} --baseDN="cn=Backends,cn=config" "(objectclass=ds-cfg-backend)" ds-cfg-backend-id | grep -w "${BACKEND_ID},cn=Backends,cn=config" >/dev/null
      is_backend_found=$?

      if test ${is_backend_found} -eq 0; then
        BACKEND_BACKUP_DIR="${SERVER_BACKUP_DIR}/${BACKEND_ID}"
        printf "\n----- Doing a full backup of ${BACKEND_ID} backend to ${BACKEND_BACKUP_DIR} -----\n"
        /opt/out/instance/bin/backup --backupDirectory "${BACKEND_BACKUP_DIR}" --backendID "${BACKEND_ID}"
        backup_status=$?
      
        if test ${backup_status} -ne 0; then
          echo "exiting backup status is ${backup_status}"
          exit ${backup_status}
        fi
      else
        "BACKEND_ID='${BACKEND_ID}' was not found on the PingDirectory server"
      fi
    done 

    # Zip backup files and append the current timestamp to zip filename
    cd "${SERVER_BACKUP_DIR}"
    DST_FILE_TIMESTAMP="data-$(date +%m-%d-%Y.%H.%M.%S).zip"
    zip -r "${DST_FILE_TIMESTAMP}" *

    UPLOAD_DIR="${SERVER_BACKUP_DIR}/backup-upload"
    mkdir -p "${UPLOAD_DIR}"

    mv "${DST_FILE_TIMESTAMP}" "${UPLOAD_DIR}/${DST_FILE_TIMESTAMP}"
    cd "${UPLOAD_DIR}" || exit 1

    # Make a copy: latest.zip
    DST_FILE_LATEST=latest.zip

    cp "${UPLOAD_DIR}/${DST_FILE_TIMESTAMP}" "${UPLOAD_DIR}/${DST_FILE_LATEST}"

    echo "Copying files in '${UPLOAD_DIR}' to S3"
    aws s3 cp "${UPLOAD_DIR}" "${BACKUP_CLOUD_PREFIX}"/pingdirectory --recursive

    # Print the names of the uploaded files so callers know exactly what was uploaded
    echo "The following files were uploaded:"
    ls ${UPLOAD_DIR} | xargs

    if test ${?} -eq 0; then
      UPLOAD_FILE=$(tail -1 "${LOG_FILE}")
      test -z "${UPLOAD_FILES}" && UPLOAD_FILES="${UPLOAD_FILE}" || UPLOAD_FILES="${UPLOAD_FILES} ${UPLOAD_FILE}"
    else
      echo "Upload script not found on server ${SERVER}"
    fi
    
    echo "Deleting PingDirectory backup pvc"
    /tmp/kubectl delete pvc pingdirectory-backup

---
# Do a full backup of the user backend every 6 hours.
# A manual restore can be performed using the restore job (restore.yaml) when
# necessary.

apiVersion: batch/v1
kind: CronJob
metadata:
  name: pingdirectory-periodic-backup
spec:
  schedule: "30 */6 * * *"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 90
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          serviceAccount: ping-serviceaccount
          tolerations:
          - key: "pingidentity.com/pd-only"
            operator: "Equal"
            value: "true"
            effect: "NoSchedule"
          restartPolicy: OnFailure
          containers:
          - name: pingdirectory-backup
            image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingdirectory/dev:v1.18-release-branch-latest
            imagePullPolicy: Always
            securityContext:
              runAsGroup: 9999
              runAsNonRoot: true
              runAsUser: 9031
              allowPrivilegeEscalation: false
            command:
            - /opt/in/backup.sh
            envFrom:
            - configMapRef:
                name: pingdirectory-environment-variables
            - configMapRef:
                name: pingcommon-environment-variables
            env:
            - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
              value: "true"
            volumeMounts:
            - name: backup-script
              mountPath: /opt/in/backup.sh
              subPath: backup.sh
            - name: pd-backup-volume
              mountPath: /opt/out/backup
              subPath: backup
            - name: pd-backup-volume
              mountPath: /opt/out/backup-upload
              subPath: backup-upload
          volumes:
          - name: backup-script
            configMap:
              name: pingdirectory-backup
              defaultMode: 0555
          - name: pd-backup-volume
            persistentVolumeClaim:
              claimName: pingdirectory-backup

