apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-backup
data:
  backup.sh: |-
    #!/bin/sh
    set -e

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl
    
    chmod +x /tmp/kubectl

    UPLOAD_FILES=
    SCRIPT="${HOOKS_DIR}"/90-upload-backup-s3.sh
    LOG_FILE=/tmp/upload.log

    test -z "${BACKUP_RESTORE_POD}" && SERVER="${K8S_STATEFUL_SET_NAME}-0" || SERVER="${BACKUP_RESTORE_POD}"

    #echo "Running backup script within ${SERVER} pod"
    #/tmp/kubectl exec "${SERVER}" -c pingdirectory -- sh -c "test -x ${SCRIPT} && ${SCRIPT}"> "${LOG_FILE}"

    # create userroot dir
    mkdir -p /opt/out/backup/userRoot

    # Run backup
    backup --task \
      --useSSL --trustAll \
      --hostname pingdirectory-0.pingdirectory.ping-cloud.svc.cluster.local \
      --port 1636 \
      --bindDN "cn=administrator" \
      --bindPassword "2FederateM0re" \
      --backupDirectory "/opt/out/backup/userRoot" \
      --backendID "userRoot" \
      --compress

    # zip files with timestamp

    cd /opt/out/backup/userRoot
    DST_FILE_TIMESTAMP="data-$(date +%m-%d-%Y.%H.%M.%S).zip"
    zip -r "${DST_FILE_TIMESTAMP}" *

    # create new upload dir and upload from there
    UPLOAD_DIR="/opt/out/backup/backup-upload"
    rm -rf "${UPLOAD_DIR}"
    mkdir -p "${UPLOAD_DIR}"

    mv "${DST_FILE_TIMESTAMP}" "${UPLOAD_DIR}/${DST_FILE_TIMESTAMP}"

    # Cleanup backup dir
    cd "${UPLOAD_DIR}" || exit 1
    rm -rf /opt/out/backup/userRoot

    # Upload to s3
    beluga_log "Copying files in '${UPLOAD_DIR}' to '${BACKUP_URL}'"

    function awscliCopy() {
        SOURCE="${1}"
        DESTINATION="${2}"
        RECURSIVE="${3}"

      if [ -n "$RECURSIVE" ]; then
        if ! aws s3 cp "$SOURCE" "${DESTINATION}" --recursive; then
          return 1
        fi
      else
        if ! aws s3 cp "$SOURCE" "${DESTINATION}"; then
          return 1
        fi
      fi
    }

    if ! awscliCopy "${UPLOAD_DIR}" "${BACKUP_URL}/" "Recursive"; then
      ERROR_MSG="Failed to upload files in ${UPLOAD_DIR}"
      beluga_error ${ERROR_MSG}
      exit 1
    fi


    # STDOUT all the files in one line for integration test
    ls ${UPLOAD_DIR} | xargs

    # Cleanup upload dir
    rm -rf "${UPLOAD_DIR}"   


    if test ${?} -eq 0; then
      UPLOAD_FILE=$(tail -1 "${LOG_FILE}")
      test -z "${UPLOAD_FILES}" && UPLOAD_FILES="${UPLOAD_FILE}" || UPLOAD_FILES="${UPLOAD_FILES} ${UPLOAD_FILE}"
    else
      echo "Upload script not found on server ${SERVER}"
    fi
    
    # Print the names of the uploaded files so callers know exactly what was uploaded
    echo "The following files were uploaded:"
    echo "${UPLOAD_FILES}"

---

# Do a full backup of the user backend every 6 hours.
# A manual restore can be performed using the restore job (restore.yaml) when
# necessary.
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: pingdirectory-periodic-backup
spec:
  schedule: "*/2 * * * *"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 90
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          serviceAccount: ping-serviceaccount
          tolerations:
          - key: "pingidentity.com/pd-only"
            operator: "Equal"
            value: "true"
            effect: "NoSchedule"
          restartPolicy: OnFailure
          containers:
          - name: pingdirectory-backup
            image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingdirectory/dev:v1.18-release-branch-latest
            imagePullPolicy: Always
            securityContext:
              runAsGroup: 9999
              runAsNonRoot: true
              runAsUser: 9031
              allowPrivilegeEscalation: false
            command:
            - /opt/in/backup.sh
            envFrom:
            - configMapRef:
                name: pingdirectory-environment-variables
            - configMapRef:
                name: pingcommon-environment-variables
            env:
            - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
              value: "true"
            volumeMounts:
            - name: backup-script
              mountPath: /opt/in/backup.sh
              subPath: backup.sh
          volumes:
          - name: backup-script
            configMap:
              name: pingdirectory-backup
              defaultMode: 0555
