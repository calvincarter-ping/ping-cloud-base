apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-backup
data:
  backup.sh: |-
    #!/bin/sh
       
    export HOOKS_DIR="/opt/in/hooks"

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl

    chmod +x /tmp/kubectl
    SCRIPT="/opt/in/hooks/90-upload-backup-s3.sh"

    test -z "${BACKUP_RESTORE_POD}" && SERVER="${K8S_STATEFUL_SET_NAME}-0" || SERVER="${BACKUP_RESTORE_POD}"

    echo "Running backup script within pingdirectory pod"
    set -o pipefail
    (/opt/out/instance/bin/dsconfig get-backend-prop --no-prompt --hostname "${BACKUP_RESTORE_POD}.${K8S_STATEFUL_SET_SERVICE_NAME}" -p 1636 --backend-name userRoot)|tee
      
    is_backend_found=${?}
    set +o pipefail 

    if test ${is_backend_found} -eq 0; then
    echo "backend exists echo statement"
    test -x ${SCRIPT} && ${SCRIPT} 
    else
    echo "backend does not exists echo statement"
    fi  
    echo "Deleting PingDirectory backup pvc"
    /tmp/kubectl delete pvc pingdirectory-backup

    
    
    

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-backup-cronjob
data:
  backup-cronjob.sh: |-
    #!/bin/sh
    set -e
   
    export HOOKS_DIR="/opt/in/hooks"

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl
    chmod +x /tmp/kubectl

    #Running the backup from github link inorder to create the persistant volumes
    /tmp/kubectl apply -f https://raw.githubusercontent.com/pingidentity/ping-cloud-base/v1.18-release-branch/k8s-configs/ping-cloud/base/pingdirectory/server/aws/backup.yaml -n ping-cloud-vathsalyakidambi-dev

---

# Do a full backup of the user backend every 6 hours.
# A manual restore can be performed using the restore job (restore.yaml) when
# necessary.

apiVersion: batch/v1
kind: CronJob
metadata:
  name: pingdirectory-periodic-backup
spec:
  schedule: "* * * * *"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 90
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          tolerations:
          - key: "pingidentity.com/pd-only"
            operator: "Equal"
            value: "true"
            effect: "NoSchedule"
          restartPolicy: OnFailure
          containers:
          - name: pingdirectory-backup
            image: 705370621539.dkr.ecr.us-west-2.amazonaws.com/pingcloud-apps/pingdirectory:pdo-5123-1
            imagePullPolicy: Always
            securityContext:
              runAsGroup: 9999
              runAsNonRoot: true
              runAsUser: 9031
              allowPrivilegeEscalation: false
            command:
            - /opt/in/backup-cronjob.sh
            envFrom:
            - configMapRef:
                name: pingdirectory-environment-variables
            - configMapRef:
                name: pingcommon-environment-variables
            env:
            - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
              value: "true"
            volumeMounts:
            - name: backup-cronjob-script
              mountPath: /opt/in/backup-cronjob.sh
              subPath: backup-cronjob.sh
          volumes:
          - name: backup-cronjob-script
            configMap:
              name: pingdirectory-backup-cronjob
              defaultMode: 0555


