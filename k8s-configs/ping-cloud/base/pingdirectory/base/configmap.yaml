apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-init
data:
  init.sh: |-
    #!/bin/sh -x

    #--- Wait for services if there are any dependent services we must wait on --- #
    if test ! -z "${WAIT_FOR_SERVICES}"; then
      for SERVICE in "${WAIT_FOR_SERVICES}"; do
        until nslookup "${SERVICE}"; do
          echo "Waiting for service ${SERVICE}"
          sleep 2
        done
      done
    fi

    #--- Sleep for the configured initial delay seconds ---#
    SLEEP_SECONDS=${INITIAL_DELAY_SECONDS:-0}
    sleep ${SLEEP_SECONDS}

    #--- Copy SSH configuration files ---#
    test -f /known_hosts && cp /known_hosts /.ssh
    test -f /id_rsa && cp /id_rsa /.ssh

    # Install kubectl
    echo "Installing kubectl"
    curl https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl -o /data/kubectl
    chmod +x /data/kubectl

    #--- Generate a dummy topology JSON file so the hook that generates it in the image is not triggered ---#
    TOPOLOGY_FILE=/data/topology.json
    cat <<EOF > "${TOPOLOGY_FILE}"
    {
          "serverInstances" : []
    }
    EOF

    exit 0

---

# Mappings for PingDirectory metrics sent to the statsd-exporter, which Prometheus will scrape
# See https://github.com/prometheus/statsd_exporter
apiVersion: v1
kind: ConfigMap
metadata:
  name: pingdirectory-statsd-mapping
data:
  pingdirectory-statsd-mapping.yml: |-
    mappings:
        # operation response time and throughput
      - match: "*.*.response-time"
        name: "response_time"
        labels:
          operation: "$2"
      - match: "*.*.throughput"
        name: "throughput"
        labels:
          operation: "$2"
        # connection handler metrics
      - match: "*.*.*.*.ldap-conn-handler-bytes-read"
        name: "LDAP_connection_handler_bytes_read"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-bytes-written"
        name: "LDAP_connection_handler_bytes_written"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-messages-read"
        name: "LDAP_connection_handler_messages_read"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-messages-written"
        name: "LDAP_connection_handler_messages_written"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-search-requests"
        name: "LDAP_connection_handler_search_requests"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-search-entries-returned"
        name: "LDAP_connection_handler_search_entries_returned"
        labels:
          port: "$4"
        # backend metrics
      - match: "*.backend-entry-count"
        name: "backend_entry_count"
        labels:
          backendID: "$1"
      - match: "*.backend-db-cache-percent-full"
        name: "backend_db_cache_percent_full"
        labels:
          backendID: "$1"
      - match: "*.backend-size-on-disk"
        name: "backend_size_on_disk"
        labels:
          backendID: "$1"
      - match: "*.backend-active-cleaner-threads"
        name: "backend_active_cleaner_threads"
        labels:
          backendID: "$1"
      - match: "*.backend-cleaner-backlog"
        name: "backend_cleaner_backlog"
        labels:
          backendID: "$1"
      - match: "*.backend-nodes-evicted"
        name: "backend_nodes_evicted"
        labels:
          backendID: "$1"
      - match: "*.backend-checkpoints"
        name: "backend_checkpoints"
        labels:
          backendID: "$1"
      - match: "*.backend-avg-checkpoint-duration"
        name: "backend_avg_checkpoint_duration"
        labels:
          backendID: "$1"
      - match: "*.backend-time-since-last-checkpoint"
        name: "backend_time_since_last_checkpoint"
        labels:
          backendID: "$1"
      - match: "*.backend-new-db-logs"
        name: "backend_new_db_logs"
        labels:
          backendID: "$1"
      - match: "*.backend-random-reads"
        name: "backend_random_reads"
        labels:
          backendID: "$1"
      - match: "*.backend-random-writes"
        name: "backend_random_writes"
        labels:
          backendID: "$1"
      - match: "*.backend-sequential-reads"
        name: "backend_sequential_reads"
        labels:
          backendID: "$1"
      - match: "*.backend-sequential-writes"
        name: "backend_sequential_writes"
        labels:
          backendID: "$1"
        # entry cache metrics
      - match: "*.entry-cache-hit-ratio"
        name: "entry_cache_hit_ratio"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-hit-count"
        name: "entry_cache_hit_count"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-attempts"
        name: "entry_cache_attempts"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-add-or-update"
        name: "entry_cache_add_or_update"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-size"
        name: "entry_cache_size"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-pct-full"
        name: "entry_cache_pct_full"
        labels:
          entryCache: "$1"
        # changelog metrics?
      - match: "changelog.*"
        name: "$1"
        lables:
          backendID: "changelog"
        # GC metrics
      - match: "*.*.*.garbage-collections"
        name: "garbage_collections"
        labels:
          gcType: "$1"
          size: "$2"
          cause: "$3"
      - match: "*.*.*.garbage-collection-duration"
        name: "garbage_collection_duration"
        labels:
          gcType: "$1"
          size: "$2"
          cause: "$3"
      - match: "*.garbage-collection-live-mbytes"
        name: "garbage_collection_live_megabytes"
        labels:
          region: "$1"
