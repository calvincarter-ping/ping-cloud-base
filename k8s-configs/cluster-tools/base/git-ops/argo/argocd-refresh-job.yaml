apiVersion: batch/v1
kind: Job
metadata:
  name: argocd-presync-refresh
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  backoffLimit: 2
  template:
    spec:
      containers:
      - name: argocd-presync-refresh
        image: public.ecr.aws/r2h3l6e4/awscli-kubectl:latest
        command:
        - /bin/bash
        - -c
        args:
        - |
          argo_server_pod=$(kubectl get pod -n argocd -l app.kubernetes.io/name=argocd-server | grep argocd-server | cut -d " " -f 1)
          if [ -z "$argo_server_pod" ];then echo "argocd-server pod isn't running" && exit 0; fi
          kubectl exec -n argocd "$argo_server_pod" -c argocd-server -- bash -c "argocd login localhost:8080 --username admin --password admin --insecure && 
          argocd app list -o name | xargs -I {} argocd app diff {} --hard-refresh"
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: false
      restartPolicy: OnFailure
      serviceAccountName: argocd-presync-refresh
      terminationGracePeriodSeconds: 30

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: argocd
  name: argocd-presync-refresh
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-presync-refresh
  namespace: argocd
subjects:
# You can specify more than one "subject"
- kind: ServiceAccount
  name: argocd-presync-refresh # "name" is case sensitive
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: argocd-presync-refresh # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io

--- 

apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-presync-refresh
automountServiceAccountToken: false