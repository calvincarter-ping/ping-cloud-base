---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: get-core-dns-endpoints
  namespace: kube-system
data:
  get_core_dns_endpoints.sh: |-
    #!/bin/sh

    IPFILE="/config/core-dns-endpoints"
    RECORDSET="core-dns-endpoints.${TENANT_DOMAIN}"

    echo "NO UPDATE"> $IPFILE
   
    # Install kubectl
    echo "Installing kubectl"
    curl https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl

    chmod +x /usr/local/bin/kubectl


    CURRENT_ENDPOINT=$(kubectl get endpoints  -n kube-system kube-dns  -o jsonpath='{.subsets[*].addresses[*].ip}')

    echo "CURRENT_ENDPOINT: $CURRENT_ENDPOINT"
    RECORDSET_ENDPOINT=$(nslookup -type=txt $RECORDSET | grep $RECORDSET | cut -d= -f2 | tr -d '"')

    echo "RECORDSET_ENDPOINT: $RECORDSET_ENDPOINT"
    for IP in $CURRENT_ENDPOINT
    do
        if ! echo "$RECORDSET_ENDPOINT" | grep -q $IP; then
          echo $CURRENT_ENDPOINT> $IPFILE
        fi
    done

    cat $IPFILE
    
    echo "Config file successfully updated"
    exit 0

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: put-core-dns-endpoints
  namespace: kube-system
data:
  put_core_dns_endpoints.py: |-
    import sys
    import os
    import boto3

    r53_client = boto3.client('route53')

    def get_hosted_zone_id(domain_name):
        """
        Get route 53 hosted zone id.
        """
        response = r53_client.list_hosted_zones()
        hosted_zones = response['HostedZones']
        for zones in hosted_zones:
            if zones['Name'].rstrip('.') == domain_name.rstrip('.'):
                return zones['Id'].rstrip('.')

    def update_resource_record_sets(
        zone_id, action, rrs_name, rrs_type, rrs_ttl, rrs_records
    ):
        """
        Update route 53 hosted zone resource record sets.
        """
        return r53_client.change_resource_record_sets(
            HostedZoneId=zone_id,
            ChangeBatch={
                'Changes': [
                    {
                        'Action': action,
                        'ResourceRecordSet': {
                            'Name': rrs_name,
                            'Type': rrs_type,
                            'TTL': rrs_ttl,
                            'ResourceRecords': [{'Value': f"\"{rrs_records}\""}],
                        },
                    }
                ]
            },
        )

    def main():
        """ Check endpoint config file and update Route53 """

        domain_name = os.environ.get('TENANT_DOMAIN', 'suraj.ping-demo.com.')

        try:
            with open('/config/core-dns-endpoints') as endpoint_file:
                    endpoints = endpoint_file.read().strip()
            print(f"Endpoints: {endpoints}")
            if endpoints and endpoints != 'NO UPDATE':
                    zone_id = get_hosted_zone_id(domain_name)
                    if zone_id:
                      print(f"Updating core-dns-endpoints.{domain_name} to point to {endpoints}")
                      update_resource_record_sets(zone_id, 'UPSERT', f"core-dns-endpoints.{domain_name}", 'TXT', 60, endpoints)
                    else:
                      print(f"Unable to find Hosted Zone Id for domain {domain_name}, aborting")
                      sys.exit(1)
            else:
                print(f"No update found in config file: {endpoints}, skipping")
        except FileNotFoundError:
            print('Unable to find core-dns-endpoints in /confg dir, aborting')
            sys.exit(1)
        except Exception as error:
            print(f'Error: {error}')
            sys.exit(1)
        
        print('Execution completed successfully.')

    if __name__ == '__main__':
        main()

---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: get-multi-region-domains
  namespace: kube-system
data:
  get_multi_region_domains.py: |-
    import sys
    import os
    import dns.resolver


    def get_dns_txt_value(domain_name):
        return dns.resolver.query(domain_name,"TXT").response.answer[0][-1].strings[0]

    def main():
        hostname_ip = {}
        domain_name = f"multi-region-domains.{os.environ.get('TENANT_DOMAIN', 'suraj.ping-demo.com.')}"
        
        try:
            # Get list of multi region dns name.
            tenant_names = str(get_dns_txt_value(domain_name)).split("\'")[1]

            for tenant_name in tenant_names.split():
                endpoints = get_dns_txt_value(f"core-dns-endpoints.{tenant_name.rstrip('.')}")
                if endpoints:
                    hostname_ip[tenant_name] = endpoints
                
        except Exception as error:
            print(f'Error: {error}')
            sys.exit(1)

        # TODO: Convert dic to core-dns configmap 
        print(hostname_ip)

        print('Execution completed successfully.')

    if __name__ == '__main__':
        main()

