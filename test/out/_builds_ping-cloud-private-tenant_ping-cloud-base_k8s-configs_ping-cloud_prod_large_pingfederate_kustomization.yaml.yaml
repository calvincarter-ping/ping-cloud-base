allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: ping-cloud
  name: pgo-gp3
mountOptions:
- discard
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: gp3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-gp3
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: gp3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: pingcloud-radsecproxy-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-ping-role
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ping-role
subjects:
- kind: ServiceAccount
  name: pingfederate-admin-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: radsecproxy-ping-role
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ping-role
subjects:
- kind: ServiceAccount
  name: pingcloud-radsecproxy-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-cluster-secrets-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-secrets-reader
subjects:
- kind: ServiceAccount
  name: pingfederate-admin-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: ping-cloud
  name: radsecproxy-cluster-secrets-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-secrets-reader
subjects:
- kind: ServiceAccount
  name: pingcloud-radsecproxy-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
data:
  config.yml: |-
    ---
    metrics:
    - name: metric_pingfederate_idp_session_registry_session_map_size
      path: '{.idp\.session\.registry\.session\.map\.size}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_concurrency_statistics_90_percentile
      path: '{.response\.concurrency\.statistics\.90\.percentile}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_statistics_count
      path: '{.response\.statistics\.count}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_time_statistics_90_percentile
      path: '{.response\.time\.statistics\.90\.percentile}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_session_state_attribute_map_size
      path: '{.session\.state\.attribute\.map\.size}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_sp_session_registry_session_map_size
      path: '{.sp\.session\.registry\.session\.map\.size}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_total_failed_transactions
      path: '{.total\.failed\.transactions}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_total_transactions
      path: '{.total\.transactions}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_concurrency_statistics_mean
      path: '{.response\.concurrency\.statistics\.mean}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_time_statistics_mean
      path: '{.response\.time\.statistics\.mean}'
      labels:
        environment: pingfederate
        source: heartbeat
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pf-exporter-config
  namespace: ping-cloud
---
apiVersion: v1
data:
  GRP_CA_FILE: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  GRP_CERT_FILE: /usr/local/secrets/certs/tls.crt
  GRP_KEY_FILE: /usr/local/secrets/certs/tls.key
  GRP_PORT: "2083"
  GRP_RADIUS_ACCT_PORT: "1813"
  GRP_RADIUS_PORT: "1812"
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingcloud-radsecproxy-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  JAVA_AGENT_OPTS: -javaagent:/opt/staging/jmx_prometheus_javaagent-0.14.0.jar=8080:/opt/in/instance/bin/jmx_export_config.yaml
  K8S_DEPLOYMENT_NAME_PINGFEDERATE_ADMIN: pingfederate-admin
  K8S_SERVICE_NAME_PINGFEDERATE_ADMIN: pingfederate-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/jvm-garbage-collection.log /opt/out/instance/log/server.log
    /opt/out/instance/log/init.log /opt/out/instance/log/admin.log /opt/out/instance/log/admin-event-detail.log
    /opt/out/instance/log/admin-api.log /opt/out/instance/log/runtime-api.log /opt/out/instance/log/transaction.log
    /opt/out/instance/log/audit.log /opt/out/instance/log/provisioner-audit.log /opt/out/instance/log/provisioner.log
    /opt/out/instance/log/request.log /opt/out/instance/log/request2.log
  LDAP_PORT: "1389"
  LDAPS_PORT: "1636"
  ORCHESTRATION_TYPE: kubernetes
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_ADMIN_CONSOLE_ENVIRONMENT: dev-us-west-2
  PF_ADMIN_CONSOLE_TITLE: Advanced SSO
  PF_ADMIN_PORT: "9999"
  PF_ADMIN_PUBLIC_HOSTNAME: ""
  PF_ADMIN_USER_USERNAME: administrator
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PF_CONSOLE_AUTHENTICATION: LDAP
  PF_DNS_PING_CLUSTER: pingfederate-cluster
  PF_DNS_PING_NAMESPACE: placeholder
  PF_LOG_LEVEL: INFO
  PF_MAX_HEAP: 512m
  PF_MAX_YGEN: 256m
  PF_MIN_HEAP: 256m
  PF_MIN_YGEN: 128m
  PF_PD_BIND_PORT: "1389"
  PF_PD_BIND_PROTOCOL: ldap
  PF_PD_BIND_USESSL: "false"
  PF_PROVISIONER_GRACE_PERIOD: "600"
  PF_PROVISIONER_SYNC_FREQ: "60"
  PING_IDENTITY_ACCEPT_EULA: "YES"
  PINGFEDERATE_ADMIN_SERVER: pingfederate-admin
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingfederate
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  SOCKET_HOST: logstash-elastic.elastic-stack-logging.svc.cluster.local
  SOCKET_PORT_AUDIT: "20514"
  SOCKET_PORT_PROVISIONER: "20512"
  SOCKET_PORT_SYSTEM: "20513"
  SOCKET_PROTOCOL: TCP
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  backup-archive-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl

    chmod +x /tmp/kubectl

    UPLOAD_FILES=
    SERVER=$(/tmp/kubectl get pod -l role=${K8S_DEPLOYMENT_NAME_PINGFEDERATE_ADMIN} | sed -n "/${K8S_DEPLOYMENT_NAME_PINGFEDERATE_ADMIN}/p" | awk '{print $1}')
    SCRIPT="${HOOKS_DIR}"/90-upload-backup-s3.sh
    LOG_FILE=/tmp/upload.log

    echo "Uploading pingfederate backup data on server ${SERVER}"
    /tmp/kubectl exec "${SERVER}" -c pingfederate-admin -- sh -c "test -x ${SCRIPT} && ${SCRIPT}" >"${LOG_FILE}"

    if test ${?} -eq 0; then
      # Sending logs to STDOUT
      cat ${LOG_FILE}
      UPLOAD_FILE=$(tail -1 "${LOG_FILE}")
      test -z "${UPLOAD_FILES}" && UPLOAD_FILES="${UPLOAD_FILE}" || UPLOAD_FILES="${UPLOAD_FILES} ${UPLOAD_FILE}"
    else
      echo "Upload script not found on server ${SERVER}"
    fi

    # Print the names of the uploaded files so callers know exactly what was uploaded
    echo "The following files were uploaded:"
    echo "${UPLOAD_FILES}"
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-backup
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  JAVA_AGENT_OPTS: -javaagent:/opt/staging/jmx_prometheus_javaagent-0.14.0.jar=8080:/opt/in/instance/bin/jmx_export_config.yaml
  K8S_DEPLOYMENT_NAME_PINGFEDERATE_ADMIN: pingfederate-admin
  K8S_SERVICE_NAME_PINGFEDERATE_ADMIN: pingfederate-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/jvm-garbage-collection.log /opt/out/instance/log/server.log
    /opt/out/instance/log/init.log /opt/out/instance/log/admin.log /opt/out/instance/log/admin-event-detail.log
    /opt/out/instance/log/admin-api.log /opt/out/instance/log/runtime-api.log /opt/out/instance/log/transaction.log
    /opt/out/instance/log/audit.log /opt/out/instance/log/provisioner-audit.log /opt/out/instance/log/provisioner.log
    /opt/out/instance/log/request.log /opt/out/instance/log/request2.log
  LDAP_PORT: "1389"
  LDAPS_PORT: "1636"
  ORCHESTRATION_TYPE: kubernetes
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_ADMIN_CONSOLE_ENVIRONMENT: dev-us-west-2
  PF_ADMIN_CONSOLE_TITLE: Advanced SSO
  PF_ADMIN_PORT: "9999"
  PF_ADMIN_PUBLIC_HOSTNAME: ""
  PF_ADMIN_USER_USERNAME: administrator
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PF_CONSOLE_AUTHENTICATION: LDAP
  PF_DNS_PING_CLUSTER: pingfederate-cluster
  PF_DNS_PING_NAMESPACE: placeholder
  PF_LOG_LEVEL: INFO
  PF_MAX_HEAP: 512m
  PF_MAX_YGEN: 256m
  PF_MIN_HEAP: 256m
  PF_MIN_YGEN: 128m
  PF_PD_BIND_PORT: "1389"
  PF_PD_BIND_PROTOCOL: ldap
  PF_PD_BIND_USESSL: "false"
  PF_PROVISIONER_GRACE_PERIOD: "600"
  PF_PROVISIONER_SYNC_FREQ: "60"
  PING_IDENTITY_ACCEPT_EULA: "YES"
  PINGFEDERATE_ADMIN_SERVER: pingfederate-admin
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingfederate
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  SOCKET_HOST: logstash-elastic.elastic-stack-logging.svc.cluster.local
  SOCKET_PORT_AUDIT: "20514"
  SOCKET_PORT_PROVISIONER: "20512"
  SOCKET_PORT_SYSTEM: "20513"
  SOCKET_PROTOCOL: TCP
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  backup-csd-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl

    chmod +x /tmp/kubectl

    REPLICAS=$(/tmp/kubectl get pods -l=role="${CSD_POD_ROLE}" -o name)

    CSD_FILES=
    for REPLICA in ${REPLICAS}; do
      SERVER=${REPLICA}
      SCRIPT="${HOOKS_DIR}"/82-upload-csd-s3.sh
      LOG_FILE=/tmp/upload.log

      echo "Uploading CSD on server ${SERVER}"
      /tmp/kubectl exec "${SERVER}" -c "${CSD_CONTAINER_NAME}" -- sh -c "test -x ${SCRIPT} && ${SCRIPT}" >"${LOG_FILE}"

      # Sending logs to STDOUT
      cat ${LOG_FILE}

      if test ${?} -eq 0; then
        CSD_FILE=$(tail -1 "${LOG_FILE}")
        test -z "${CSD_FILES}" && CSD_FILES="${CSD_FILE}" || CSD_FILES="${CSD_FILES} ${CSD_FILE}"

        # Print the names of the uploaded files so callers know exactly what was uploaded
        echo "The following files were uploaded:"
        echo "${CSD_FILES}"
      else
        exit_code=${?}
        echo "The kubectl command attempting to invoke the script exited with: ${exit_code}"
        echo "This may be because: "
        echo "1) The ${SCRIPT} script is not currently available on the ${SERVER}.  This is expected if ${SERVER} is not running yet."
        echo "2) The ${SCRIPT} script exited with an error.  Please review the logs above to determine if this is the case."
      fi
    done
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-periodic-csd-upload
  namespace: ping-cloud
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingfederate-license
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingfederate-passwords
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
  name: pingfederate
  namespace: ping-cloud
spec:
  ports:
  - name: radsec
    port: 2083
    targetPort: 2083
  - name: pingfederate-runtime
    port: 9031
  - name: metrics
    port: 8080
  - name: pf-heartbeat
    port: 8079
  - name: pf-radius-listener
    port: 1812
  - name: pf-radius-accounting
    port: 1813
  selector:
    app: ping-cloud
    role: pingfederate-engine
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
    role: pingfederate-admin
  name: pingfederate-admin
  namespace: ping-cloud
spec:
  ports:
  - name: pf-admin
    port: 9999
    targetPort: pf-admin
  selector:
    app: ping-cloud
    role: pingfederate-admin
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingfederate-cluster-dev.ping-demo.com
  labels:
    app: ping-cloud
  name: pingfederate-cluster
  namespace: ping-cloud
spec:
  clusterIP: None
  ports:
  - name: pingfederate-cluster-bind
    port: 7600
    protocol: TCP
    targetPort: 7600
  - name: pingfederate-cluster-health
    port: 7700
    protocol: TCP
    targetPort: 7700
  publishNotReadyAddresses: true
  selector:
    app: ping-cloud
    cluster: pingfederate-cluster
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingfederate-radius-dev.ping-demo.com
    service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  labels:
    app: ping-cloud
  name: udp-loadbalancer
  namespace: ping-cloud
spec:
  externalTrafficPolicy: Local
  ports:
  - name: radius-listener
    port: 1812
    protocol: UDP
    targetPort: 1812
  - name: radius-accounting
    port: 1813
    protocol: UDP
    targetPort: 1813
  selector:
    app: ping-cloud
    role: pingfederate-engine
  type: LoadBalancer
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingfederate-cluster
    role: pingfederate-engine
  name: pingfederate
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: ping-cloud
      role: pingfederate-engine
  serviceName: pingfederate
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingfederate-cluster
        pod-reaper: enabled
        role: pingfederate-engine
      name: pingfederate-engine
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values:
                  - pingfederate-engine
              topologyKey: topology.kubernetes.io/zone
            weight: 1
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_ENGINE
        - name: AUTHENTICATION_MODE
          value: none
        - name: PF_DNS_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_LDAP_PASSWORD
              name: pingcommon-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingfederate/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - sleep 5
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pf-engine-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingfederate
        ports:
        - containerPort: 9031
        - containerPort: 8080
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pf-engine-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 2
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/staging/native-s3-ping.jar
          name: data-dir
          subPath: native-s3-ping.jar
        - mountPath: /opt/in/instance/server/default/conf/pingfederate.lic
          name: pingfederate-license
          subPath: pingfederate.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /etc/podinfo
          name: podinfo
        - mountPath: /opt/staging/solutions_artifacts
          name: data-dir
          subPath: solutions_artifacts
      - env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: pingcloud-radsecproxy-environment-variables
        - configMapRef:
            name: pingfederate-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/grp-radiusproxy/dev:v1.19-release-branch-latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 2083
          timeoutSeconds: 3
        name: pingcloud-radsecproxy
        ports:
        - containerPort: 2083
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 2083
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 400m
            memory: 500Mi
          requests:
            cpu: 200m
            memory: 200Mi
        volumeMounts:
        - mountPath: /usr/local/secrets/certs
          name: acme-tls-cert
          readOnly: true
      - env:
        - name: SERVICE_SHORTNAME
          value: pf
        - name: SERVICE_PORT
          value: "9031"
        - name: REPEAT_SEC
          value: "10"
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/prometheus-json-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingfederate-heartbeat-exporter
        ports:
        - containerPort: 8079
          name: pf-heartbeat
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/config.yml
          name: pf-exporter-config
          subPath: config.yml
      initContainers:
      - command:
        - /wait-for-services.sh
        env:
        - name: WAIT_FOR_SERVICES
          value: pingfederate-cluster pingdirectory
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingfederate-init
          subPath: wait-for-services.sh
      - command:
        - /get_ssm_env_vars.sh
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/amazon/aws-cli:2.0.17
        imagePullPolicy: IfNotPresent
        name: pingfederate-discovery-service
        volumeMounts:
        - mountPath: /config
          name: data-dir
        - mountPath: /get_ssm_env_vars.sh
          name: discovery-service
          subPath: get_ssm_env_vars.sh
      - args:
        - while ! kubectl get secret $(SECRET_NAME); do echo "Waiting for secret $(SECRET_NAME).
          CTRL-C to exit."; sleep 5; done
        command:
        - /bin/sh
        - -c
        env:
        - name: WAIT_TIMEOUT_SEC
          value: "300"
        - name: JOB_NAME
          value: wait-for-tls-secret
        - name: SECRET_NAME
          value: acme-tls-cert
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        name: wait-for-tls-secret
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
      - command:
        - python3
        - -u
        - /app/pingfederate_p1_init.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingfederate-p14c-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/staging
          name: data-dir
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingfederate-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingfederate-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingfederate
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      securityContext:
        fsGroup: 9999
      serviceAccountName: pingcloud-radsecproxy-serviceaccount
      volumes:
      - configMap:
          defaultMode: 365
          name: discovery-service
        name: discovery-service
      - name: acme-tls-cert
        secret:
          defaultMode: 256
          optional: true
          secretName: acme-tls-cert
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
          - fieldRef:
              fieldPath: metadata.annotations
            path: annotations
          - path: cpu_limit
            resourceFieldRef:
              containerName: pingfederate
              divisor: 1m
              resource: limits.cpu
          - path: cpu_request
            resourceFieldRef:
              containerName: pingfederate
              divisor: 1m
              resource: requests.cpu
        name: podinfo
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingfederate-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: pingfederate-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingfederate-license
      - configMap:
          defaultMode: 420
          name: pf-exporter-config
        name: pf-exporter-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingfederate-cluster
    role: pingfederate-admin
  name: pingfederate-admin
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: ping-cloud
      role: pingfederate-admin
  serviceName: pingfederate-admin
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingfederate-cluster
        entitled-app: "true"
        pod-reaper: enabled
        role: pingfederate-admin
      name: pingfederate-admin
    spec:
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: PF_DNS_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_LDAP_PASSWORD
              name: pingcommon-passwords
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PC_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PC_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PA_ADMIN_USER_USERNAME
          valueFrom:
            configMapKeyRef:
              key: PA_ADMIN_USER_USERNAME
              name: pingaccess-admin-environment-variables
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-passwords
        - name: DA_OAUTH_TOKEN_VALIDATOR_SECRET
          valueFrom:
            secretKeyRef:
              key: DA_OAUTH_TOKEN_VALIDATOR_SECRET
              name: pingcommon-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingfederate/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pf-admin-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingfederate-admin
        ports:
        - containerPort: 9999
          name: pf-admin
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/85-pf-admin-readiness.sh
          failureThreshold: 3
          initialDelaySeconds: 90
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 2
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/staging/native-s3-ping.jar
          name: data-dir
          subPath: native-s3-ping.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /opt/in/instance/server/default/conf/pingfederate.lic
          name: pingfederate-license
          subPath: pingfederate.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /opt/staging/p14c_env_vars
          name: data-dir
          subPath: p14c_env_vars
        - mountPath: /opt/staging/solutions_artifacts
          name: data-dir
          subPath: solutions_artifacts
        - mountPath: /etc/podinfo
          name: podinfo
      initContainers:
      - command:
        - /wait-for-services.sh
        env:
        - name: WAIT_FOR_SERVICES
          value: pingdirectory
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingfederate-init
          subPath: wait-for-services.sh
      - command:
        - /get_ssm_env_vars.sh
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/amazon/aws-cli:2.0.17
        imagePullPolicy: IfNotPresent
        name: pingfederate-discovery-service
        volumeMounts:
        - mountPath: /config
          name: data-dir
        - mountPath: /get_ssm_env_vars.sh
          name: discovery-service
          subPath: get_ssm_env_vars.sh
      - command:
        - python3
        - -u
        - /app/pingfederate_p1_init.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingfederate-p14c-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/staging
          name: data-dir
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingfederate-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingfederate-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingfederate-admin
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      securityContext:
        fsGroup: 9999
      serviceAccountName: pingfederate-admin-serviceaccount
      volumes:
      - configMap:
          defaultMode: 365
          name: discovery-service
        name: discovery-service
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
          - fieldRef:
              fieldPath: metadata.annotations
            path: annotations
          - path: cpu_limit
            resourceFieldRef:
              containerName: pingfederate-admin
              divisor: 1m
              resource: limits.cpu
          - path: cpu_request
            resourceFieldRef:
              containerName: pingfederate-admin
              divisor: 1m
              resource: requests.cpu
        name: podinfo
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingfederate-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingfederate-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingfederate-license
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: ping-cloud
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: pingfederate-gp3
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-periodic-backup
  namespace: ping-cloud
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      labels:
        app: ping-cloud
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app: ping-cloud
        spec:
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: statefulset.kubernetes.io/pod-name
                    operator: In
                    values:
                    - pingfederate-admin-0
                topologyKey: kubernetes.io/hostname
          containers:
          - command:
            - /opt/in/backup-archive-data.sh
            env:
            - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
              value: "true"
            envFrom:
            - configMapRef:
                name: pingfederate-admin-environment-variables
            - configMapRef:
                name: pingcommon-environment-variables
            image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingfederate/dev:v1.19-release-branch-latest
            imagePullPolicy: Always
            name: pingfederate-backup
            securityContext:
              allowPrivilegeEscalation: false
              runAsGroup: 9999
              runAsNonRoot: true
              runAsUser: 9031
            volumeMounts:
            - mountPath: /opt/in/backup-archive-data.sh
              name: pingfederate-backup
              subPath: backup-archive-data.sh
          restartPolicy: OnFailure
          serviceAccount: ping-serviceaccount
          volumes:
          - configMap:
              defaultMode: 365
              name: pingfederate-backup
            name: pingfederate-backup
  schedule: 30 * * * *
  startingDeadlineSeconds: 90
  successfulJobsHistoryLimit: 0
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: ping-cloud
  name: pf-engine-pdb
  namespace: ping-cloud
spec:
  minAvailable: 30%
  selector:
    matchLabels:
      app: ping-cloud
      role: pingfederate-engine
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: ping-cloud
  name: pingfederate
  namespace: ping-cloud
spec:
  maxReplicas: 16
  minReplicas: 6
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: pingfederate
  targetCPUUtilizationPercentage: 70
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingfederate-admin-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-private
  rules:
  - host: pingfederate-admin-api-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingfederate-admin
            port:
              name: pf-admin
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingfederate-admin-api-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingfederate-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: pingfederate-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingfederate
            port:
              number: 9031
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingfederate-dev.ping-demo.com
---
apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
  labels:
    app: ping-cloud
  name: pf-provisioning
  namespace: postgres-operator
spec:
  backups:
    pgbackrest:
      global:
        repo1-path: /pingfederate/provisioning
        repo1-retention-full: "256"
      image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/crunchydata/crunchy-pgbackrest:ubi8-2.41-4
      jobs:
        ttlSecondsAfterFinished: 60
      manual:
        options:
        - --type=full
        repoName: repo1
      repos:
      - name: repo1
      restore:
        enabled: true
        options:
        - --type=default
        repoName: repo1
  image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/crunchydata/crunchy-postgres:ubi8-14.7-0
  instances:
  - affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - pf-provisioning
            topologyKey: topology.kubernetes.io/zone
          weight: 1
    dataVolumeClaimSpec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: pgo-gp3
    minAvailable: 1
    name: instance1
    replicas: 3
    resources:
      limits:
        cpu: 2
        memory: 4Gi
      requests:
        cpu: 2
        memory: 2Gi
  metadata:
    labels:
      role: pf-provisioning
  monitoring:
    pgmonitor:
      exporter:
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/crunchydata/crunchy-postgres-exporter:ubi8-5.3.1-0
  postgresVersion: 14
  users:
  - databases:
    - pf-provisioning
    name: pf-service
  - databases:
    - pf-provisioning
    name: ping-beluga-ops
    options: SUPERUSER
