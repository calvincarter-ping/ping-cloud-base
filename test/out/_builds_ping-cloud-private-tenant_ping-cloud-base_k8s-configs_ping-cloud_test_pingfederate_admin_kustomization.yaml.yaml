allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-gp3
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: gp3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-ping-role
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ping-role
subjects:
- kind: ServiceAccount
  name: pingfederate-admin-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-cluster-secrets-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-secrets-reader
subjects:
- kind: ServiceAccount
  name: pingfederate-admin-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
data:
  backup-archive-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl

    chmod +x /tmp/kubectl

    UPLOAD_FILES=
    SERVER=$(/tmp/kubectl get pod -l role=${K8S_DEPLOYMENT_NAME_PINGFEDERATE_ADMIN} | sed -n "/${K8S_DEPLOYMENT_NAME_PINGFEDERATE_ADMIN}/p" | awk '{print $1}')
    SCRIPT="${HOOKS_DIR}"/90-upload-backup-s3.sh
    LOG_FILE=/tmp/upload.log

    echo "Uploading pingfederate backup data on server ${SERVER}"
    /tmp/kubectl exec "${SERVER}" -c pingfederate-admin -- sh -c "test -x ${SCRIPT} && ${SCRIPT}" >"${LOG_FILE}"

    if test ${?} -eq 0; then
      # Sending logs to STDOUT
      cat ${LOG_FILE}
      UPLOAD_FILE=$(tail -1 "${LOG_FILE}")
      test -z "${UPLOAD_FILES}" && UPLOAD_FILES="${UPLOAD_FILE}" || UPLOAD_FILES="${UPLOAD_FILES} ${UPLOAD_FILE}"
    else
      echo "Upload script not found on server ${SERVER}"
    fi

    # Print the names of the uploaded files so callers know exactly what was uploaded
    echo "The following files were uploaded:"
    echo "${UPLOAD_FILES}"
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-backup
  namespace: ping-cloud
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
    role: pingfederate-admin
  name: pingfederate-admin
  namespace: ping-cloud
spec:
  ports:
  - name: pf-admin
    port: 9999
    targetPort: pf-admin
  selector:
    app: ping-cloud
    role: pingfederate-admin
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingfederate-cluster-dev.ping-demo.com
  labels:
    app: ping-cloud
  name: pingfederate-cluster
  namespace: ping-cloud
spec:
  clusterIP: None
  ports:
  - name: pingfederate-cluster-bind
    port: 7600
    protocol: TCP
    targetPort: 7600
  - name: pingfederate-cluster-health
    port: 7700
    protocol: TCP
    targetPort: 7700
  publishNotReadyAddresses: true
  selector:
    app: ping-cloud
    cluster: pingfederate-cluster
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingfederate-cluster
    role: pingfederate-admin
  name: pingfederate-admin
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: ping-cloud
      role: pingfederate-admin
  serviceName: pingfederate-admin
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingfederate-cluster
        entitled-app: "true"
        pod-reaper: enabled
        role: pingfederate-admin
      name: pingfederate-admin
    spec:
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: PF_DNS_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_LDAP_PASSWORD
              name: pingcommon-passwords
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PC_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PC_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PA_ADMIN_USER_USERNAME
          valueFrom:
            configMapKeyRef:
              key: PA_ADMIN_USER_USERNAME
              name: pingaccess-admin-environment-variables
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-passwords
        - name: DA_OAUTH_TOKEN_VALIDATOR_SECRET
          valueFrom:
            secretKeyRef:
              key: DA_OAUTH_TOKEN_VALIDATOR_SECRET
              name: pingcommon-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingfederate/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pf-admin-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingfederate-admin
        ports:
        - containerPort: 9999
          name: pf-admin
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/85-pf-admin-readiness.sh
          failureThreshold: 3
          initialDelaySeconds: 90
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/staging/native-s3-ping.jar
          name: data-dir
          subPath: native-s3-ping.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /opt/in/instance/server/default/conf/pingfederate.lic
          name: pingfederate-license
          subPath: pingfederate.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /opt/staging/p14c_env_vars
          name: data-dir
          subPath: p14c_env_vars
        - mountPath: /opt/staging/solutions_artifacts
          name: data-dir
          subPath: solutions_artifacts
        - mountPath: /etc/podinfo
          name: podinfo
      initContainers:
      - command:
        - /wait-for-services.sh
        env:
        - name: WAIT_FOR_SERVICES
          value: pingdirectory
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingfederate-init
          subPath: wait-for-services.sh
      - command:
        - /get_ssm_env_vars.sh
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/amazon/aws-cli:2.0.17
        imagePullPolicy: IfNotPresent
        name: pingfederate-discovery-service
        volumeMounts:
        - mountPath: /config
          name: data-dir
        - mountPath: /get_ssm_env_vars.sh
          name: discovery-service
          subPath: get_ssm_env_vars.sh
      - command:
        - python3
        - -u
        - /app/pingfederate_p1_init.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingfederate-p14c-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/staging
          name: data-dir
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingfederate-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingfederate-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingfederate-admin
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      securityContext:
        fsGroup: 9999
      serviceAccountName: pingfederate-admin-serviceaccount
      volumes:
      - configMap:
          defaultMode: 365
          name: discovery-service
        name: discovery-service
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
          - fieldRef:
              fieldPath: metadata.annotations
            path: annotations
          - path: cpu_limit
            resourceFieldRef:
              containerName: pingfederate-admin
              divisor: 1m
              resource: limits.cpu
          - path: cpu_request
            resourceFieldRef:
              containerName: pingfederate-admin
              divisor: 1m
              resource: requests.cpu
        name: podinfo
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingfederate-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingfederate-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingfederate-license
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: ping-cloud
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: pingfederate-gp3
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-periodic-backup
  namespace: ping-cloud
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      labels:
        app: ping-cloud
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app: ping-cloud
        spec:
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: statefulset.kubernetes.io/pod-name
                    operator: In
                    values:
                    - pingfederate-admin-0
                topologyKey: kubernetes.io/hostname
          containers:
          - command:
            - /opt/in/backup-archive-data.sh
            env:
            - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
              value: "true"
            envFrom:
            - configMapRef:
                name: pingfederate-admin-environment-variables
            - configMapRef:
                name: pingcommon-environment-variables
            image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingfederate/dev:v1.19-release-branch-latest
            imagePullPolicy: Always
            name: pingfederate-backup
            securityContext:
              allowPrivilegeEscalation: false
              runAsGroup: 9999
              runAsNonRoot: true
              runAsUser: 9031
            volumeMounts:
            - mountPath: /opt/in/backup-archive-data.sh
              name: pingfederate-backup
              subPath: backup-archive-data.sh
          restartPolicy: OnFailure
          serviceAccount: ping-serviceaccount
          volumes:
          - configMap:
              defaultMode: 365
              name: pingfederate-backup
            name: pingfederate-backup
  schedule: 30 * * * *
  startingDeadlineSeconds: 90
  successfulJobsHistoryLimit: 0
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingfederate-admin-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-private
  rules:
  - host: pingfederate-admin-api-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingfederate-admin
            port:
              name: pf-admin
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingfederate-admin-api-dev.ping-demo.com
