apiVersion: v1
kind: Namespace
metadata:
  name: argo-events
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: eventbus.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: EventBus
    listKind: EventBusList
    plural: eventbus
    shortNames:
    - eb
    singular: eventbus
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: eventsources.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: EventSource
    listKind: EventSourceList
    plural: eventsources
    shortNames:
    - es
    singular: eventsource
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: sensors.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: Sensor
    listKind: SensorList
    plural: sensors
    shortNames:
    - sn
    singular: sensor
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-events-sa
  namespace: argo-events
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: argo-events-aggregate-to-admin
rules:
- apiGroups:
  - argoproj.io
  resources:
  - sensors
  - sensors/finalizers
  - sensors/status
  - eventsources
  - eventsources/finalizers
  - eventsources/status
  - eventbus
  - eventbus/finalizers
  - eventbus/status
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: argo-events-aggregate-to-edit
rules:
- apiGroups:
  - argoproj.io
  resources:
  - sensors
  - sensors/finalizers
  - sensors/status
  - eventsources
  - eventsources/finalizers
  - eventsources/status
  - eventbus
  - eventbus/finalizers
  - eventbus/status
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: argo-events-aggregate-to-view
rules:
- apiGroups:
  - argoproj.io
  resources:
  - sensors
  - sensors/finalizers
  - sensors/status
  - eventsources
  - eventsources/finalizers
  - eventsources/status
  - eventbus
  - eventbus/finalizers
  - eventbus/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-events-role
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - sensors
  - sensors/finalizers
  - sensors/status
  - eventsources
  - eventsources/finalizers
  - eventsources/status
  - eventbus
  - eventbus/finalizers
  - eventbus/status
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - configmaps
  - secrets
  - services
  - persistentvolumeclaims
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  - statefulsets
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-events-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-events-role
subjects:
- kind: ServiceAccount
  name: argo-events-sa
  namespace: argo-events
---
apiVersion: v1
data:
  controller-config.yaml: |
    eventBus:
      nats:
        versions:
        - version: 0.22.1
          natsStreamingImage: nats-streaming:0.22.1
          metricsExporterImage: natsio/prometheus-nats-exporter:0.8.0
      jetstream:
        # Default JetStream settings, could be overridden by EventBus JetStream specs
        settings: |
          # https://docs.nats.io/running-a-nats-service/configuration#jetstream
          # Only configure "max_memory_store" or "max_file_store", do not set "store_dir" as it has been hardcoded.
          # e.g. 1G. -1 means no limit, up to 75% of available memory
          max_memory_store: -1
          # e.g. 20G. -1 means no limit, Up to 1TB if available
          max_file_store: 1TB
        streamConfig: |
          # The default properties of the streams to be created in this JetStream service
          maxMsgs: 50000
          maxAge: 168h
          maxBytes: -1
          replicas: 3
          duplicates: 300s
        versions:
        - version: latest
          natsImage: nats:2.8.1
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: /nats-server
        - version: 2.8.1
          natsImage: nats:2.8.1
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: /nats-server
        - version: 2.8.1-alpine
          natsImage: nats:2.8.1-alpine
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: nats-server
        - version: 2.8.2
          natsImage: nats:2.8.2
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: /nats-server
        - version: 2.8.2-alpine
          natsImage: nats:2.8.2-alpine
          metricsExporterImage: natsio/prometheus-nats-exporter:0.9.1
          configReloaderImage: natsio/nats-server-config-reloader:0.7.0
          startCommand: nats-server
kind: ConfigMap
metadata:
  name: argo-events-controller-config
  namespace: argo-events
---
apiVersion: v1
data:
  token: QkFTRTY0LUVOQ09ERUQtT0FVVEgtVE9LRU4=
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  name: slack-secret
  namespace: argo-events
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: argo-events
spec:
  replicas: 1
  selector:
    matchLabels:
      app: controller-manager
  template:
    metadata:
      labels:
        app: controller-manager
    spec:
      containers:
      - args:
        - controller
        env:
        - name: ARGO_EVENTS_IMAGE
          value: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/argo/argo-events:v1.7.2
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/argo/argo-events:v1.7.2
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        name: controller-manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        volumeMounts:
        - mountPath: /etc/argo-events
          name: controller-config-volume
      securityContext:
        runAsNonRoot: true
        runAsUser: 9731
      serviceAccountName: argo-events-sa
      volumes:
      - configMap:
          name: argo-events-controller-config
        name: controller-config-volume
---
apiVersion: argoproj.io/v1alpha1
kind: EventBus
metadata:
  name: default
  namespace: argo-events
spec:
  nats:
    native:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  controller: eventbus-controller
                  eventbus-name: default
              topologyKey: kubernetes.io/hostname
            weight: 100
      auth: token
      containerTemplate:
        resources:
          requests:
            cpu: 10m
      metricsContainerTemplate:
        resources:
          requests:
            cpu: 10m
      replicas: 3
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: webhook
  namespace: argo-events
spec:
  service:
    ports:
    - name: notification
      port: 12999
      targetPort: 12999
    - name: prometheus
      port: 13000
      targetPort: 13000
  webhook:
    notification:
      endpoint: /notification
      method: POST
      port: "12999"
    prometheus:
      endpoint: /notification
      method: POST
      port: "13000"
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: prom-webhook
  namespace: argo-events
spec:
  dependencies:
  - eventName: prometheus
    eventSourceName: webhook
    filters:
      data:
      - path: body.alerts.0.labels.notifications_enabled
        type: string
        value:
        - "true"
    name: trigger-slack
    transform:
      jq: 'if (.body.alerts[0].status == "firing") then .body.emoji = ":exclamation:"
        else .body.emoji = ":white_check_mark: " end'
  replicas: 2
  template:
    serviceAccountName: argo-events-sa
  triggers:
  - parameters:
    - dest: slack.message
      src:
        dataTemplate: |-
          *Status*: {{ .Input.body.emoji }}{{ (index .Input.body.alerts 0).status }}
          *Severity*: {{ (index .Input.body.alerts 0).labels.severity }}
          *Description*: {{ (index .Input.body.alerts 0).annotations.description }}
          *Summary*: {{ (index .Input.body.alerts 0).annotations.summary }}
          {{if (index .Input.body.alerts 0).annotations.runbook}}
          *Runbook*: {{ (index .Input.body.alerts 0).annotations.runbook }}
          {{end}}
          *Cluster*: {{ (index .Input.body.alerts 0).labels.k8s_cluster_name }}
        dependencyName: trigger-slack
    - dest: slack.channel
      src:
        dataKey: body.alerts.0.labels.slack_channel
        dependencyName: trigger-slack
    template:
      name: trigger-slack
      slack:
        channel: p1as-application-oncall
        message: this is default message from argo-events
        slackToken:
          key: token
          name: slack-secret
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook
  namespace: argo-events
spec:
  dependencies:
  - eventName: notification
    eventSourceName: webhook
    name: trigger-slack
  template:
    serviceAccountName: argo-events-sa
  triggers:
  - parameters:
    - dest: slack.channel
      src:
        dataKey: body.channel
        dependencyName: trigger-slack
    - dest: slack.message
      src:
        dataKey: body.message
        dependencyName: trigger-slack
    template:
      name: trigger-slack
      slack:
        channel: p1as-application-oncall
        message: this is default message from argo-events
        slackToken:
          key: token
          name: slack-secret
