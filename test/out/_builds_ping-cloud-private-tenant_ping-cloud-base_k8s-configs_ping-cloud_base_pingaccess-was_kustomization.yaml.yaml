allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was-gp3
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: gp3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  CONFIG_QUERY_KP_VALID_DAYS: "365"
  K8S_ACME_CERT_SECRET_NAME: acme-tls-cert
  K8S_SERVICE_NAME_PINGACCESS_WAS_ADMIN: pingaccess-was-admin
  K8S_STATEFUL_SET_NAME_PINGACCESS_WAS: pingaccess-was-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/pingaccess_engine_audit.log /opt/out/instance/log/pingaccess_api_audit.log
    /opt/out/instance/log/pingaccess_sideband_audit.log /opt/out/instance/log/pingaccess_sideband_client_audit.log
    /opt/out/instance/log/pingaccess.log /opt/out/instance/upgrade/log/upgrade.log
    /opt/out/instance/upgrade/log/audit.log /opt/out/instance/upgrade/log/upgrade_status.log
  ORCHESTRATION_TYPE: kubernetes
  PA_ADMIN_API_RATE_LIMIT: "5000"
  PA_ADMIN_API_RATE_LIMIT_POLICY: ""
  PA_ADMIN_APPLICATIONS: ""
  PA_ADMIN_PORT: "9000"
  PA_ADMIN_SERVER: pingaccess-was-admin
  PA_ADMIN_USER_USERNAME: Administrator
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_ENGINE_PORT: "3000"
  PA_GCOPTION: -XX:-UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40
    -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90
  PA_MAX_HEAP: 256m
  PA_MAX_YGEN: 128m
  PA_MIN_HEAP: 128m
  PA_MIN_YGEN: 128m
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PING_IDENTITY_ACCEPT_EULA: "YES"
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingaccess
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was-admin-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  CONFIG_QUERY_KP_VALID_DAYS: "365"
  K8S_ACME_CERT_SECRET_NAME: acme-tls-cert
  K8S_SERVICE_NAME_PINGACCESS_WAS_ADMIN: pingaccess-was-admin
  K8S_STATEFUL_SET_NAME_PINGACCESS_WAS: pingaccess-was-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/pingaccess_engine_audit.log /opt/out/instance/log/pingaccess_api_audit.log
    /opt/out/instance/log/pingaccess_sideband_audit.log /opt/out/instance/log/pingaccess_sideband_client_audit.log
    /opt/out/instance/log/pingaccess.log /opt/out/instance/upgrade/log/upgrade.log
    /opt/out/instance/upgrade/log/audit.log /opt/out/instance/upgrade/log/upgrade_status.log
  ORCHESTRATION_TYPE: kubernetes
  PA_ADMIN_API_RATE_LIMIT: "5000"
  PA_ADMIN_API_RATE_LIMIT_POLICY: ""
  PA_ADMIN_APPLICATIONS: ""
  PA_ADMIN_PORT: "9000"
  PA_ADMIN_SERVER: pingaccess-was-admin
  PA_ADMIN_USER_USERNAME: Administrator
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_ENGINE_PORT: "3000"
  PA_GCOPTION: -XX:-UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40
    -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90
  PA_MAX_HEAP: 256m
  PA_MAX_YGEN: 128m
  PA_MIN_HEAP: 128m
  PA_MIN_YGEN: 128m
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PING_IDENTITY_ACCEPT_EULA: "YES"
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingaccess
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  backup-csd-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl

    chmod +x /tmp/kubectl

    REPLICAS=$(/tmp/kubectl get pods -l=role="${CSD_POD_ROLE}" -o name)

    CSD_FILES=
    for REPLICA in ${REPLICAS}; do
      SERVER=${REPLICA}
      SCRIPT="${HOOKS_DIR}"/82-upload-csd-s3.sh
      LOG_FILE=/tmp/upload.log

      echo "Uploading CSD on server ${SERVER}"
      /tmp/kubectl exec "${SERVER}" -c "${CSD_CONTAINER_NAME}" -- sh -c "test -x ${SCRIPT} && ${SCRIPT}" >"${LOG_FILE}"

      # Sending logs to STDOUT
      cat ${LOG_FILE}

      if test ${?} -eq 0; then
        CSD_FILE=$(tail -1 "${LOG_FILE}")
        test -z "${CSD_FILES}" && CSD_FILES="${CSD_FILE}" || CSD_FILES="${CSD_FILES} ${CSD_FILE}"

        # Print the names of the uploaded files so callers know exactly what was uploaded
        echo "The following files were uploaded:"
        echo "${CSD_FILES}"
      else
        exit_code=${?}
        echo "The kubectl command attempting to invoke the script exited with: ${exit_code}"
        echo "This may be because: "
        echo "1) The ${SCRIPT} script is not currently available on the ${SERVER}.  This is expected if ${SERVER} is not running yet."
        echo "2) The ${SCRIPT} script exited with an error.  Please review the logs above to determine if this is the case."
      fi
    done
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was-periodic-csd-upload
  namespace: ping-cloud
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingaccess-was-license
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
data:
  OLD_PA_ADMIN_USER_PASSWORD: MkFjY2Vzcw==
  P14C_CLIENT_ID: Mzc0ZGIwOWQtNjAyZS00MzZjLWEwMzYtMTUzMzM3ZTUyZWMw
  P14C_CLIENT_SECRET: d0NRRWVLfngzLWM3M0s2cmp5UnVrNTUwUEpWOGx3VlpEMFlPYVJlS2lYRHVtZGxuTkExc2dxLVRFekIuRVpSfg==
  P14C_ISSUER: aHR0cHM6Ly9hdXRoLnBpbmdvbmUuY29tL2MzZTM3MzU3LTUwNjItNDFiYy05OTcyLWE3ZWE5ZDE0YTVhMi9hcw==
  PA_ADMIN_USER_PASSWORD: MkZlZGVyYXRlTTByZQ==
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingaccess-was-passwords
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was
  namespace: ping-cloud
spec:
  ports:
  - name: pingaccess-was-engine
    port: 443
    targetPort: 3000
  selector:
    app: ping-cloud
    role: pingaccess-was-engine
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingaccess-was-cluster-dev.ping-demo.com
  labels:
    app: ping-cloud
  name: pingaccess-was-admin
  namespace: ping-cloud
spec:
  clusterIP: None
  ports:
  - name: pingaccess-was-admin
    port: 9000
  - name: pingaccess-was-config-query
    port: 9090
  selector:
    app: ping-cloud
    role: pingaccess-was-admin
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingaccess-was-cluster
    role: pingaccess-was-engine
  name: pingaccess-was
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: ping-cloud
      role: pingaccess-was-engine
  serviceName: pingaccess-was
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingaccess-was-cluster
        pod-reaper: enabled
        role: pingaccess-was-engine
      name: pingaccess-was-engine
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values:
                  - pingaccess-was-engine
              topologyKey: topology.kubernetes.io/zone
            weight: 1
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_ENGINE
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: true
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess-was/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - /opt/staging/hooks/86-pre-stop.sh
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pa-was-engine-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingaccess-was
        ports:
        - containerPort: 3000
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pa-was-engine-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1
            memory: 2560Mi
          requests:
            cpu: 100m
            memory: 1280Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-was-license
          subPath: pingaccess.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
      initContainers:
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingaccess-was-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingaccess-was-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingaccess-was-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingaccess-was-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-was-init
          subPath: logger.lib.sh
      - command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingaccess-was-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingaccess-was-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-was-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingaccess-was-init
          subPath: wait-for-services.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingaccess-was
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      securityContext:
        fsGroup: 9999
      serviceAccountName: ping-serviceaccount
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingaccess-was-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: pingaccess-was-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-was-license
      - name: pingaccess-was-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-was-passwords
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingaccess-was-cluster
    role: pingaccess-was-admin
  name: pingaccess-was-admin
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: ping-cloud
      role: pingaccess-was-admin
  serviceName: pingaccess-was-admin
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingaccess-was-cluster
        pod-reaper: enabled
        role: pingaccess-was-admin
      name: pingaccess-was-admin
    spec:
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: HTTPS_PORT
          value: "9090"
        - name: OLD_PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: OLD_PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: P14C_ISSUER
          valueFrom:
            secretKeyRef:
              key: P14C_ISSUER
              name: pingaccess-was-passwords
        - name: P14C_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: P14C_CLIENT_ID
              name: pingaccess-was-passwords
        - name: P14C_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: P14C_CLIENT_SECRET
              name: pingaccess-was-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess-was/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pa-admin-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingaccess-was-admin
        ports:
        - containerPort: 9000
        - containerPort: 9090
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/85-pa-admin-readiness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 2560Mi
          requests:
            cpu: 20m
            memory: 1280Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-was-license
          subPath: pingaccess.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /opt/staging/p14c_env_vars
          name: data-dir
          subPath: p14c_env_vars
        - mountPath: /tmp/instance
          name: upgrade-dir
          subPath: instance
      initContainers:
      - command:
        - python3
        - -u
        - /app/pingaccess_was_p1_init.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingaccess-was-p14c-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/staging
          name: data-dir
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingaccess-was-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingaccess-was-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingaccess-was-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-was-init
          subPath: logger.lib.sh
        - mountPath: /opt/staging/p14c_env_vars
          name: data-dir
          subPath: p14c_env_vars
      - command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingaccess-was-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-was-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingaccess-was-init
          subPath: wait-for-services.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingaccess-was-admin
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      - args:
        - -c
        - ' /opt/in/hooks/22-upgrade-server.sh '
        command:
        - /bin/sh
        env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: HTTPS_PORT
          value: "9090"
        - name: OLD_PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: OLD_PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess-was/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingaccess-was-upgrade
        ports:
        - containerPort: 9000
        - containerPort: 9090
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-was-license
          subPath: pingaccess.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /tmp/instance
          name: upgrade-dir
          subPath: instance
      securityContext:
        fsGroup: 9999
      serviceAccountName: ping-serviceaccount
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - emptyDir: {}
        name: upgrade-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingaccess-was-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingaccess-was-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-was-license
      - name: pingaccess-was-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-was-passwords
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: ping-cloud
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: pingaccess-was-gp3
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: ping-cloud
  name: pa-was-engine-pdb
  namespace: ping-cloud
spec:
  minAvailable: 30%
  selector:
    matchLabels:
      app: ping-cloud
      role: pingaccess-was-engine
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was
  namespace: ping-cloud
spec:
  maxReplicas: 2
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: pingaccess-was
  targetCPUUtilizationPercentage: 70
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  name: pingaccess-was-admin-ext-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: ext-pingaccess-was-admin.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was-admin
            port:
              number: 9000
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - ext-pingaccess-was-admin.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingaccess-was-admin-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-private
  rules:
  - host: pingaccess-was-admin-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was-admin
            port:
              number: 9000
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingaccess-was-admin-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      Include /etc/nginx/owasp-modsecurity-crs/nginx-modsecurity.conf
      SecRuleEngine DetectionOnly
      SecRequestBodyAccess On
      SecAuditEngine RelevantOnly
      SecAuditLogParts ABCDEFGHIJKZ
      SecAuditLogType Serial
      SecAuditLogFormat JSON
      SecAuditLog /dev/stdout
  labels:
    app: ping-cloud
  name: pingaccess-was-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: pingaccess-admin-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: pingfederate-admin-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: monitoring-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: prometheus-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: logs-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: pingcentral-admin-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: healthcheck-httpbin-pa-was-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: argocd-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingaccess-admin-dev.ping-demo.com
    - pingfederate-admin-dev.ping-demo.com
    - monitoring-dev.ping-demo.com
    - prometheus-dev.ping-demo.com
    - logs-dev.ping-demo.com
    - pingcentral-admin-dev.ping-demo.com
    - healthcheck-httpbin-pa-was-dev.ping-demo.com
    - argocd-dev.ping-demo.com
