apiVersion: v1
kind: Namespace
metadata:
  name: health
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-healthcheck-serviceaccount
  namespace: health
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-healthcheck-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  - pods/log
  - secrets
  - configmaps
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  - apps
  resources:
  - statefulsets
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-healthcheck-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-healthcheck-role
subjects:
- kind: ServiceAccount
  name: cluster-healthcheck-serviceaccount
  namespace: health
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-health-environment-variables
  namespace: health
---
apiVersion: v1
data:
  HEALTHCHECK_USER_NAME: aGVhbHRoY2hlY2t1c2Vy
  HEALTHCHECK_USER_PASSWORD: aGVhbHRoY2hlY2twYXNzd29yZA==
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  name: healthcheck-user
  namespace: health
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: healthcheck-httpbin
  name: healthcheck-httpbin
  namespace: health
spec:
  externalName: healthcheck-httpbin.health.svc.cluster.local
  ports:
  - port: 80
    targetPort: 80
  selector:
    role: healthcheck-httpbin
---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: healthcheck-httpbin-pa
  name: healthcheck-httpbin-pa
  namespace: health
spec:
  externalName: healthcheck-httpbin-pa.health.svc.cluster.local
  ports:
  - port: 80
    targetPort: 80
  selector:
    role: healthcheck-httpbin-pa
---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: healthcheck-httpbin-pa-was
  name: healthcheck-httpbin-pa-was
  namespace: health
spec:
  externalName: healthcheck-httpbin-pa-was.health.svc.cluster.local
  ports:
  - port: 80
    targetPort: 80
  selector:
    role: healthcheck-httpbin-pa-was
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    role: healthcheck-cluster-health
  name: healthcheck-cluster-health
  namespace: health
spec:
  selector:
    matchLabels:
      role: healthcheck-cluster-health
  template:
    metadata:
      labels:
        role: healthcheck-cluster-health
      name: healthcheck-cluster-health
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - eval CLUSTER_HEALTHCHECK_SCHEDULE="${CLUSTER_HEALTHCHECK_SCHEDULE}" && ./robot_wrapper.py
          --path tests/cluster-health --include clusterHealth --output clusterHealth.xml
          --cron "${CLUSTER_HEALTHCHECK_SCHEDULE}"
        envFrom:
        - configMapRef:
            name: cluster-health-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/robot-framework/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: healthcheck-cluster-health
        resources:
          limits:
            cpu: 400m
            memory: 600Mi
          requests:
            cpu: 200m
            memory: 400Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
      serviceAccountName: cluster-healthcheck-serviceaccount
      terminationGracePeriodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    role: healthcheck-httpbin
  name: healthcheck-httpbin
  namespace: health
spec:
  selector:
    matchLabels:
      role: healthcheck-httpbin
  template:
    metadata:
      labels:
        role: healthcheck-httpbin
      name: healthcheck-httpbin
    spec:
      containers:
      - image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/kennethreitz/httpbin
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        name: healthcheck-httpbin
        ports:
        - containerPort: 80
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 200m
            memory: 60Mi
          requests:
            cpu: 100m
            memory: 10Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    role: healthcheck-httpbin-pa
  name: healthcheck-httpbin-pa
  namespace: health
spec:
  selector:
    matchLabels:
      role: healthcheck-httpbin-pa
  template:
    metadata:
      labels:
        role: healthcheck-httpbin-pa
      name: healthcheck-httpbin-pa
    spec:
      containers:
      - image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/kennethreitz/httpbin
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        name: healthcheck-httpbin-pa
        ports:
        - containerPort: 80
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 200m
            memory: 60Mi
          requests:
            cpu: 100m
            memory: 10Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    role: healthcheck-httpbin-pa-was
  name: healthcheck-httpbin-pa-was
  namespace: health
spec:
  selector:
    matchLabels:
      role: healthcheck-httpbin-pa-was
  template:
    metadata:
      labels:
        role: healthcheck-httpbin-pa-was
      name: healthcheck-httpbin-pa-was
    spec:
      containers:
      - image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/kennethreitz/httpbin
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        name: healthcheck-httpbin-pa-was
        ports:
        - containerPort: 80
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 200m
            memory: 60Mi
          requests:
            cpu: 100m
            memory: 10Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    role: healthcheck-pingaccess
  name: healthcheck-pingaccess
  namespace: health
spec:
  selector:
    matchLabels:
      role: healthcheck-pingaccess
  template:
    metadata:
      labels:
        role: healthcheck-pingaccess
      name: healthcheck-pingaccess
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - eval PINGACCESS_HEALTHCHECK_SCHEDULE="${PINGACCESS_HEALTHCHECK_SCHEDULE}"
          && ./robot_wrapper.py --path tests/pingaccess --include pingAccess --output
          pingAccess.xml --cron "${PINGACCESS_HEALTHCHECK_SCHEDULE}"
        envFrom:
        - configMapRef:
            name: cluster-health-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/robot-framework/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingaccess-health
        resources:
          limits:
            cpu: 400m
            memory: 600Mi
          requests:
            cpu: 200m
            memory: 400Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
      serviceAccountName: cluster-healthcheck-serviceaccount
      terminationGracePeriodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    role: healthcheck-pingaccess-was
  name: healthcheck-pingaccess-was
  namespace: health
spec:
  selector:
    matchLabels:
      role: healthcheck-pingaccess-was
  template:
    metadata:
      labels:
        role: healthcheck-pingaccess-was
      name: healthcheck-pingaccess-was
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - eval PINGACCESS_WAS_HEALTHCHECK_SCHEDULE="${PINGACCESS_WAS_HEALTHCHECK_SCHEDULE}"
          ./robot_wrapper.py --path tests/pingaccess-was --include pingAccessWas --output
          pingAccessWas.xml --cron "${PINGACCESS_WAS_HEALTHCHECK_SCHEDULE}"
        envFrom:
        - configMapRef:
            name: cluster-health-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/robot-framework/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingaccess-was-health
        resources:
          limits:
            cpu: 400m
            memory: 600Mi
          requests:
            cpu: 200m
            memory: 400Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
      serviceAccountName: cluster-healthcheck-serviceaccount
      terminationGracePeriodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    role: healthcheck-pingdirectory
  name: healthcheck-pingdirectory
  namespace: health
spec:
  selector:
    matchLabels:
      role: healthcheck-pingdirectory
  template:
    metadata:
      labels:
        role: healthcheck-pingdirectory
      name: healthcheck-pingdirectory
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - eval PINGDIRECTORY_HEALTHCHECK_SCHEDULE="${PINGDIRECTORY_HEALTHCHECK_SCHEDULE}"
          ./robot_wrapper.py --path tests/pingdirectory --include pingDirectory --output
          pingDirectory.xml --cron "${PINGDIRECTORY_HEALTHCHECK_SCHEDULE}"
        envFrom:
        - configMapRef:
            name: cluster-health-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/robot-framework/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingdirectory-health
        resources:
          limits:
            cpu: 400m
            memory: 600Mi
          requests:
            cpu: 200m
            memory: 400Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
      serviceAccountName: cluster-healthcheck-serviceaccount
      terminationGracePeriodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    role: healthcheck-pingfederate
  name: healthcheck-pingfederate
  namespace: health
spec:
  selector:
    matchLabels:
      role: healthcheck-pingfederate
  template:
    metadata:
      labels:
        role: healthcheck-pingfederate
      name: healthcheck-pingfederate
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - eval PINGFEDERATE_HEALTHCHECK_SCHEDULE="${PINGFEDERATE_HEALTHCHECK_SCHEDULE}"
          ./robot_wrapper.py --path tests/pingfederate --include pingFederate --output
          pingFederate.xml --cron "${PINGFEDERATE_HEALTHCHECK_SCHEDULE}"
        envFrom:
        - configMapRef:
            name: cluster-health-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/robot-framework/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingfederate-health
        resources:
          limits:
            cpu: 400m
            memory: 600Mi
          requests:
            cpu: 200m
            memory: 400Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
      serviceAccountName: cluster-healthcheck-serviceaccount
      terminationGracePeriodSeconds: 10
