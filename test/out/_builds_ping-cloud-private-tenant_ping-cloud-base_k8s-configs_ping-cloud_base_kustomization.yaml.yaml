apiVersion: v1
kind: Namespace
metadata:
  labels:
    app: ping-cloud
  name: ping-cloud
---
allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-gp3
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: gp3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was-gp3
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: gp3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: ping-cloud
    role: pingdatasync
  name: pingdatasync-gp3
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: gp3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-gp3
mountOptions:
- discard
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: gp3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-gp3
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: gp3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
    role: pingone-configurator
  name: p1-config-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
    role: p14c-bom-service
  name: p14c-bom-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
    role: p14c-oauth-service
  name: p14c-oauth-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: ping-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: pingcloud-radsecproxy-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: pingdirectory-ops-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: pingdirectory-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: ping-cloud
    role: pingone-configurator
  name: p1-config-role
  namespace: ping-cloud
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: ping-cloud
    role: p14c-bom-service
  name: p14c-bom-role
  namespace: ping-cloud
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: ping-cloud
    role: p14c-oauth-service
  name: p14c-oauth-role
  namespace: ping-cloud
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - watch
  - create
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: ping-cloud
  name: ping-role
  namespace: ping-cloud
rules:
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - delete
  - get
  - create
- apiGroups:
  - ""
  - apps
  resources:
  - statefulsets
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: ping-cloud
  name: pingdirectory-ops-role
  namespace: ping-cloud
rules:
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - delete
  - get
  - create
- apiGroups:
  - ""
  - apps
  resources:
  - statefulsets
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: ping-cloud
  name: cluster-secrets-reader
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
    role: pingone-configurator
  name: p1-config-role-binding
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: p1-config-role
subjects:
- kind: ServiceAccount
  name: p1-config-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
    role: p14c-bom-service
  name: p14c-bom-role-binding
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: p14c-bom-role
subjects:
- kind: ServiceAccount
  name: p14c-bom-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
    role: p14c-oauth-service
  name: p14c-oauth-role-binding
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: p14c-oauth-role
subjects:
- kind: ServiceAccount
  name: p14c-oauth-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: ping-role-binding
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ping-role
subjects:
- kind: ServiceAccount
  name: ping-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-role-binding
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ping-role
subjects:
- kind: ServiceAccount
  name: pingaccess-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingdirectory-ops-role-binding
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pingdirectory-ops-role
subjects:
- kind: ServiceAccount
  name: pingdirectory-ops-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingdirectory-role-binding
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ping-role
subjects:
- kind: ServiceAccount
  name: pingdirectory-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-ping-role
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ping-role
subjects:
- kind: ServiceAccount
  name: pingfederate-admin-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-role-binding
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ping-role
subjects:
- kind: ServiceAccount
  name: pingfederate-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: ping-cloud
  name: radsecproxy-ping-role
  namespace: ping-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ping-role
subjects:
- kind: ServiceAccount
  name: pingcloud-radsecproxy-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-cluster-secrets-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-secrets-reader
subjects:
- kind: ServiceAccount
  name: pingfederate-admin-serviceaccount
  namespace: ping-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: ping-cloud
  name: radsecproxy-cluster-secrets-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-secrets-reader
subjects:
- kind: ServiceAccount
  name: pingcloud-radsecproxy-serviceaccount
  namespace: ping-cloud
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: custom-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: known-hosts-config
  namespace: ping-cloud
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
    role: p14c-bom-service
  name: p14c-bom-service-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
    role: p14c-oauth-service
  name: p14c-oauth-service-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  config.yml: |-
    ---
    metrics:
    - name: metric_pingaccess_response_concurrency_statistics_90_percentile
      path: '{.response\.concurrency\.statistics\.90\.percentile}'
      labels:
        environment: pingaccess
        source: heartbeat
    - name: metric_pingaccess_response_statistics_count
      path: '{.response\.statistics\.count}'
      labels:
        environment: pingaccess
        source: heartbeat
    - name: metric_pingaccess_response_time_statistics_90_percentile
      path: '{.response\.time\.statistics\.90\.percentile}'
      labels:
        environment: pingaccess
        source: heartbeat
    - name: metric_pingaccess_response_concurrency_statistics_mean
      path: '{.response\.concurrency\.statistics\.mean}'
      labels:
        environment: pingaccess
        source: heartbeat
    - name: metric_pingaccess_response_time_statistics_mean
      path: '{.response\.time\.statistics\.mean}'
      labels:
        environment: pingaccess
        source: heartbeat
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pa-exporter-config
  namespace: ping-cloud
---
apiVersion: v1
data:
  config.yml: |-
    ---
    metrics:
    - name: metric_pingfederate_idp_session_registry_session_map_size
      path: '{.idp\.session\.registry\.session\.map\.size}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_concurrency_statistics_90_percentile
      path: '{.response\.concurrency\.statistics\.90\.percentile}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_statistics_count
      path: '{.response\.statistics\.count}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_time_statistics_90_percentile
      path: '{.response\.time\.statistics\.90\.percentile}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_session_state_attribute_map_size
      path: '{.session\.state\.attribute\.map\.size}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_sp_session_registry_session_map_size
      path: '{.sp\.session\.registry\.session\.map\.size}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_total_failed_transactions
      path: '{.total\.failed\.transactions}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_total_transactions
      path: '{.total\.transactions}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_concurrency_statistics_mean
      path: '{.response\.concurrency\.statistics\.mean}'
      labels:
        environment: pingfederate
        source: heartbeat
    - name: metric_pingfederate_response_time_statistics_mean
      path: '{.response\.time\.statistics\.mean}'
      labels:
        environment: pingfederate
        source: heartbeat
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pf-exporter-config
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  CONFIG_QUERY_KP_VALID_DAYS: "365"
  JAVA_OPTS: -javaagent:/opt/staging/jmx_prometheus_javaagent-0.14.0.jar=8080:/opt/in/instance/conf/jmx_export_config.yaml
  K8S_ACME_CERT_SECRET_NAME: acme-tls-cert
  K8S_SERVICE_NAME_PINGACCESS_ADMIN: pingaccess-admin
  K8S_STATEFUL_SET_NAME_PINGACCESS: pingaccess-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/pingaccess_engine_audit.log /opt/out/instance/log/pingaccess_api_audit.log
    /opt/out/instance/log/pingaccess_agent_audit.log /opt/out/instance/log/pingaccess_sideband_audit.log
    /opt/out/instance/log/pingaccess_sideband_client_audit.log /opt/out/instance/log/pingaccess.log
    /opt/out/instance/upgrade/log/upgrade.log /opt/out/instance/upgrade/log/audit.log
    /opt/out/instance/upgrade/log/upgrade_status.log
  ORCHESTRATION_TYPE: kubernetes
  PA_ADMIN_API_RATE_LIMIT: "5000"
  PA_ADMIN_API_RATE_LIMIT_POLICY: ""
  PA_ADMIN_APPLICATIONS: ""
  PA_ADMIN_PORT: "9000"
  PA_ADMIN_SERVER: pingaccess-admin
  PA_ADMIN_USER_USERNAME: Administrator
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_ENGINE_PORT: "3000"
  PA_GCOPTION: -XX:-UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40
    -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90
  PA_MAX_HEAP: 1024m
  PA_MAX_YGEN: 512m
  PA_MIN_HEAP: 1024m
  PA_MIN_YGEN: 512m
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PING_IDENTITY_ACCEPT_EULA: "YES"
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingaccess
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-admin-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  CONFIG_QUERY_KP_VALID_DAYS: "365"
  JAVA_OPTS: -javaagent:/opt/staging/jmx_prometheus_javaagent-0.14.0.jar=8080:/opt/in/instance/conf/jmx_export_config.yaml
  K8S_ACME_CERT_SECRET_NAME: acme-tls-cert
  K8S_SERVICE_NAME_PINGACCESS_ADMIN: pingaccess-admin
  K8S_STATEFUL_SET_NAME_PINGACCESS: pingaccess-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/pingaccess_engine_audit.log /opt/out/instance/log/pingaccess_api_audit.log
    /opt/out/instance/log/pingaccess_agent_audit.log /opt/out/instance/log/pingaccess_sideband_audit.log
    /opt/out/instance/log/pingaccess_sideband_client_audit.log /opt/out/instance/log/pingaccess.log
    /opt/out/instance/upgrade/log/upgrade.log /opt/out/instance/upgrade/log/audit.log
    /opt/out/instance/upgrade/log/upgrade_status.log
  ORCHESTRATION_TYPE: kubernetes
  PA_ADMIN_API_RATE_LIMIT: "5000"
  PA_ADMIN_API_RATE_LIMIT_POLICY: ""
  PA_ADMIN_APPLICATIONS: ""
  PA_ADMIN_PORT: "9000"
  PA_ADMIN_SERVER: pingaccess-admin
  PA_ADMIN_USER_USERNAME: Administrator
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_ENGINE_PORT: "3000"
  PA_GCOPTION: -XX:-UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40
    -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90
  PA_MAX_HEAP: 1024m
  PA_MAX_YGEN: 512m
  PA_MIN_HEAP: 1024m
  PA_MIN_YGEN: 512m
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PING_IDENTITY_ACCEPT_EULA: "YES"
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingaccess
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  backup-csd-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl

    chmod +x /tmp/kubectl

    REPLICAS=$(/tmp/kubectl get pods -l=role="${CSD_POD_ROLE}" -o name)

    CSD_FILES=
    for REPLICA in ${REPLICAS}; do
      SERVER=${REPLICA}
      SCRIPT="${HOOKS_DIR}"/82-upload-csd-s3.sh
      LOG_FILE=/tmp/upload.log

      echo "Uploading CSD on server ${SERVER}"
      /tmp/kubectl exec "${SERVER}" -c "${CSD_CONTAINER_NAME}" -- sh -c "test -x ${SCRIPT} && ${SCRIPT}" >"${LOG_FILE}"

      # Sending logs to STDOUT
      cat ${LOG_FILE}

      if test ${?} -eq 0; then
        CSD_FILE=$(tail -1 "${LOG_FILE}")
        test -z "${CSD_FILES}" && CSD_FILES="${CSD_FILE}" || CSD_FILES="${CSD_FILES} ${CSD_FILE}"

        # Print the names of the uploaded files so callers know exactly what was uploaded
        echo "The following files were uploaded:"
        echo "${CSD_FILES}"
      else
        exit_code=${?}
        echo "The kubectl command attempting to invoke the script exited with: ${exit_code}"
        echo "This may be because: "
        echo "1) The ${SCRIPT} script is not currently available on the ${SERVER}.  This is expected if ${SERVER} is not running yet."
        echo "2) The ${SCRIPT} script exited with an error.  Please review the logs above to determine if this is the case."
      fi
    done
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-periodic-csd-upload
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  CONFIG_QUERY_KP_VALID_DAYS: "365"
  K8S_ACME_CERT_SECRET_NAME: acme-tls-cert
  K8S_SERVICE_NAME_PINGACCESS_WAS_ADMIN: pingaccess-was-admin
  K8S_STATEFUL_SET_NAME_PINGACCESS_WAS: pingaccess-was-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/pingaccess_engine_audit.log /opt/out/instance/log/pingaccess_api_audit.log
    /opt/out/instance/log/pingaccess_sideband_audit.log /opt/out/instance/log/pingaccess_sideband_client_audit.log
    /opt/out/instance/log/pingaccess.log /opt/out/instance/upgrade/log/upgrade.log
    /opt/out/instance/upgrade/log/audit.log /opt/out/instance/upgrade/log/upgrade_status.log
  ORCHESTRATION_TYPE: kubernetes
  PA_ADMIN_API_RATE_LIMIT: "5000"
  PA_ADMIN_API_RATE_LIMIT_POLICY: ""
  PA_ADMIN_APPLICATIONS: ""
  PA_ADMIN_PORT: "9000"
  PA_ADMIN_SERVER: pingaccess-was-admin
  PA_ADMIN_USER_USERNAME: Administrator
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_ENGINE_PORT: "3000"
  PA_GCOPTION: -XX:-UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40
    -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90
  PA_MAX_HEAP: 256m
  PA_MAX_YGEN: 128m
  PA_MIN_HEAP: 128m
  PA_MIN_YGEN: 128m
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PING_IDENTITY_ACCEPT_EULA: "YES"
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingaccess
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was-admin-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  CONFIG_QUERY_KP_VALID_DAYS: "365"
  K8S_ACME_CERT_SECRET_NAME: acme-tls-cert
  K8S_SERVICE_NAME_PINGACCESS_WAS_ADMIN: pingaccess-was-admin
  K8S_STATEFUL_SET_NAME_PINGACCESS_WAS: pingaccess-was-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/pingaccess_engine_audit.log /opt/out/instance/log/pingaccess_api_audit.log
    /opt/out/instance/log/pingaccess_sideband_audit.log /opt/out/instance/log/pingaccess_sideband_client_audit.log
    /opt/out/instance/log/pingaccess.log /opt/out/instance/upgrade/log/upgrade.log
    /opt/out/instance/upgrade/log/audit.log /opt/out/instance/upgrade/log/upgrade_status.log
  ORCHESTRATION_TYPE: kubernetes
  PA_ADMIN_API_RATE_LIMIT: "5000"
  PA_ADMIN_API_RATE_LIMIT_POLICY: ""
  PA_ADMIN_APPLICATIONS: ""
  PA_ADMIN_PORT: "9000"
  PA_ADMIN_SERVER: pingaccess-was-admin
  PA_ADMIN_USER_USERNAME: Administrator
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_ENGINE_PORT: "3000"
  PA_GCOPTION: -XX:-UseParallelGC -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40
    -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90
  PA_MAX_HEAP: 256m
  PA_MAX_YGEN: 128m
  PA_MIN_HEAP: 128m
  PA_MIN_YGEN: 128m
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PING_IDENTITY_ACCEPT_EULA: "YES"
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingaccess
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  backup-csd-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl

    chmod +x /tmp/kubectl

    REPLICAS=$(/tmp/kubectl get pods -l=role="${CSD_POD_ROLE}" -o name)

    CSD_FILES=
    for REPLICA in ${REPLICAS}; do
      SERVER=${REPLICA}
      SCRIPT="${HOOKS_DIR}"/82-upload-csd-s3.sh
      LOG_FILE=/tmp/upload.log

      echo "Uploading CSD on server ${SERVER}"
      /tmp/kubectl exec "${SERVER}" -c "${CSD_CONTAINER_NAME}" -- sh -c "test -x ${SCRIPT} && ${SCRIPT}" >"${LOG_FILE}"

      # Sending logs to STDOUT
      cat ${LOG_FILE}

      if test ${?} -eq 0; then
        CSD_FILE=$(tail -1 "${LOG_FILE}")
        test -z "${CSD_FILES}" && CSD_FILES="${CSD_FILE}" || CSD_FILES="${CSD_FILES} ${CSD_FILE}"

        # Print the names of the uploaded files so callers know exactly what was uploaded
        echo "The following files were uploaded:"
        echo "${CSD_FILES}"
      else
        exit_code=${?}
        echo "The kubectl command attempting to invoke the script exited with: ${exit_code}"
        echo "This may be because: "
        echo "1) The ${SCRIPT} script is not currently available on the ${SERVER}.  This is expected if ${SERVER} is not running yet."
        echo "2) The ${SCRIPT} script exited with an error.  Please review the logs above to determine if this is the case."
      fi
    done
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was-periodic-csd-upload
  namespace: ping-cloud
---
apiVersion: v1
data:
  GRP_CA_FILE: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  GRP_CERT_FILE: /usr/local/secrets/certs/tls.crt
  GRP_KEY_FILE: /usr/local/secrets/certs/tls.key
  GRP_PORT: "2083"
  GRP_RADIUS_ACCT_PORT: "1813"
  GRP_RADIUS_PORT: "1812"
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingcloud-radsecproxy-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  APP_INTEGRATIONS_BACKEND_ID: appintegrations
  APP_INTEGRATIONS_BASE_DN: o=appintegrations
  DA_DEFAULT_GRANT_TYPE_CLIENT_ID: dadmin
  DA_EXCLUSIVE_SCOPE_NAME: urn:pingidentity:directory-delegated-admin
  DA_IDENTITY_MAPPER_NAME: DAEntryUUIDMatch
  DA_IDP_ADAPTER_HTML_FORM_ID: daidphtml
  DA_JWT_ID: dajwt
  DA_OAUTH_TOKEN_VALIDATOR_CLIENT_ID: dapingdirectory
  DA_OIDC_POLICY_ID: dapolicy
  DA_PCV_ID: dapcv
  DA_PCV_SEARCH_FILTER: uid=${username}
  DA_PINGFEDERATE_ATV_NAME: DAPingFederateValidator
  DA_PINGFEDERATE_INSTANCE_NAME: DAPingFederate
  ENABLE_DEL_ADMIN: "true"
  KUBECTL_VERSION: v1.24.0
  LDAP_CLIENT_MANAGER_SEARCH_BASE: ou=clients,o=appintegrations
  LDAP_DS_ID: LDAP-FA8D375DFAC589A222E13AA059319ABF9823B552
  NOTIFICATION_ENABLED: "true"
  NOTIFICATION_ENDPOINT: http://webhook-eventsource-svc.argo-events:12999/notification
  PC_ADMIN_USER_USERNAME: administrator
  PD_PCV_SEARCH_FILTER: (&(objectClass=person)(|(mail=${username})(cn=${username})(uid=${username})))
  PINGFEDERATE_ENGINE_PORT: "9031"
  PINGFEDERATE_ENGINE_SERVER: pingfederate
  PLATFORM_CONFIG_BACKEND_ID: platformconfig
  PLATFORM_CONFIG_BASE_DN: o=platformconfig
  SLACK_CHANNEL: p1as-application-oncall
  TOPOLOGY_DESCRIPTOR_JSON: /opt/staging/topology/descriptor.json
  TOPOLOGY_DESCRIPTOR_PROFILES_JSON: /opt/staging/topology/descriptor-profiles.json
  USER_BACKEND_ID: userRoot
  USER_BACKEND_ID_2: userRoot_2
  USER_BACKEND_ID_3: userRoot_3
  USER_BACKEND_ID_4: userRoot_4
  USER_BACKEND_ID_5: userRoot_5
  USER_BASE_DN: dc=example,dc=com
  USER_BASE_DN_2: ""
  USER_BASE_DN_3: ""
  USER_BASE_DN_4: ""
  USER_BASE_DN_5: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingcommon-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  API_RETRY_LIMIT: "15"
  API_TIMEOUT_WAIT: "10"
  EXT_PD_ADMIN_BIND_DN: cn=administrator
  EXT_PD_CHANGELOG_SYNC_MAX_AGE: 2h
  EXT_PD_HOST: example.com
  EXT_PD_HOST_INITIAL_CONNECTIONS: "1"
  EXT_PD_HOST_MAX_CONNECTIONS: "4"
  EXT_PD_HTTPS_PORT: "1443"
  EXT_PD_LDAP_PORT: "1389"
  EXT_PD_LDAPS_PORT: "443"
  EXT_PD_SERVER: external_pd_server
  EXT_PD_SYNC_BIND_DN: cn=sync
  EXT_PD_TO_P1AS_PD_PIPE: external_pd_to_p1as_pd
  HTTPS_PORT: "1443"
  IS_P1AS_TEST_MODE: "false"
  K8S_STATEFUL_SET_NAME: pingdatasync
  K8S_STATEFUL_SET_SERVICE_NAME: pingdatasync-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/logs/access /opt/out/instance/logs/errors
    /opt/out/instance/logs/failed-ops /opt/out/instance/logs/server.out /opt/out/instance/logs/sync-failed-ops
  LDAP_PORT: "1389"
  LDAPS_PORT: "1636"
  LOCATION: Austin
  MAX_HEAP_SIZE: 3g
  ORCHESTRATION_TYPE: kubernetes
  P1AS_PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  P1AS_PD_HOST_INITIAL_CONNECTIONS: "1"
  P1AS_PD_HOST_MAX_CONNECTIONS: "4"
  P1AS_PD_POD_NAME: pingdirectory-0
  P1AS_PD_SERVER: p1as_pd_server
  P1AS_PD_TO_EXT_PD_PIPE: p1as_pd_to_external_pd
  PING_IDENTITY_ACCEPT_EULA: "YES"
  REGION: us-west-2
  ROOT_BIND_DN: cn=administrator
  ROOT_USER_PASSWORD_FILE: /usr/local/secrets/root-user-password
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingdatasync
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SYNC_SERVER_NAME: sync
  TAIL_LOG_FILES: ""
  VERBOSE: "false"
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingdatasync-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  K8S_ACME_CERT_SECRET_NAME: acme-tls-cert
  K8S_TAIL_LOG_FILES: /opt/out/instance/logs/error.log /opt/out/instance/logs/access.log
  ORCHESTRATION_TYPE: kubernetes
  PD_DELEGATOR_DADMIN_API_NAMESPACE: ""
  PD_DELEGATOR_HEADER_BAR_LOGO: ""
  PD_DELEGATOR_HTTPS_PORT: "1443"
  PD_DELEGATOR_PROFILE_SCOPE_ENABLED: "false"
  PD_DELEGATOR_TIMEOUT_LENGTH_MINS: "30"
  PD_HTTP_PUBLIC_PORT: "443"
  PF_DELEGATOR_CLIENTID: dadmin
  PF_ENGINE_PUBLIC_PORT: ""
  REGION: us-west-2
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/delegator
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  TAIL_LOG_FILES: ""
  VERBOSE: "false"
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingdelegator-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  ADMIN_BIND_DN: cn=admin
  ADMIN_USER_PASSWORD_FILE: /usr/local/secrets/admin-user-password
  ADS_CRT_FILE: /usr/local/secrets/ads.crt
  ADS_KEY_FILE: /usr/local/secrets/ads.key
  BACKENDS_TO_BACKUP: userRoot;appintegrations;platformconfig;userRoot_2;userRoot_3;userRoot_4;userRoot_5
  BACKENDS_TO_RESTORE: ""
  BACKUP_FILE_NAME: ""
  BACKUP_RESTORE_POD: pingdirectory-0
  CHANGELOG_SYNC_MAX_AGE: 2h
  DISABLE_ALL_OLDER_USER_BASE_DN: "true"
  DISABLE_SCHEMA_REPLICATION: "true"
  ENCRYPTION_PASSWORD_FILE: /usr/local/secrets/encryption-password
  HTTPS_PORT: "1443"
  INITIALIZE_REPLICATION_DATA: "false"
  JAVA_AGENT_OPTS: -javaagent:/opt/staging/jmx_prometheus_javaagent-0.14.0.jar=8080:/opt/in/instance/conf/jmx_export_config.yaml
  K8S_ACME_CERT_SECRET_NAME: acme-tls-cert
  K8S_STATEFUL_SET_NAME: pingdirectory
  K8S_STATEFUL_SET_SERVICE_NAME: pingdirectory
  K8S_TAIL_LOG_FILES: /opt/out/instance/logs/access /opt/out/instance/logs/errors
    /opt/out/instance/logs/failed-ops /opt/out/instance/logs/expensive-write-ops /opt/out/instance/logs/replication
    /opt/out/instance/logs/server.out
  LDAP_PORT: "1389"
  LDAPS_PORT: "1636"
  LEAVE_DISK_AFTER_SERVER_DELETE: "false"
  LOCATION: Austin
  MAX_HEAP_SIZE: 3g
  OPTIMIZE_REPLACE_PROFILE: "true"
  ORCHESTRATION_TYPE: kubernetes
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PAUSE_REPLICATION_BEFORE_RESTORE: "true"
  PD_BASE_DN_LIMIT_INDEX: "20"
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PD_POD_LIMIT_INDEX: "1000"
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PING_IDENTITY_ACCEPT_EULA: "YES"
  REGION: us-west-2
  REPLICATION_BASE_DNS: o=platformconfig;o=appintegrations
  REPLICATION_PORT: "8989"
  RETRY_TIMEOUT_SECONDS: "300"
  ROOT_USER_PASSWORD_FILE: /usr/local/secrets/root-user-password
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingdirectory
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_INDEX_BUILD: "false"
  SKIP_LIVENESS: "true"
  SYNC_BIND_DN: cn=sync
  TAIL_LOG_FILES: ""
  TLS_TUNNEL_CIPHER_LIST: "null"
  TLS_TUNNEL_VERSIONS: TLSv1.2
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  export-ldif-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl -o /tmp/kubectl
    chmod +x /tmp/kubectl

    ERROR_MSG=
    SERVER="${K8S_STATEFUL_SET_NAME}-1"
    SCRIPT="${HOOKS_DIR}"/90-export-ldif-s3.sh
    LOG_FILE=/tmp/upload.log

    echo "Uploading LDIF_FILE on server ${SERVER}"
    /tmp/kubectl exec "${SERVER}" -c pingdirectory -- sh -c "test -x ${SCRIPT} && ${SCRIPT}">"${LOG_FILE}"
    export_ldif_status=$?

    if test ${export_ldif_status} -eq 0; then
      # Sending successful logs to STDOUT
      cat ${LOG_FILE}
    else
      # Append last 10 lines to ERROR_MSG
      EXPORT_LDIF_ERROR=$(tail -10 "${LOG_FILE}")
      ERROR_MSG="${SERVER} failed - ${EXPORT_LDIF_ERROR}"
      exit 1
    fi

    # Fail script if the desired server failed during export-ldif upload to S3
    if [ -n "${ERROR_MSG}" ]; then
      echo "${ERROR_MSG}"
      echo "Script failed exiting"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-export-ldif
  namespace: ping-cloud
---
apiVersion: v1
data:
  upload-csd-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl -o /tmp/kubectl
    chmod +x /tmp/kubectl

    NUM_REPLICAS=$(/tmp/kubectl get statefulset "${K8S_STATEFUL_SET_NAME}" -o jsonpath='{.spec.replicas}')

    START=0
    END=$((${NUM_REPLICAS} - 1))

    CSD_FILES=
    ERROR_MSG=
    for i in $(seq ${START} ${END}); do
      SERVER="${K8S_STATEFUL_SET_NAME}-${i}"
      SCRIPT="${HOOKS_DIR}"/82-upload-csd-s3.sh
      LOG_FILE=/tmp/upload.log

      echo "Uploading CSD on server ${SERVER}"
      /tmp/kubectl exec "${SERVER}" -c pingdirectory -- sh -c "test -x ${SCRIPT} && ${SCRIPT}"> "${LOG_FILE}"
      csd_status=$?

      if test ${csd_status} -eq 0; then
        # Sending logs to STDOUT
        cat ${LOG_FILE}
        CSD_FILE=$(tail -1 "${LOG_FILE}")
        test -z "${CSD_FILES}" && CSD_FILES="${CSD_FILE}" || CSD_FILES="${CSD_FILES} ${CSD_FILE}"
      else
        # Append last 10 lines to ERROR_MSG
        CSD_ERROR=$(tail -10 "${LOG_FILE}")
        ERROR_MSG="${ERROR_MSG} ${SERVER} failed - ${CSD_ERROR}"
      fi
    done

    # Fail script if any of the servers failed during CSD upload to S3
    if [ -n "${ERROR_MSG}" ]; then
      echo "${ERROR_MSG}"
      echo "Script failed exiting"
      exit 1
    fi

    # Print the names of the uploaded files so callers know exactly what was uploaded
    echo "The following files were uploaded:"
    echo "${CSD_FILES}"
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-periodic-csd-upload
  namespace: ping-cloud
---
apiVersion: v1
data:
  monitor-log-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl -o /tmp/kubectl
    chmod +x /tmp/kubectl

    NUM_REPLICAS=$(/tmp/kubectl get statefulset "${K8S_STATEFUL_SET_NAME}" -o jsonpath='{.spec.replicas}')

    START=0
    END=$((${NUM_REPLICAS} - 1))

    MONITOR_LOG_FILES=
    ERROR_MSG=
    for i in $(seq ${START} ${END}); do
      SERVER="${K8S_STATEFUL_SET_NAME}-${i}"
      SCRIPT="${HOOKS_DIR}"/82-upload-monitor-s3.sh
      MONITOR_LOG_FILE=/tmp/upload.log

      echo "Uploading monitor logs on server ${SERVER}"
      /tmp/kubectl exec "${SERVER}" -c pingdirectory -- sh -c "test -x ${SCRIPT} && ${SCRIPT}" > "${MONITOR_LOG_FILE}"
      monitor_log_status=$?

      if test ${monitor_log_status} -eq 0; then
        # Sending logs to STDOUT
        cat ${MONITOR_LOG_FILE}
      else
        # Append last 10 lines to ERROR_MSG
        MONITOR_LOG_ERROR=$(tail -10 "${MONITOR_LOG_FILE}")
        ERROR_MSG="${ERROR_MSG} ${SERVER} failed - ${MONITOR_LOG_ERROR}"
      fi
    done

    # Fail script if any of the servers failed during monitor log upload to S3
    if [ -n "${ERROR_MSG}" ]; then
      echo "${ERROR_MSG}"
      echo "Script failed exiting"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-periodic-monitor-log-upload
  namespace: ping-cloud
---
apiVersion: v1
data:
  pingdirectory-statsd-mapping.yml: |-
    mappings:
        # operation response time and throughput
      - match: "*.*.response-time"
        name: "response_time"
        labels:
          operation: "$2"
      - match: "*.*.throughput"
        name: "throughput"
        labels:
          operation: "$2"
        # connection handler metrics
      - match: "*.*.*.*.ldap-conn-handler-bytes-read"
        name: "LDAP_connection_handler_bytes_read"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-bytes-written"
        name: "LDAP_connection_handler_bytes_written"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-messages-read"
        name: "LDAP_connection_handler_messages_read"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-messages-written"
        name: "LDAP_connection_handler_messages_written"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-search-requests"
        name: "LDAP_connection_handler_search_requests"
        labels:
          port: "$4"
      - match: "*.*.*.*.ldap-conn-handler-search-entries-returned"
        name: "LDAP_connection_handler_search_entries_returned"
        labels:
          port: "$4"
        # backend metrics
      - match: "*.backend-entry-count"
        name: "backend_entry_count"
        labels:
          backendID: "$1"
      - match: "*.backend-db-cache-percent-full"
        name: "backend_db_cache_percent_full"
        labels:
          backendID: "$1"
      - match: "*.backend-size-on-disk"
        name: "backend_size_on_disk"
        labels:
          backendID: "$1"
      - match: "*.backend-active-cleaner-threads"
        name: "backend_active_cleaner_threads"
        labels:
          backendID: "$1"
      - match: "*.backend-cleaner-backlog"
        name: "backend_cleaner_backlog"
        labels:
          backendID: "$1"
      - match: "*.backend-nodes-evicted"
        name: "backend_nodes_evicted"
        labels:
          backendID: "$1"
      - match: "*.backend-checkpoints"
        name: "backend_checkpoints"
        labels:
          backendID: "$1"
      - match: "*.backend-avg-checkpoint-duration"
        name: "backend_avg_checkpoint_duration"
        labels:
          backendID: "$1"
      - match: "*.backend-time-since-last-checkpoint"
        name: "backend_time_since_last_checkpoint"
        labels:
          backendID: "$1"
      - match: "*.backend-new-db-logs"
        name: "backend_new_db_logs"
        labels:
          backendID: "$1"
      - match: "*.backend-random-reads"
        name: "backend_random_reads"
        labels:
          backendID: "$1"
      - match: "*.backend-random-writes"
        name: "backend_random_writes"
        labels:
          backendID: "$1"
      - match: "*.backend-sequential-reads"
        name: "backend_sequential_reads"
        labels:
          backendID: "$1"
      - match: "*.backend-sequential-writes"
        name: "backend_sequential_writes"
        labels:
          backendID: "$1"
        # entry cache metrics
      - match: "*.entry-cache-hit-ratio"
        name: "entry_cache_hit_ratio"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-hit-count"
        name: "entry_cache_hit_count"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-attempts"
        name: "entry_cache_attempts"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-add-or-update"
        name: "entry_cache_add_or_update"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-size"
        name: "entry_cache_size"
        labels:
          entryCache: "$1"
      - match: "*.entry-cache-pct-full"
        name: "entry_cache_pct_full"
        labels:
          entryCache: "$1"
        # changelog metrics?
      - match: "changelog.*"
        name: "$1"
        lables:
          backendID: "changelog"
        # GC metrics
      - match: "*.*.*.garbage-collections"
        name: "garbage_collections"
        labels:
          gcType: "$1"
          size: "$2"
          cause: "$3"
      - match: "*.*.*.garbage-collection-duration"
        name: "garbage_collection_duration"
        labels:
          gcType: "$1"
          size: "$2"
          cause: "$3"
      - match: "*.garbage-collection-live-mbytes"
        name: "garbage_collection_live_megabytes"
        labels:
          region: "$1"
        #PD replicas
      - match: "^dc=(.*)_dc=(.*)\\.replica(.*)"
        match_type: regex
        name: "replica${3}"
        labels:
          UserBaseDN1: "$1"
          UserBaseDN2: "$2"
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-statsd-mapping
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  JAVA_AGENT_OPTS: -javaagent:/opt/staging/jmx_prometheus_javaagent-0.14.0.jar=8080:/opt/in/instance/bin/jmx_export_config.yaml
  K8S_DEPLOYMENT_NAME_PINGFEDERATE_ADMIN: pingfederate-admin
  K8S_SERVICE_NAME_PINGFEDERATE_ADMIN: pingfederate-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/jvm-garbage-collection.log /opt/out/instance/log/server.log
    /opt/out/instance/log/init.log /opt/out/instance/log/admin.log /opt/out/instance/log/admin-event-detail.log
    /opt/out/instance/log/admin-api.log /opt/out/instance/log/runtime-api.log /opt/out/instance/log/transaction.log
    /opt/out/instance/log/audit.log /opt/out/instance/log/provisioner-audit.log /opt/out/instance/log/provisioner.log
    /opt/out/instance/log/request.log /opt/out/instance/log/request2.log
  LDAP_PORT: "1389"
  LDAPS_PORT: "1636"
  ORCHESTRATION_TYPE: kubernetes
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_ADMIN_CONSOLE_ENVIRONMENT: dev-us-west-2
  PF_ADMIN_CONSOLE_TITLE: Advanced SSO
  PF_ADMIN_PORT: "9999"
  PF_ADMIN_PUBLIC_HOSTNAME: ""
  PF_ADMIN_USER_USERNAME: administrator
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PF_CONSOLE_AUTHENTICATION: LDAP
  PF_DNS_PING_CLUSTER: pingfederate-cluster
  PF_DNS_PING_NAMESPACE: placeholder
  PF_LOG_LEVEL: INFO
  PF_MAX_HEAP: 512m
  PF_MAX_YGEN: 256m
  PF_MIN_HEAP: 256m
  PF_MIN_YGEN: 128m
  PF_PD_BIND_PORT: "1389"
  PF_PD_BIND_PROTOCOL: ldap
  PF_PD_BIND_USESSL: "false"
  PF_PROVISIONER_GRACE_PERIOD: "600"
  PF_PROVISIONER_SYNC_FREQ: "60"
  PING_IDENTITY_ACCEPT_EULA: "YES"
  PINGFEDERATE_ADMIN_SERVER: pingfederate-admin
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingfederate
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  SOCKET_HOST: logstash-elastic.elastic-stack-logging.svc.cluster.local
  SOCKET_PORT_AUDIT: "20514"
  SOCKET_PORT_PROVISIONER: "20512"
  SOCKET_PORT_SYSTEM: "20513"
  SOCKET_PROTOCOL: TCP
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-admin-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  ACCEPT_EULA: "YES"
  API_RETRY_LIMIT: "10"
  API_TIMEOUT_WAIT: "5"
  BACKUP_FILE_NAME: ""
  JAVA_AGENT_OPTS: -javaagent:/opt/staging/jmx_prometheus_javaagent-0.14.0.jar=8080:/opt/in/instance/bin/jmx_export_config.yaml
  K8S_DEPLOYMENT_NAME_PINGFEDERATE_ADMIN: pingfederate-admin
  K8S_SERVICE_NAME_PINGFEDERATE_ADMIN: pingfederate-admin
  K8S_TAIL_LOG_FILES: /opt/out/instance/log/jvm-garbage-collection.log /opt/out/instance/log/server.log
    /opt/out/instance/log/init.log /opt/out/instance/log/admin.log /opt/out/instance/log/admin-event-detail.log
    /opt/out/instance/log/admin-api.log /opt/out/instance/log/runtime-api.log /opt/out/instance/log/transaction.log
    /opt/out/instance/log/audit.log /opt/out/instance/log/provisioner-audit.log /opt/out/instance/log/provisioner.log
    /opt/out/instance/log/request.log /opt/out/instance/log/request2.log
  LDAP_PORT: "1389"
  LDAPS_PORT: "1636"
  ORCHESTRATION_TYPE: kubernetes
  PA_CLUSTER_PORT: "9090"
  PA_CLUSTER_PRIVATE_HOSTNAME: pingaccess-admin
  PA_WAS_CLUSTER_PORT: "9090"
  PA_WAS_CLUSTER_PRIVATE_HOSTNAME: pingaccess-was-admin
  PD_CLUSTER_PORT: "8989"
  PD_CLUSTER_PRIVATE_HOSTNAME: pingdirectory
  PF_ADMIN_CONSOLE_ENVIRONMENT: dev-us-west-2
  PF_ADMIN_CONSOLE_TITLE: Advanced SSO
  PF_ADMIN_PORT: "9999"
  PF_ADMIN_PUBLIC_HOSTNAME: ""
  PF_ADMIN_USER_USERNAME: administrator
  PF_CLUSTER_PORT: "7600"
  PF_CLUSTER_PRIVATE_HOSTNAME: pingfederate-cluster
  PF_CONSOLE_AUTHENTICATION: LDAP
  PF_DNS_PING_CLUSTER: pingfederate-cluster
  PF_DNS_PING_NAMESPACE: placeholder
  PF_LOG_LEVEL: INFO
  PF_MAX_HEAP: 512m
  PF_MAX_YGEN: 256m
  PF_MIN_HEAP: 256m
  PF_MIN_YGEN: 128m
  PF_PD_BIND_PORT: "1389"
  PF_PD_BIND_PROTOCOL: ldap
  PF_PD_BIND_USESSL: "false"
  PF_PROVISIONER_GRACE_PERIOD: "600"
  PF_PROVISIONER_SYNC_FREQ: "60"
  PING_IDENTITY_ACCEPT_EULA: "YES"
  PINGFEDERATE_ADMIN_SERVER: pingfederate-admin
  REGION: us-west-2
  RESTORE_BACKUP: "true"
  SECRETS_DIR: /usr/local/secrets
  SERVER_PROFILE_BRANCH: v1.19-release-branch
  SERVER_PROFILE_PATH: profiles/pingfederate
  SERVER_PROFILE_URL: https://github.com/pingidentity/ping-cloud-base.git
  SKIP_LIVENESS: "false"
  SOCKET_HOST: logstash-elastic.elastic-stack-logging.svc.cluster.local
  SOCKET_PORT_AUDIT: "20514"
  SOCKET_PORT_PROVISIONER: "20512"
  SOCKET_PORT_SYSTEM: "20513"
  SOCKET_PROTOCOL: TCP
  TAIL_LOG_FILES: ""
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-environment-variables
  namespace: ping-cloud
---
apiVersion: v1
data:
  backup-csd-data.sh: |-
    #!/bin/sh

    # Install kubectl
    curl -sS https://storage.googleapis.com/kubernetes-release/release/"${KUBECTL_VERSION}"/bin/linux/amd64/kubectl \
    -o /tmp/kubectl

    chmod +x /tmp/kubectl

    REPLICAS=$(/tmp/kubectl get pods -l=role="${CSD_POD_ROLE}" -o name)

    CSD_FILES=
    for REPLICA in ${REPLICAS}; do
      SERVER=${REPLICA}
      SCRIPT="${HOOKS_DIR}"/82-upload-csd-s3.sh
      LOG_FILE=/tmp/upload.log

      echo "Uploading CSD on server ${SERVER}"
      /tmp/kubectl exec "${SERVER}" -c "${CSD_CONTAINER_NAME}" -- sh -c "test -x ${SCRIPT} && ${SCRIPT}" >"${LOG_FILE}"

      # Sending logs to STDOUT
      cat ${LOG_FILE}

      if test ${?} -eq 0; then
        CSD_FILE=$(tail -1 "${LOG_FILE}")
        test -z "${CSD_FILES}" && CSD_FILES="${CSD_FILE}" || CSD_FILES="${CSD_FILES} ${CSD_FILE}"

        # Print the names of the uploaded files so callers know exactly what was uploaded
        echo "The following files were uploaded:"
        echo "${CSD_FILES}"
      else
        exit_code=${?}
        echo "The kubectl command attempting to invoke the script exited with: ${exit_code}"
        echo "This may be because: "
        echo "1) The ${SCRIPT} script is not currently available on the ${SERVER}.  This is expected if ${SERVER} is not running yet."
        echo "2) The ${SCRIPT} script exited with an error.  Please review the logs above to determine if this is the case."
      fi
    done
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: pingfederate-periodic-csd-upload
  namespace: ping-cloud
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: ping-cloud
  name: topology-descriptor
  namespace: ping-cloud
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: newrelic-license-key
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingaccess-license
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
data:
  OLD_PA_ADMIN_USER_PASSWORD: MkFjY2Vzcw==
  PA_ADMIN_USER_PASSWORD: MkZlZGVyYXRlTTByZQ==
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingaccess-passwords
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingaccess-was-license
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
data:
  OLD_PA_ADMIN_USER_PASSWORD: MkFjY2Vzcw==
  P14C_CLIENT_ID: Mzc0ZGIwOWQtNjAyZS00MzZjLWEwMzYtMTUzMzM3ZTUyZWMw
  P14C_CLIENT_SECRET: d0NRRWVLfngzLWM3M0s2cmp5UnVrNTUwUEpWOGx3VlpEMFlPYVJlS2lYRHVtZGxuTkExc2dxLVRFekIuRVpSfg==
  P14C_ISSUER: aHR0cHM6Ly9hdXRoLnBpbmdvbmUuY29tL2MzZTM3MzU3LTUwNjItNDFiYy05OTcyLWE3ZWE5ZDE0YTVhMi9hcw==
  PA_ADMIN_USER_PASSWORD: MkZlZGVyYXRlTTByZQ==
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingaccess-was-passwords
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
data:
  ACME_CERT_KEYSTORE_PASSWORD: MkZlZGVyYXRlTTByZQ==
  DA_OAUTH_TOKEN_VALIDATOR_SECRET: MkZlZGVyYXRlTTByZQ==
  PC_ADMIN_USER_PASSWORD: MkZlZGVyYXRl
  PF_ADMIN_USER_PASSWORD: MkZlZGVyYXRlTTByZQ==
  PF_LDAP_PASSWORD: MkZlZGVyYXRlTTByZQ==
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingcommon-passwords
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
data:
  EXT_PD_ADMIN_BIND_DN_PASSWORD: MkZlZGVyYXRlTTByZQ==
  EXT_PD_SYNC_BIND_DN_PASSWORD: MkZlZGVyYXRlTTByZQ==
  root-user-password: MkZlZGVyYXRlTTByZQ==
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingdatasync-passwords
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
data:
  DMANAGER_PASSWORD: MkZlZGVyYXRlTTByZQ==
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-dmanager-password
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-license
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
data:
  P14C_CLIENT_ID: ODkwNzM2NTQtNGVkMy00YTViLWI4OWMtZmY2YjVlMWI3ZDFi
  P14C_CLIENT_SECRET: UXA4aTAudHg4U3dVSWphdnlYWn5KYTZLQlA5SzN+azljTUYuUWF4UTZYclBvdHpmOU5DbFk2bHRLLjBJUU42MA==
  P14C_ENVIRONMENT_ID: YzNlMzczNTctNTA2Mi00MWJjLTk5NzItYTdlYTlkMTRhNWEy
  admin-user-password: MkZlZGVyYXRlTTByZQ==
  ads.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2akNDQWFZQ0NRQ3NMaEptdEYwQ3VEQU5CZ2txaGtpRzl3MEJBUXNGQURBZ01SNHdIQVlEVlFRRERCVnMKYjJOaGJHaHZjM1F1Ykc5allXeGtiMjFoYVc0d0lCY05NakF3TmpNd01UZ3hOekkwV2hnUE1qRXlNREEyTURZeApPREUzTWpSYU1DQXhIakFjQmdOVkJBTU1GV3h2WTJGc2FHOXpkQzVzYjJOaGJHUnZiV0ZwYmpDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtmalRHZVgweHhubG5LbXBodFB1Z21jRjNXRHREZmsKOUgyWGh4aXpsTzliNzhPWlk3ZGRxZXVpRktBU3ZZZEtzSE80cUVLMXhtMitvTHZaa2RIandFYlc5dVJYQ2Zucgo3cUpRaHpiemZpemtFOXE2MVBHazJTNGNlcytyUlBDZVlFSEUrd1J5bUdnMnNabXgrdVNLb1RvQk5lMnNnQ2lWCkw0YmpBZ3NKdkdxUzI2T0ZleTF6WTVRYXRmUkI0QlFKSis1eFJ3Z3BCSXdJOExRN3ozS0pkQlVyTll3TDlUemYKSVc2UjcxMHlORVhWWkxqa0pwemJTeGtub3kxQlc3SFJwYmxxNFZaWEFEWDNSYlpuV2xKRWhubkRBVGxPcWtregp5cHBUSnhvaEtkK0pZYXRFRUxWNC9DajkyR3UwcEJtSXorazkrWnJob3J1RTBkSHM2T0tlYStVQ0F3RUFBVEFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVNVcUU1RUw1ZEttNDJWcmFEclpRM0prNXlTUUNtZE1HNGFoYmFndVUKNDk1aEV5NDlhNVhDL3NoS0hCUnJaVy95RTJiS1dTOTBKdzA2aVpUWkk0a3JXZnk5NUtxVlJhWkNYUHc4K0lWdwpLMjJZSTJ1MWVUNlpWYkpuL1dJL2VuMDBwNk1mRjhFTmF3STZTc081dzlVUnRhSFpRK2lhc1BSUERqeVljUC93CnNpbWlBeTB2a2hZSUM5Qmw1K0QxV3FwWm1PRnMvdW5EZC8xUFRxSXF5cHZINUcyYjBvUmdLTTUzQlBIZFBKajAKcEpObFBTblJFNThVNkM5RG5BcSt2cFlJZFE1UWdtQWVaMVA0T2E0cGdHY0NHNlBVYVRoalUxeFhFL01CQWFFRgpwV0pYT2pqWHUwdVpFbXE0bHFJakZEcmZDSkVISkliRmtzMUJjZVVQK3BkU2F3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ads.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktrd2dnU2xBZ0VBQW9JQkFRQ240MHhubDlNY1o1WnkKcHFZYlQ3b0puQmQxZzdRMzVQUjlsNGNZczVUdlcrL0RtV08zWGFucm9oU2dFcjJIU3JCenVLaEN0Y1p0dnFDNwoyWkhSNDhCRzF2YmtWd241Nis2aVVJYzI4MzRzNUJQYXV0VHhwTmt1SEhyUHEwVHdubUJCeFBzRWNwaG9OckdaCnNmcmtpcUU2QVRYdHJJQW9sUytHNHdJTENieHFrdHVqaFhzdGMyT1VHclgwUWVBVUNTZnVjVWNJS1FTTUNQQzAKTzg5eWlYUVZLeldNQy9VODN5RnVrZTlkTWpSRjFXUzQ1Q2FjMjBzWko2TXRRVnV4MGFXNWF1RldWd0ExOTBXMgpaMXBTUklaNXd3RTVUcXBKTThxYVV5Y2FJU25maVdHclJCQzFlUHdvL2RocnRLUVppTS9wUGZtYTRhSzdoTkhSCjdPamlubXZsQWdNQkFBRUNnZ0VCQUp4NXMwcVNMUWM2WFBTNjhmSmVtb3crV1hjRHE4SzB1Rk1lR2FJaUxsdngKR2tUNkFBQjFZZHZta3NhbThOTGFBQis3S2NnVFY4QU5mZzNYT0p1aFpDSWlWTFo1a1NqSWh2L3RnampyTk54dQpMenNjQzBDMVhsNGwyU2tZL2dZdDlwVVdITWNHYjVvaDcrSEtDb2RiMWUwVUY4bFBqNXREZ0twOWhmZjN1UTZ5CkUxRWl0WHJ6Yk9qNzU4QllXRXc1cXdPS2orWGZIS3FJcDc2dGp6NEM3dlJPUDF5OFBaN1BuYUV2V3VSVXNIdkUKVTB1aXJVc3doYjZJSE10UUxGM21EUEo5Y2lEWmI3NWFjbmtEZTRHc1ZQSHJ5bDNKMGpnZnpNS2dtT1RKZWVFTAprcEsvUHI1eVNMTEZnNjloYVlDU0hLVEt6ME9OUjVXc3dmdjl2WnBjQXNFQ2dZRUEwNEZ3cjcwMitVK3R5d1NNCmlZM0JvNFZEeXVLVXlsQThxUE1COGlCK0cxaXdJenBWSk1hakNZR2dLcUhMZUpGWjM0RGNCUkNiVnZ0RlhpU0UKSW5NQ0taYStlOTh1UXVjcGJzV2tBM3oxT0hMN1dscFp3OTMwZlBkVkNVYW1KZEhYUTJjQ01udDFMRmwyWmVQTwpyVG1rMmdXMHMzYTNHMWRvNjFJM3NZamNHc2tDZ1lFQXl6VFhKa3RUVXZ6L1hqVDhrMDBoUFREWjZzR1RUOEt2CjBERzU0c1ZNYWRTb2hXYi9oUkZ6WHo4Q21YMWQyRDZSS3NaK3pVNjcydCtqY0pDdmd2L3phRWpBZ3M5cXVMTFIKd2s1S29qbmZGT2FobEN3TDladVA0c01kcHZwU2JUS0RPTGdzMXQ1TkcreTlkZEFiSzdMNDFkMTRSbEw4bHZ4OApzdnk4eitvR3VqMENnWUJaU1NGYTd0T1FONVMwU1gxU2JDYzhjbnVGNEZUVGV6L0FTcVdkb3gzWlNYMUJ3ZFJECnJCOFRXa2RVOSt3L1A0empEekRTYW9wSkU5WGF3aXVOcDJOWVR5eW1lamE3UTM1NEpyTHdUZ1h2Q0lzWFAyRDUKa0c4dmVmSEo4cXNjK0JLWmY1aXIydlpCL0pwQXRRU0FsLzhCa3JzUHI2UG94T09qdzVlRE9MVkNFUUtCZ1FDegptNExISURFSDJ3TEQrOFY3Vk9NYU9NR0VFNURuSU1kUkY0S2JnNVBrdnNndEVUcXNIUjZDZ3lrRERhSVM3a3BWCktwa05VcGdML3p0dzFSR3NraHBNaEhGVHJZMUFyeDFqeHR1RXcrMy9oVkl2cXpidTRZNnQrWk9OOFJkRjJTM08KeGtzcnA5VXo1MjRXWWRpQ0tYQnpaNHRWYlNoQk0rM3NMaU9kQ2Ria2FRS0JnUUN4b3ZCYXpjR2VEMXFsRjREUgo0eXZpYUpCeUNPM3ludEQwMXAvUGRCTDJNWHA2bjAzWVZEa1BHUytqamZtamt3QVV0ek9RU2pZUGViWWtlb21yClZMZ2N1YkN1VGZsNmNQbnRxUHZxM1pVT2ZqUlB1REI4MjZ0Rm82RDZEUHYwQ043WnE4Y3ZpK3h0RExqWjRDbG8KdFd3a3JWZ3JTeEljd1dyaTBMcXNXTExmV2c9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  encryption-password: MkZlZGVyYXRlTTByZQ==
  encryption-settings.pin: MkZlZGVyYXRlTTByZQ==
  old-encryption-passwords: MkZlZGVyYXRlTTByZQ==
  root-user-password: MkZlZGVyYXRlTTByZQ==
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-passwords
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-truststore-certs
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingfederate-license
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: pingfederate-passwords
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  labels:
    app: ping-cloud
  name: ssh-id-key-secret
  namespace: ping-cloud
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
  name: pingaccess
  namespace: ping-cloud
spec:
  ports:
  - name: pingaccess-engine
    port: 443
    targetPort: 3000
  - name: pingaccess-agent
    port: 3030
  - name: metrics
    port: 8080
  - name: pa-heartbeat
    port: 8079
  selector:
    app: ping-cloud
    role: pingaccess-engine
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingaccess-cluster-dev.ping-demo.com
  labels:
    app: ping-cloud
  name: pingaccess-admin
  namespace: ping-cloud
spec:
  clusterIP: None
  ports:
  - name: pingaccess-admin
    port: 9000
  - name: pingaccess-cluster
    port: 9090
  selector:
    app: ping-cloud
    role: pingaccess-admin
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was
  namespace: ping-cloud
spec:
  ports:
  - name: pingaccess-was-engine
    port: 443
    targetPort: 3000
  selector:
    app: ping-cloud
    role: pingaccess-was-engine
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingaccess-was-cluster-dev.ping-demo.com
  labels:
    app: ping-cloud
  name: pingaccess-was-admin
  namespace: ping-cloud
spec:
  clusterIP: None
  ports:
  - name: pingaccess-was-admin
    port: 9000
  - name: pingaccess-was-config-query
    port: 9090
  selector:
    app: ping-cloud
    role: pingaccess-was-admin
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingdatasync-dev.ping-demo.com
    service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  labels:
    app: ping-cloud
    role: pingdatasync
  name: pingdatasync-admin
  namespace: ping-cloud
spec:
  externalTrafficPolicy: Local
  ports:
  - name: ldap
    port: 1389
  - name: ldaps
    port: 1636
  - name: https
    port: 1443
  selector:
    app: ping-cloud
    class: pingdatasync-server
    role: pingdatasync
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
  name: pingdelegator
  namespace: ping-cloud
spec:
  ports:
  - name: pingdelegator
    port: 1443
    targetPort: https
  selector:
    app: ping-cloud
    role: pingdelegator
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingdirectory-cluster-dev.ping-demo.com
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory
  namespace: ping-cloud
spec:
  clusterIP: None
  ports:
  - name: ldap
    port: 1389
    targetPort: ldap
  - name: ldaps
    port: 1636
    targetPort: ldaps
  - name: repl
    port: 8989
    targetPort: repl
  - name: jmx-metrics
    port: 8080
  - name: metrics
    port: 9102
  selector:
    app: ping-cloud
    class: pingdirectory-server
    role: pingdirectory
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingdirectory-admin-dev.ping-demo.com
    service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-admin
  namespace: ping-cloud
spec:
  externalTrafficPolicy: Local
  ports:
  - name: ldaps
    port: 636
    targetPort: ldaps
  selector:
    app: ping-cloud
    class: pingdirectory-server
    role: pingdirectory
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-http
  namespace: ping-cloud
spec:
  ports:
  - name: https
    port: 1443
    targetPort: https
  selector:
    app: ping-cloud
    class: pingdirectory-server
    role: pingdirectory
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
  name: pingfederate
  namespace: ping-cloud
spec:
  ports:
  - name: radsec
    port: 2083
    targetPort: 2083
  - name: pingfederate-runtime
    port: 9031
  - name: metrics
    port: 8080
  - name: pf-heartbeat
    port: 8079
  - name: pf-radius-listener
    port: 1812
  - name: pf-radius-accounting
    port: 1813
  selector:
    app: ping-cloud
    role: pingfederate-engine
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ping-cloud
    role: pingfederate-admin
  name: pingfederate-admin
  namespace: ping-cloud
spec:
  ports:
  - name: pf-admin
    port: 9999
    targetPort: pf-admin
  selector:
    app: ping-cloud
    role: pingfederate-admin
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingfederate-cluster-dev.ping-demo.com
  labels:
    app: ping-cloud
  name: pingfederate-cluster
  namespace: ping-cloud
spec:
  clusterIP: None
  ports:
  - name: pingfederate-cluster-bind
    port: 7600
    protocol: TCP
    targetPort: 7600
  - name: pingfederate-cluster-health
    port: 7700
    protocol: TCP
    targetPort: 7700
  publishNotReadyAddresses: true
  selector:
    app: ping-cloud
    cluster: pingfederate-cluster
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: pingfederate-radius-dev.ping-demo.com
    service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  labels:
    app: ping-cloud
  name: udp-loadbalancer
  namespace: ping-cloud
spec:
  externalTrafficPolicy: Local
  ports:
  - name: radius-listener
    port: 1812
    protocol: UDP
    targetPort: 1812
  - name: radius-accounting
    port: 1813
    protocol: UDP
    targetPort: 1813
  selector:
    app: ping-cloud
    role: pingfederate-engine
  type: LoadBalancer
---
apiVersion: scheduling.k8s.io/v1
description: Flag for apps that remain in pending state
globalDefault: false
kind: PriorityClass
metadata:
  labels:
    app: ping-cloud
  name: high-priority-apps-to-avoid-pending-state
preemptionPolicy: PreemptLowerPriority
value: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ping-cloud
    role: p14c-bom-service
  name: p14c-bom-service
  namespace: ping-cloud
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ping-cloud
      role: p14c-bom-service
  template:
    metadata:
      labels:
        app: ping-cloud
        role: p14c-bom-service
      name: p14c-bom-service
    spec:
      containers:
      - command:
        - python3
        - -u
        - /app/bom_service_controller.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: p14c-bom-service-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - python3
            - -u
            - /app/liveness.py
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 3
        name: pingcloud-bom
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 300m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
      serviceAccount: p14c-bom-serviceaccount
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ping-cloud
  name: pingdelegator
  namespace: ping-cloud
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ping-cloud
      role: pingdelegator
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        role: pingdelegator
      name: pingdelegator
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values:
                  - pingdelegator
              topologyKey: topology.kubernetes.io/zone
            weight: 1
      containers:
      - envFrom:
        - configMapRef:
            name: pingdelegator-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingdelegator/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - nginx -s quit
              - while killall -0 nginx; do sleep 1; done
        livenessProbe:
          exec:
            command:
            - /opt/liveness.sh
          failureThreshold: 4
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingdelegator
        ports:
        - containerPort: 1443
          name: https
        readinessProbe:
          exec:
            command:
            - /opt/liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 80m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
      initContainers:
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingdelegator-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingdelegator-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingdelegator-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingdelegator-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingdelegator-init
          subPath: logger.lib.sh
      securityContext:
        fsGroup: 9999
      serviceAccount: ping-serviceaccount
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingdelegator-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingaccess-cluster
    role: pingaccess-engine
  name: pingaccess
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: ping-cloud
      role: pingaccess-engine
  serviceName: pingaccess
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingaccess-cluster
        pod-reaper: enabled
        role: pingaccess-engine
      name: pingaccess-engine
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values:
                  - pingaccess-engine
              topologyKey: topology.kubernetes.io/zone
            weight: 1
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_ENGINE
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - /opt/staging/hooks/86-pre-stop.sh
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pa-engine-liveness.sh
          failureThreshold: 4
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingaccess
        ports:
        - containerPort: 3000
        - containerPort: 3030
        - containerPort: 8080
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pa-engine-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-license
          subPath: pingaccess.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
      - env:
        - name: SERVICE_SHORTNAME
          value: pa
        - name: SERVICE_PORT
          value: "3000"
        - name: REPEAT_SEC
          value: "10"
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/prometheus-json-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingaccess-heartbeat-exporter
        ports:
        - containerPort: 8079
          name: pa-heartbeat
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/config.yml
          name: pa-exporter-config
          subPath: config.yml
      initContainers:
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingaccess-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingaccess-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingaccess-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingaccess-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-init
          subPath: logger.lib.sh
      - command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingaccess-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingaccess-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingaccess-init
          subPath: wait-for-services.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingaccess
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      securityContext:
        fsGroup: 9999
      serviceAccountName: ping-serviceaccount
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingaccess-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: pingaccess-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-license
      - name: pingaccess-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-passwords
      - configMap:
          defaultMode: 420
          name: pa-exporter-config
        name: pa-exporter-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingaccess-cluster
    role: pingaccess-admin
  name: pingaccess-admin
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: ping-cloud
      role: pingaccess-admin
  serviceName: pingaccess-admin
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingaccess-cluster
        entitled-app: "true"
        pod-reaper: enabled
        role: pingaccess-admin
      name: pingaccess-admin
    spec:
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: HTTPS_PORT
          value: "9090"
        - name: OLD_PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: OLD_PA_ADMIN_USER_PASSWORD
              name: pingaccess-passwords
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pa-admin-liveness.sh
          failureThreshold: 4
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingaccess-admin
        ports:
        - containerPort: 9000
        - containerPort: 9090
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/85-pa-admin-readiness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 2
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-license
          subPath: pingaccess.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /tmp/instance
          name: upgrade-dir
          subPath: instance
      initContainers:
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingaccess-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingaccess-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingaccess-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-init
          subPath: logger.lib.sh
      - command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingaccess-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingaccess-init
          subPath: wait-for-services.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingaccess-admin
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      - args:
        - -c
        - ' /opt/in/hooks/22-upgrade-server.sh '
        command:
        - /bin/sh
        env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: STARTUP_COMMAND
          value: /opt/staging/hooks/22-upgrade-server.sh
        - name: HTTPS_PORT
          value: "9090"
        - name: OLD_PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: OLD_PA_ADMIN_USER_PASSWORD
              name: pingaccess-passwords
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingaccess-upgrade
        ports:
        - containerPort: 9000
        - containerPort: 9090
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-license
          subPath: pingaccess.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /tmp/instance
          name: upgrade-dir
          subPath: instance
      securityContext:
        fsGroup: 9999
      serviceAccountName: ping-serviceaccount
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - emptyDir: {}
        name: upgrade-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingaccess-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingaccess-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-license
      - name: pingaccess-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-passwords
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: ping-cloud
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: pingaccess-gp3
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingaccess-was-cluster
    role: pingaccess-was-engine
  name: pingaccess-was
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: ping-cloud
      role: pingaccess-was-engine
  serviceName: pingaccess-was
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingaccess-was-cluster
        pod-reaper: enabled
        role: pingaccess-was-engine
      name: pingaccess-was-engine
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values:
                  - pingaccess-was-engine
              topologyKey: topology.kubernetes.io/zone
            weight: 1
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_ENGINE
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: true
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess-was/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - /opt/staging/hooks/86-pre-stop.sh
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pa-was-engine-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingaccess-was
        ports:
        - containerPort: 3000
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pa-was-engine-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1
            memory: 2560Mi
          requests:
            cpu: 100m
            memory: 1280Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-was-license
          subPath: pingaccess.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
      initContainers:
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingaccess-was-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingaccess-was-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingaccess-was-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingaccess-was-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-was-init
          subPath: logger.lib.sh
      - command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingaccess-was-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingaccess-was-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-was-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingaccess-was-init
          subPath: wait-for-services.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingaccess-was
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      securityContext:
        fsGroup: 9999
      serviceAccountName: ping-serviceaccount
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingaccess-was-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: pingaccess-was-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-was-license
      - name: pingaccess-was-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-was-passwords
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingaccess-was-cluster
    role: pingaccess-was-admin
  name: pingaccess-was-admin
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: ping-cloud
      role: pingaccess-was-admin
  serviceName: pingaccess-was-admin
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingaccess-was-cluster
        pod-reaper: enabled
        role: pingaccess-was-admin
      name: pingaccess-was-admin
    spec:
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: HTTPS_PORT
          value: "9090"
        - name: OLD_PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: OLD_PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: P14C_ISSUER
          valueFrom:
            secretKeyRef:
              key: P14C_ISSUER
              name: pingaccess-was-passwords
        - name: P14C_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: P14C_CLIENT_ID
              name: pingaccess-was-passwords
        - name: P14C_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: P14C_CLIENT_SECRET
              name: pingaccess-was-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess-was/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pa-admin-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingaccess-was-admin
        ports:
        - containerPort: 9000
        - containerPort: 9090
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/85-pa-admin-readiness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 2560Mi
          requests:
            cpu: 20m
            memory: 1280Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-was-license
          subPath: pingaccess.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /opt/staging/p14c_env_vars
          name: data-dir
          subPath: p14c_env_vars
        - mountPath: /tmp/instance
          name: upgrade-dir
          subPath: instance
      initContainers:
      - command:
        - python3
        - -u
        - /app/pingaccess_was_p1_init.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingaccess-was-p14c-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/staging
          name: data-dir
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingaccess-was-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingaccess-was-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingaccess-was-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-was-init
          subPath: logger.lib.sh
        - mountPath: /opt/staging/p14c_env_vars
          name: data-dir
          subPath: p14c_env_vars
      - command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingaccess-was-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingaccess-was-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingaccess-was-init
          subPath: wait-for-services.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingaccess-was-admin
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      - args:
        - -c
        - ' /opt/in/hooks/22-upgrade-server.sh '
        command:
        - /bin/sh
        env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: HTTPS_PORT
          value: "9090"
        - name: OLD_PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: OLD_PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-was-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-was-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess-was/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingaccess-was-upgrade
        ports:
        - containerPort: 9000
        - containerPort: 9090
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /opt/in/instance/conf/pingaccess.lic
          name: pingaccess-was-license
          subPath: pingaccess.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /tmp/instance
          name: upgrade-dir
          subPath: instance
      securityContext:
        fsGroup: 9999
      serviceAccountName: ping-serviceaccount
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - emptyDir: {}
        name: upgrade-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingaccess-was-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingaccess-was-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-was-license
      - name: pingaccess-was-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingaccess-was-passwords
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: ping-cloud
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: pingaccess-was-gp3
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    class: pingdatasync-server
    role: pingdatasync
  name: pingdatasync
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: ping-cloud
      class: pingdatasync-server
      role: pingdatasync
  serviceName: pingdatasync-admin
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        class: pingdatasync-server
        role: pingdatasync
      name: pingdatasync
    spec:
      containers:
      - env:
        - name: ROOT_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: root-user-password
              name: pingdatasync-passwords
        - name: EXT_PD_SYNC_BIND_DN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: EXT_PD_SYNC_BIND_DN_PASSWORD
              name: pingdatasync-passwords
        - name: EXT_PD_ADMIN_BIND_DN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: EXT_PD_ADMIN_BIND_DN_PASSWORD
              name: pingdatasync-passwords
        - name: P1AS_PD_SYNC_BIND_DN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: root-user-password
              name: pingdirectory-passwords
        - name: P1AS_PD_LDAP_PORT
          valueFrom:
            configMapKeyRef:
              key: LDAP_PORT
              name: pingdirectory-environment-variables
        - name: P1AS_PD_LDAPS_PORT
          valueFrom:
            configMapKeyRef:
              key: LDAPS_PORT
              name: pingdirectory-environment-variables
        - name: P1AS_PD_ADMIN_BIND_DN
          valueFrom:
            configMapKeyRef:
              key: ADMIN_BIND_DN
              name: pingdirectory-environment-variables
        - name: P1AS_PD_SYNC_BIND_DN
          valueFrom:
            configMapKeyRef:
              key: SYNC_BIND_DN
              name: pingdirectory-environment-variables
        - name: PINGDATASYNC_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PINGDATASYNC_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: pingdatasync-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingdatasync/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /opt/liveness.sh
          failureThreshold: 5
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingdatasync
        ports:
        - containerPort: 1389
          name: ldap
        - containerPort: 1636
          name: ldaps
        - containerPort: 1443
          name: https
        readinessProbe:
          exec:
            command:
            - /opt/readiness.sh
          failureThreshold: 5
          initialDelaySeconds: 90
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/secrets
          name: pingdatasync-passwords
          readOnly: true
        - mountPath: /opt/in/instance/conf/PingDirectory.lic
          name: pingdirectory-license
          subPath: PingDirectory.lic
      initContainers:
      - command:
        - /wait-for-pds.sh
        env:
        - name: P1AS_PD_LDAP_PORT
          valueFrom:
            configMapKeyRef:
              key: LDAP_PORT
              name: pingdirectory-environment-variables
        - name: P1AS_PD_LDAPS_PORT
          valueFrom:
            configMapKeyRef:
              key: LDAPS_PORT
              name: pingdirectory-environment-variables
        envFrom:
        - configMapRef:
            name: pingdatasync-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-pds
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingdatasync-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingdatasync-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-pds.sh
          name: pingdatasync-init
          subPath: wait-for-pds.sh
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingdatasync-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingdatasync-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingdatasync-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingdatasync-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingdatasync-init
          subPath: logger.lib.sh
      securityContext:
        fsGroup: 9999
      serviceAccountName: ping-serviceaccount
      terminationGracePeriodSeconds: 300
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingdatasync-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingdatasync-passwords
        secret:
          defaultMode: 288
          optional: true
          secretName: pingdatasync-passwords
      - name: pingdirectory-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingdirectory-license
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: ping-cloud
        role: pingdatasync
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: pingdatasync-gp3
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    class: pingdirectory-server
    role: pingdirectory
  name: pingdirectory
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  selector:
    matchLabels:
      app: ping-cloud
      class: pingdirectory-server
      role: pingdirectory
  serviceName: pingdirectory
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        class: pingdirectory-server
        entitled-app: "true"
        role: pingdirectory
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pingidentity.com/pd
                operator: In
                values:
                - "true"
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values:
                  - pingdirectory
              topologyKey: topology.kubernetes.io/zone
            weight: 1
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - pingdirectory
            topologyKey: kubernetes.io/hostname
      containers:
      - env:
        - name: P14C_ENVIRONMENT_ID
          valueFrom:
            secretKeyRef:
              key: P14C_ENVIRONMENT_ID
              name: pingdirectory-passwords
        - name: P14C_CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: P14C_CLIENT_ID
              name: pingdirectory-passwords
        - name: P14C_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: P14C_CLIENT_SECRET
              name: pingdirectory-passwords
        - name: ROOT_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: root-user-password
              name: pingdirectory-passwords
        - name: DMANAGER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: DMANAGER_PASSWORD
              name: pingdirectory-dmanager-password
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_LDAP_PASSWORD
              name: pingcommon-passwords
        - name: ACME_CERT_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ACME_CERT_KEYSTORE_PASSWORD
              name: pingcommon-passwords
        - name: DA_OAUTH_TOKEN_VALIDATOR_SECRET
          valueFrom:
            secretKeyRef:
              key: DA_OAUTH_TOKEN_VALIDATOR_SECRET
              name: pingcommon-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingdirectory/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - /opt/staging/hooks/86-pre-stop.sh
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/86-liveness.sh
          failureThreshold: 3
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingdirectory
        ports:
        - containerPort: 1389
          name: ldap
        - containerPort: 1636
          name: ldaps
        - containerPort: 1443
          name: https
        - containerPort: 8989
          name: repl
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/85-readiness.sh
          failureThreshold: 3
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            memory: 4Gi
          requests:
            cpu: "2"
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - echo 'Finished delaying PingDirectory by 180s using startupProbe'
          failureThreshold: 100
          initialDelaySeconds: 180
          periodSeconds: 5
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /opt/staging/topology.json
          name: data-dir
          subPath: topology.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /usr/local/secrets
          name: pingdirectory-passwords
          readOnly: true
        - mountPath: /usr/local/secrets/certs
          name: acme-tls-cert
          readOnly: true
        - mountPath: /opt/in/instance/PingDirectory.lic
          name: pingdirectory-license
          subPath: PingDirectory.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /usr/local/secrets/truststore_certs
          name: pingdirectory-truststore-certs
          readOnly: true
      - args:
        - --statsd.mapping-config=/tmp/mapping/pingdirectory-statsd-mapping.yml
        - --statsd.listen-udp=:8125
        - --web.listen-address=:9102
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/prom/statsd-exporter:v0.14.1
        name: pingdirectory-statsd-exporter
        ports:
        - containerPort: 9102
          protocol: TCP
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8125
          protocol: UDP
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /tmp/mapping/
          name: pingdirectory-statsd-mapping
          readOnly: false
      initContainers:
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingdirectory-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingdirectory-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingdirectory-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingdirectory-init
          subPath: logger.lib.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingdirectory
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      - command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingdirectory-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingdirectory-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingdirectory-init
          subPath: wait-for-services.sh
      - command:
        - sh
        - -c
        - echo "kms init container"
        envFrom:
        - configMapRef:
            name: pingdirectory-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingdirectory/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: kms-init-container
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /utils.lib.sh
          name: pingdirectory-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingdirectory-init
          subPath: logger.lib.sh
      securityContext:
        fsGroup: 9999
      serviceAccount: ping-serviceaccount
      terminationGracePeriodSeconds: 300
      tolerations:
      - effect: NoSchedule
        key: pingidentity.com/pd-only
        operator: Equal
        value: "true"
      volumes:
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingdirectory-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingdirectory-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingdirectory-license
      - name: pingdirectory-passwords
        secret:
          defaultMode: 256
          optional: true
          secretName: pingdirectory-passwords
      - name: acme-tls-cert
        secret:
          defaultMode: 256
          optional: true
          secretName: acme-tls-cert
      - configMap:
          name: pingdirectory-statsd-mapping
        name: pingdirectory-statsd-mapping
      - name: pingdirectory-truststore-certs
        secret:
          defaultMode: 256
          optional: true
          secretName: pingdirectory-truststore-certs
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: ping-cloud
        class: pingdirectory-server
        role: pingdirectory
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 40Gi
      storageClassName: pingdirectory-gp3
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingfederate-cluster
    role: pingfederate-engine
  name: pingfederate
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: ping-cloud
      role: pingfederate-engine
  serviceName: pingfederate
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingfederate-cluster
        pod-reaper: enabled
        role: pingfederate-engine
      name: pingfederate-engine
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: role
                  operator: In
                  values:
                  - pingfederate-engine
              topologyKey: topology.kubernetes.io/zone
            weight: 1
      containers:
      - env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: pingcloud-radsecproxy-environment-variables
        - configMapRef:
            name: pingfederate-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/grp-radiusproxy/dev:v1.19-release-branch-latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 2083
          timeoutSeconds: 3
        name: pingcloud-radsecproxy
        ports:
        - containerPort: 2083
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 2083
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 400m
            memory: 500Mi
          requests:
            cpu: 200m
            memory: 200Mi
        volumeMounts:
        - mountPath: /usr/local/secrets/certs
          name: acme-tls-cert
          readOnly: true
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_ENGINE
        - name: AUTHENTICATION_MODE
          value: none
        - name: PF_DNS_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_LDAP_PASSWORD
              name: pingcommon-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingfederate/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - sleep 5
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pf-engine-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingfederate
        ports:
        - containerPort: 9031
        - containerPort: 8080
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pf-engine-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 60
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 2
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/staging/native-s3-ping.jar
          name: data-dir
          subPath: native-s3-ping.jar
        - mountPath: /opt/in/instance/server/default/conf/pingfederate.lic
          name: pingfederate-license
          subPath: pingfederate.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /etc/podinfo
          name: podinfo
        - mountPath: /opt/staging/solutions_artifacts
          name: data-dir
          subPath: solutions_artifacts
      - env:
        - name: SERVICE_SHORTNAME
          value: pf
        - name: SERVICE_PORT
          value: "9031"
        - name: REPEAT_SEC
          value: "10"
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/prometheus-json-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingfederate-heartbeat-exporter
        ports:
        - containerPort: 8079
          name: pf-heartbeat
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/config.yml
          name: pf-exporter-config
          subPath: config.yml
      initContainers:
      - args:
        - while ! kubectl get secret $(SECRET_NAME); do echo "Waiting for secret $(SECRET_NAME).
          CTRL-C to exit."; sleep 5; done
        command:
        - /bin/sh
        - -c
        env:
        - name: WAIT_TIMEOUT_SEC
          value: "300"
        - name: JOB_NAME
          value: wait-for-tls-secret
        - name: SECRET_NAME
          value: acme-tls-cert
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        name: wait-for-tls-secret
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
      - command:
        - python3
        - -u
        - /app/pingfederate_p1_init.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingfederate-p14c-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/staging
          name: data-dir
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingfederate-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingfederate-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingfederate
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      - command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingfederate-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingfederate-init
          subPath: wait-for-services.sh
      securityContext:
        fsGroup: 9999
      serviceAccountName: pingcloud-radsecproxy-serviceaccount
      volumes:
      - name: acme-tls-cert
        secret:
          defaultMode: 256
          optional: true
          secretName: acme-tls-cert
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
          - fieldRef:
              fieldPath: metadata.annotations
            path: annotations
          - path: cpu_limit
            resourceFieldRef:
              containerName: pingfederate
              divisor: 1m
              resource: limits.cpu
          - path: cpu_request
            resourceFieldRef:
              containerName: pingfederate
              divisor: 1m
              resource: requests.cpu
        name: podinfo
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingfederate-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: pingfederate-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingfederate-license
      - configMap:
          defaultMode: 420
          name: pf-exporter-config
        name: pf-exporter-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ping-cloud
    cluster: pingfederate-cluster
    role: pingfederate-admin
  name: pingfederate-admin
  namespace: ping-cloud
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: ping-cloud
      role: pingfederate-admin
  serviceName: pingfederate-admin
  template:
    metadata:
      annotations:
        lastUpdateReason: NA
      labels:
        app: ping-cloud
        cluster: pingfederate-cluster
        entitled-app: "true"
        pod-reaper: enabled
        role: pingfederate-admin
      name: pingfederate-admin
    spec:
      containers:
      - env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: PF_DNS_PING_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PF_LDAP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_LDAP_PASSWORD
              name: pingcommon-passwords
        - name: PF_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PC_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PC_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        - name: PA_ADMIN_USER_USERNAME
          valueFrom:
            configMapKeyRef:
              key: PA_ADMIN_USER_USERNAME
              name: pingaccess-admin-environment-variables
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PA_ADMIN_USER_PASSWORD
              name: pingaccess-passwords
        - name: DA_OAUTH_TOKEN_VALIDATOR_SECRET
          valueFrom:
            secretKeyRef:
              key: DA_OAUTH_TOKEN_VALIDATOR_SECRET
              name: pingcommon-passwords
        - name: NEW_RELIC_CONFIG_FILE
          value: /opt/shared-dir/newrelic.yml
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingfederate/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /opt/staging/hooks/99-pf-admin-liveness.sh
          failureThreshold: 3
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 5
        name: pingfederate-admin
        ports:
        - containerPort: 9999
          name: pf-admin
        readinessProbe:
          exec:
            command:
            - /opt/staging/hooks/85-pf-admin-readiness.sh
          failureThreshold: 3
          initialDelaySeconds: 90
          periodSeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /home/ping/.ssh
          name: ssh-dir
        - mountPath: /opt/shared-dir
          name: shared-dir
        - mountPath: /opt/staging/topology/descriptor.json
          name: topology-descriptor
          subPath: descriptor.json
        - mountPath: /usr/local/bin/kubectl
          name: data-dir
          subPath: kubectl
        - mountPath: /opt/staging/hooks/logger.lib.sh
          name: data-dir
          subPath: logger.lib.sh
        - mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          name: data-dir
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - mountPath: /opt/staging/newrelic.jar
          name: data-dir
          subPath: newrelic.jar
        - mountPath: /opt/staging/native-s3-ping.jar
          name: data-dir
          subPath: native-s3-ping.jar
        - mountPath: /opt/out
          name: out-dir
        - mountPath: /opt/in/instance/server/default/conf/pingfederate.lic
          name: pingfederate-license
          subPath: pingfederate.lic
        - mountPath: /opt/staging/ds_env_vars
          name: data-dir
          subPath: ds_env_vars
        - mountPath: /opt/staging/p14c_env_vars
          name: data-dir
          subPath: p14c_env_vars
        - mountPath: /opt/staging/solutions_artifacts
          name: data-dir
          subPath: solutions_artifacts
        - mountPath: /etc/podinfo
          name: podinfo
      initContainers:
      - command:
        - python3
        - -u
        - /app/pingfederate_p1_init.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingfederate-p14c-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/staging
          name: data-dir
      - command:
        - /copy-dependencies.sh
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: pingfederate-init
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /.ssh
          name: ssh-dir
        - mountPath: /data
          name: data-dir
        - mountPath: /id_rsa
          name: ssh-id-key-secret
          subPath: id_rsa
        - mountPath: /known_hosts
          name: known-hosts-config
          subPath: known_hosts
        - mountPath: /copy-dependencies.sh
          name: pingfederate-init
          subPath: copy-dependencies.sh
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
      - env:
        - name: NEW_RELIC_APP_NAME
          value: pingfederate-admin
        - name: METADATA_EP_URL
          value: http://metadata:5000
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: /opt/shared-dir/newrelic.yml
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: newrelic-tags-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /opt/shared-dir
          name: shared-dir
      - command:
        - /wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - configMapRef:
            name: pingcommon-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingfederate-init
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingfederate-init
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingfederate-init
          subPath: wait-for-services.sh
      securityContext:
        fsGroup: 9999
      serviceAccountName: pingfederate-admin-serviceaccount
      volumes:
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
          - fieldRef:
              fieldPath: metadata.annotations
            path: annotations
          - path: cpu_limit
            resourceFieldRef:
              containerName: pingfederate-admin
              divisor: 1m
              resource: limits.cpu
          - path: cpu_request
            resourceFieldRef:
              containerName: pingfederate-admin
              divisor: 1m
              resource: requests.cpu
        name: podinfo
      - emptyDir: {}
        name: ssh-dir
      - emptyDir: {}
        name: shared-dir
      - emptyDir: {}
        name: data-dir
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingfederate-init
      - configMap:
          defaultMode: 420
          name: topology-descriptor
          optional: true
        name: topology-descriptor
      - name: ssh-id-key-secret
        secret:
          defaultMode: 256
          optional: true
          secretName: ssh-id-key-secret
      - configMap:
          defaultMode: 420
          name: known-hosts-config
          optional: true
        name: known-hosts-config
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingfederate-license
        secret:
          defaultMode: 256
          optional: true
          secretName: pingfederate-license
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: ping-cloud
      name: out-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: pingfederate-gp3
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: ping-cloud
  name: pa-engine-pdb
  namespace: ping-cloud
spec:
  minAvailable: 30%
  selector:
    matchLabels:
      app: ping-cloud
      role: pingaccess-engine
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: ping-cloud
  name: pa-was-engine-pdb
  namespace: ping-cloud
spec:
  minAvailable: 30%
  selector:
    matchLabels:
      app: ping-cloud
      role: pingaccess-was-engine
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pd-pdb
  namespace: ping-cloud
spec:
  minAvailable: 30%
  selector:
    matchLabels:
      app: ping-cloud
      class: pingdirectory-server
      role: pingdirectory
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: ping-cloud
  name: pf-engine-pdb
  namespace: ping-cloud
spec:
  minAvailable: 30%
  selector:
    matchLabels:
      app: ping-cloud
      role: pingfederate-engine
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: ping-cloud
  name: pingdelegator-pdb
  namespace: ping-cloud
spec:
  minAvailable: 30%
  selector:
    matchLabels:
      app: ping-cloud
      role: pingdelegator
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: ping-cloud
  name: pingaccess
  namespace: ping-cloud
spec:
  maxReplicas: 2
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: pingaccess
  targetCPUUtilizationPercentage: 70
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: ping-cloud
  name: pingaccess-was
  namespace: ping-cloud
spec:
  maxReplicas: 2
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: pingaccess-was
  targetCPUUtilizationPercentage: 70
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: ping-cloud
  name: pingfederate
  namespace: ping-cloud
spec:
  maxReplicas: 2
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: pingfederate
  targetCPUUtilizationPercentage: 70
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
  labels:
    app: ping-cloud
    role: p14c-oauth-service
  name: p14c-oauth-service
  namespace: ping-cloud
spec:
  template:
    metadata:
      labels:
        app: ping-cloud
        role: p14c-oauth-service
    spec:
      containers:
      - command:
        - python3
        - -u
        - /app/oauth_client_services_controller.py
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: p14c-oauth-service-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingcloud-oauth
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 300m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
      restartPolicy: Never
      serviceAccountName: p14c-oauth-serviceaccount
  ttlSecondsAfterFinished: 86400
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
  labels:
    app: ping-cloud
    role: pingone-configurator
  name: pingone-configurator
  namespace: ping-cloud
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
        app: ping-cloud
        role: pingone-configurator
    spec:
      containers:
      - env:
        - name: ENVIRONMENT_METADATA_JSON
          valueFrom:
            configMapKeyRef:
              key: information.json
              name: p14c-environment-metadata
              optional: true
        - name: IS_PINGONE
          valueFrom:
            configMapKeyRef:
              key: P1
              name: is-pingone
              optional: true
        - name: PF_USERNAME
          value: Administrator
        - name: PF_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PF_ADMIN_USER_PASSWORD
              name: pingcommon-passwords
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        - secretRef:
            name: p14c-bootstrap-secret
        image: public.ecr.aws/r2h3l6e4/pingcloud-solutions/ansible-beluga/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: pingone-configurator
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 300m
            memory: 256Mi
      initContainers:
      - command:
        - /wait-for-services.sh
        env:
        - name: WAIT_FOR_SERVICES
          value: pingfederate-cluster
        envFrom:
        - configMapRef:
            name: pingfederate-admin-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.32
        imagePullPolicy: IfNotPresent
        name: wait-for-services
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /utils.lib.sh
          name: pingone-config
          subPath: utils.lib.sh
        - mountPath: /logger.lib.sh
          name: pingone-config
          subPath: logger.lib.sh
        - mountPath: /wait-for-services.sh
          name: pingone-config
          subPath: wait-for-services.sh
      restartPolicy: Never
      serviceAccount: p1-config-serviceaccount
      volumes:
      - configMap:
          defaultMode: 365
          name: pingcommon-init
        name: pingone-config
  ttlSecondsAfterFinished: 86400
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  name: pingaccess-admin-ext-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: ext-pingaccess-admin-api.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-admin
            port:
              number: 9000
        path: /pa-admin-api/
        pathType: Prefix
  tls:
  - hosts:
    - ext-pingaccess-admin-api.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingaccess-admin-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-private
  rules:
  - host: pingaccess-admin-api-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-admin
            port:
              number: 9000
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingaccess-admin-api-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingaccess-agent-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: pingaccess-agent-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess
            port:
              number: 3030
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingaccess-agent-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingaccess-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: pingaccess-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: healthcheck-httpbin-pa-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess
            port:
              number: 443
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingaccess-dev.ping-demo.com
    - healthcheck-httpbin-pa-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  name: pingaccess-was-admin-ext-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: ext-pingaccess-was-admin.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was-admin
            port:
              number: 9000
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - ext-pingaccess-was-admin.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingaccess-was-admin-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-private
  rules:
  - host: pingaccess-was-admin-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was-admin
            port:
              number: 9000
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingaccess-was-admin-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      Include /etc/nginx/owasp-modsecurity-crs/nginx-modsecurity.conf
      SecRuleEngine DetectionOnly
      SecRequestBodyAccess On
      SecAuditEngine RelevantOnly
      SecAuditLogParts ABCDEFGHIJKZ
      SecAuditLogType Serial
      SecAuditLogFormat JSON
      SecAuditLog /dev/stdout
  labels:
    app: ping-cloud
  name: pingaccess-was-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: pingaccess-admin-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: pingfederate-admin-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: monitoring-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: prometheus-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: logs-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: pingcentral-admin-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: healthcheck-httpbin-pa-was-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  - host: argocd-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingaccess-was
            port:
              number: 443
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingaccess-admin-dev.ping-demo.com
    - pingfederate-admin-dev.ping-demo.com
    - monitoring-dev.ping-demo.com
    - prometheus-dev.ping-demo.com
    - logs-dev.ping-demo.com
    - pingcentral-admin-dev.ping-demo.com
    - healthcheck-httpbin-pa-was-dev.ping-demo.com
    - argocd-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  name: pingdelegator-ext-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: ext-pingdelegator.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingdelegator
            port:
              number: 1443
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - ext-pingdelegator.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingdelegator-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-private
  rules:
  - host: pingdelegator-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingdelegator
            port:
              number: 1443
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingdelegator-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  name: pingdirectory-http-ext-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: ext-pingdirectory.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingdirectory-http
            port:
              number: 1443
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - ext-pingdirectory.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
    role: pingdirectory
  name: pingdirectory-http-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-private
  rules:
  - host: pingdirectory-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingdirectory-http
            port:
              number: 1443
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingdirectory-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  name: pingfederate-admin-ext-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: ext-pingfederate-admin-api.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingfederate-admin
            port:
              number: 9999
        path: /pf-admin-api/
        pathType: Prefix
  tls:
  - hosts:
    - ext-pingfederate-admin-api.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingfederate-admin-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-private
  rules:
  - host: pingfederate-admin-api-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingfederate-admin
            port:
              name: pf-admin
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingfederate-admin-api-dev.ping-demo.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: ping-cloud
  name: pingfederate-ingress
  namespace: ping-cloud
spec:
  ingressClassName: nginx-public
  rules:
  - host: pingfederate-dev.ping-demo.com
    http:
      paths:
      - backend:
          service:
            name: pingfederate
            port:
              number: 9031
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pingfederate-dev.ping-demo.com
---
apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
  labels:
    app: ping-cloud
  name: pf-provisioning
  namespace: postgres-operator
spec:
  backups:
    pgbackrest:
      global:
        repo1-path: /pingfederate/provisioning
        repo1-retention-full: "256"
      image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/crunchydata/crunchy-pgbackrest:ubi8-2.41-4
      jobs:
        ttlSecondsAfterFinished: 60
      manual:
        options:
        - --type=full
        repoName: repo1
      repos:
      - name: repo1
      restore:
        enabled: true
        options:
        - --type=default
        repoName: repo1
  image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/crunchydata/crunchy-postgres:ubi8-14.7-0
  instances:
  - affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: role
                operator: In
                values:
                - pf-provisioning
            topologyKey: topology.kubernetes.io/zone
          weight: 1
    dataVolumeClaimSpec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: pgo-gp3
    minAvailable: 1
    name: instance1
    replicas: 3
    resources:
      limits:
        cpu: 2
        memory: 4Gi
      requests:
        cpu: 2
        memory: 2Gi
  metadata:
    labels:
      role: pf-provisioning
  monitoring:
    pgmonitor:
      exporter:
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/crunchydata/crunchy-postgres-exporter:ubi8-5.3.1-0
  postgresVersion: 14
  users:
  - databases:
    - pf-provisioning
    name: pf-service
  - databases:
    - pf-provisioning
    name: ping-beluga-ops
    options: SUPERUSER
