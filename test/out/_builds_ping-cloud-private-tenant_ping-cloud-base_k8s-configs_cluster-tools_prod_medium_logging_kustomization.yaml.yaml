apiVersion: v1
kind: Namespace
metadata:
  name: elastic-stack-logging
---
allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app: opensearch
  name: opensearch-sc1
mountOptions:
- discard
parameters:
  csi.storage.k8s.io/fstype: ext4
  encrypted: "true"
  type: sc1
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: enrichment
  name: enrichment
  namespace: elastic-stack-logging
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
  namespace: elastic-stack-logging
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: logstash-elastic
  name: logstash-elastic
  namespace: elastic-stack-logging
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opensearch
  namespace: elastic-stack-logging
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: opensearch-dashboards
  name: opensearch-dashboards
  namespace: elastic-stack-logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: enrichment
  name: enrichment
  namespace: elastic-stack-logging
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - update
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: opensearch-cluster-master
  namespace: elastic-stack-logging
rules:
- apiGroups:
  - extensions
  resourceNames:
  - opensearch-cluster-master
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: enrichment
  name: enrichment
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
  - create
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - create
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit-role
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - namespaces
  - pods
  - pods/logs
  - nodes
  - nodes/proxy
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: logstash-elastic
  name: logstash-elastic
rules:
- apiGroups:
  - ""
  - batch
  resources:
  - pods
  - namespaces
  - jobs
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: enrichment
  name: enrichment
  namespace: elastic-stack-logging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: enrichment
subjects:
- kind: ServiceAccount
  name: enrichment
  namespace: elastic-stack-logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: opensearch-cluster-master
  namespace: elastic-stack-logging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: opensearch-cluster-master
subjects:
- kind: ServiceAccount
  name: opensearch
  namespace: elastic-stack-logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: opensearch-dashboards
  name: opensearch-dashboards-rolebinding
  namespace: elastic-stack-logging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: opensearch-dashboards
subjects:
- kind: ServiceAccount
  name: opensearch-dashboards
  namespace: elastic-stack-logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: enrichment
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: enrichment
subjects:
- kind: ServiceAccount
  name: enrichment
  namespace: elastic-stack-logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluent-bit-role
subjects:
- kind: ServiceAccount
  name: fluent-bit
  namespace: elastic-stack-logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: logstash-elastic
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: logstash-elastic
subjects:
- kind: ServiceAccount
  name: logstash-elastic
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  cluster.name: cluster_name
  log.level: error
  logs.region: region_name
  newrelic_cluster_name: cluster_name
  primary_tenant_domain: tenant_domain
  read.head: "True"
  read.tail: "Off"
  tenant_domain: tenant_domain
kind: ConfigMap
metadata:
  name: cluster-info
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  LOG_LEVEL: warn
kind: ConfigMap
metadata:
  name: elk-environment-variables-dfk4bdbtkk
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  AlienVaultIP.yml: |
    "": "YES"
  KnownCountries.yml: |
    "United States": "YES"
    "Canada": "YES"
  MaliciousCountries.yml: |
    "Turkey": "YES"
    "Iran": "YES"
    "Iraq": "YES"
    "North Korea": "YES"
    "Ukraine": "YES"
  TorNodes.yml: |
    "": "YES"
kind: ConfigMap
metadata:
  name: enrichment-cache
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  fluent-bit.conf: |-
    [SERVICE]
        Flush                     1
        Daemon                    off
        Parsers_File              parsers.conf
        storage.path              /fluent-bit/state/flb-storage/
        storage.sync              normal
        storage.checksum          off
        storage.backlog.mem_limit 50M
        storage.max_chunks_up     256
        storage.metrics           on
        HTTP_Server  On
        HTTP_Listen  0.0.0.0
        HTTP_Port    2020
        Health_Check On

    @INCLUDE pipelines_*.conf
kind: ConfigMap
metadata:
  labels:
    k8s-app: fluent-bit
  name: fluent-bit-config-gbbk7dtckh
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  parsers.conf: |
    [PARSER]
        Name                docker
        Format              json
        Time_Key            time
        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ

    [PARSER]
        Name                dmesg
        Format              regex
        Regex               ^\[.*?\](?<log>.*)$

    [PARSER]
        Name                syslog
        Format              regex
        Regex               ^(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<log>.*)$
        Time_Key            time
        Time_Format         %b %d %H:%M:%S

    [PARSER]
        Name                container_firstline
        Format              regex
        Regex               (?<log>(?<="log":")\S(?!\.).*?)(?<!\\)".*(?<stream>(?<="stream":").*?)".*(?<time>\d{4}-\d{1,2}-\d{1,2}T\d{2}:\d{2}:\d{2}\.\w*).*(?=})
        Time_Key            time
        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ

    [PARSER]
        Name                cwagent_firstline
        Format              regex
        Regex               (?<log>(?<="log":")\d{4}[\/-]\d{1,2}[\/-]\d{1,2}[ T]\d{2}:\d{2}:\d{2}(?!\.).*?)(?<!\\)".*(?<stream>(?<="stream":").*?)".*(?<time>\d{4}-\d{1,2}-\d{1,2}T\d{2}:\d{2}:\d{2}\.\w*).*(?=})
        Time_Key            time
        Time_Format         %Y-%m-%dT%H:%M:%S.%LZ

    [MULTILINE_PARSER]
        Name multiline_system_log
        type regex
        parser json
        key_content log
        flush_timeout 500

        rule "start_state" "/^(\/.*\/log[s]?\/\w+(\.log)?)( \d{4}-\d{2}-\d{2}[T ]?\d{2}:\d{2}:\d{2}(,\d{3})?)\s+(\w+[: ]{1,2})(.*)/" "cont"
        rule "cont" "/^((?!INFO|WARN|ERROR|DEBUG|(admin-api|audit|jvm-garbage-collection|provisioner-audit|provisioner|request(2?)|transaction)\.log).)*$/" "cont"
kind: ConfigMap
metadata:
  labels:
    k8s-app: fluent-bit
  name: fluent-bit-parsers-9kt7db5k5c
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  customer.conf: |
    # Inputs

    [INPUT]
        Name                tail
        Tag                 customer.kube.general.*
        Path                /var/log/containers/*_ingress-nginx-*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_customer_ingress.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        Mem_Buf_Limit       200MB
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 customer.kube.general.*
        Path                /var/log/containers/*_ping-cloud_*.log
        Exclude_Path        /var/log/containers/p14c-*.log, *pingcloud-metadata*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_customer_ping.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        Mem_Buf_Limit       200MB
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 customer.kube.general.*
        Path                /var/log/containers/*_postgres-operator_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_customer_postgres.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        Mem_Buf_Limit       20MB
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    # Filters

    [FILTER]
        Name                  multiline
        match                 customer.kube.*_ping-cloud_*
        multiline.key_content log
        buffer                true
        flush_ms              500
        emitter_name          customer.multiline
        emitter_storage.type  filesystem
        emitter_mem_buf_limit 100M
        multiline.parser      multiline_system_log

    [FILTER]
        Name                kubernetes
        Match               customer.kube.general.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_Tag_Prefix     customer.kube.general.var.log.containers.
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Annotations         Off
        Labels              On
        Buffer_Size         50Mb
        Cache_Use_Docker_Id On
        Kube_Meta_Cache_TTL 1800

    # Output
    [OUTPUT]
        Name                http
        Alias               logstash_out
        Match               customer.kube.*
        Host                logstash-elastic.elastic-stack-logging
        Port                8084
        Format              json
        Workers             5
        Retry_Limit         False
        compress            gzip
        net.keepalive_idle_timeout  10
        net.keepalive_max_recycle   100
        storage.total_limit_size    1000M
kind: ConfigMap
metadata:
  labels:
    k8s-app: fluent-bit
  name: fluent-bit-pipeline-customer-h29h8f4cfh
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  cw.conf: |
    # Kubernetes inputs
    [INPUT]
        Name                tail
        Tag                 cw.kube.*
        Path                /var/log/containers/*_argo-events_*.log, /var/log/containers/*_argocd*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_cw_argo.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 cw.kube.*
        Path                /var/log/containers/*_cert-manager_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_cw_cert.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 cw.kube.*
        Path                /var/log/containers/*_elastic-stack-logging_*.log
        Exclude_Path        *bootstrap*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_cw_elastic.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 cw.kube.*
        Path                /var/log/containers/*_external-dns_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_cw_dns.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 cw.kube.*
        Path                /var/log/containers/*_kube-system_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_cw_system.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 cw.kube.*
        Path                /var/log/containers/p14c-*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_cw_p14c.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 cw.kube.*
        Path                /var/log/containers/*_pod-reaper_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_cw_reaper.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 cw.kube.*
        Path                /var/log/containers/*alertmanager*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_cw_alertmanager.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 cw.kube.*
        Path                /var/log/containers/*_karpenter_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_cw_karpenter.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    # Node log inputs
    [INPUT]
        Name                tail
        Tag                 cw.host.dmesg
        Path                /var/log/dmesg
        Parser              dmesg
        DB                  /fluent-bit/state/flb_cw_dmesg.db
        Mem_Buf_Limit       10MB
        Skip_Long_Lines     On
        Refresh_Interval    10
        Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
        Name                tail
        Tag                 cw.host.messages
        Path                /var/log/messages
        Parser              syslog
        DB                  /fluent-bit/state/flb_cw_messages.db
        Mem_Buf_Limit       10MB
        Skip_Long_Lines     On
        Refresh_Interval    10
        Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
        Name                tail
        Tag                 cw.host.secure
        Path                /var/log/secure
        Parser              syslog
        DB                  /fluent-bit/state/flb_cw_secure.db
        Mem_Buf_Limit       10MB
        Skip_Long_Lines     On
        Refresh_Interval    10
        Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
        Name                systemd
        Tag                 cw.dataplane.systemd.*
        Systemd_Filter      _SYSTEMD_UNIT=kubelet.service
        DB                  /fluent-bit/state/flb_cw_systemd.db
        Path                /var/log/journal
        Read_From_Tail      ${READ_FROM_TAIL}

    # Kubernetes filters
    [FILTER]
        Name                kubernetes
        Match               cw.kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_Tag_Prefix     cw.kube.var.log.containers.
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Annotations         Off
        Labels              Off
        Buffer_Size         1Mb
        Cache_Use_Docker_Id On
        Kube_Meta_Cache_TTL 1800

    # Node logs filters

    [FILTER]
        Name                modify
        Match               cw.dataplane.systemd.*
        Rename              _HOSTNAME                   hostname
        Rename              _SYSTEMD_UNIT               systemd_unit
        Rename              MESSAGE                     log
        Remove_regex        ^((?!hostname|systemd_unit|log).)*$

    [FILTER]
        Name                aws
        Match               cw.dataplane.*
        imds_version        v2

    [FILTER]
        Name                aws
        Match               cw.host.*
        private_ip          true
        imds_version        v2
        hostname            true

    [FILTER]
        Name                modify
        Match               cw.host.dmesg
        Add                 log_name                    dmesg

    [FILTER]
        Name                modify
        Match               cw.host.messages
        Add                 log_name                    messages

    [FILTER]
        Name                modify
        Match               cw.host.secure
        Add                 log_name                    secure

    # Outputs

    [OUTPUT]
        Name                http
        Alias               cw
        Match               cw.*
        Host                logstash-elastic.elastic-stack-logging
        Port                8082
        Format              json
        Retry_Limit         False
        compress            gzip
        net.keepalive_idle_timeout  10
        net.keepalive_max_recycle   100
kind: ConfigMap
metadata:
  labels:
    k8s-app: fluent-bit
  name: fluent-bit-pipeline-cw-k65k95kkfc
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  elk.conf: |
    # Inputs

    [INPUT]
        Name                tail
        Tag                 elk.kube.general.*
        Path                /var/log/containers/*_health*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_elk_health.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        Mem_Buf_Limit       20MB
        storage.type        filesystem
        storage.pause_on_chunks_overlimit on
        Read_from_Head      ${READ_FROM_HEAD}


    [INPUT]
        Name                tail
        Tag                 elk.kube.general.*
        Path                /var/log/containers/*_ingress-nginx-*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_elk_ingress.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        Mem_Buf_Limit       200MB
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 elk.kube.general.*
        Path                /var/log/containers/*_ping-cloud_*.log
        Exclude_Path        /var/log/containers/p14c-*.log, *pingcloud-metadata*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_elk_ping.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        Mem_Buf_Limit       200MB
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 elk.kube.general.*
        Path                /var/log/containers/*_postgres-operator_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_elk_postgres.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        Mem_Buf_Limit       20MB
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    # Filters

    [FILTER]
        Name                  multiline
        match                 elk.kube.*_ping-cloud_*
        multiline.key_content log
        buffer                true
        flush_ms              500
        emitter_name          elk.multiline
        emitter_storage.type  filesystem
        emitter_mem_buf_limit 100M
        multiline.parser      multiline_system_log

    [FILTER]
        Name                kubernetes
        Match               elk.kube.general.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_Tag_Prefix     elk.kube.general.var.log.containers.
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Annotations         Off
        Labels              On
        Buffer_Size         50Mb
        Cache_Use_Docker_Id On
        Kube_Meta_Cache_TTL 1800

    # Output
    [OUTPUT]
        Name                http
        Alias               logstash_out
        Match               elk.kube.*
        Host                logstash-elastic.elastic-stack-logging
        Port                8080
        Format              json
        Workers             5
        Retry_Limit         False
        compress            gzip
        net.keepalive_idle_timeout  10
        net.keepalive_max_recycle   100
        storage.total_limit_size    1000M
kind: ConfigMap
metadata:
  labels:
    k8s-app: fluent-bit
  name: fluent-bit-pipeline-elk-gtmf85g8k8
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  nr.conf: |
    # Kubernetes inputs
    [INPUT]
        Name                tail
        Tag                 nr.kube.*
        Path                /var/log/containers/*_external-dns_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_nr_dns.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 nr.kube.*
        Path                /var/log/containers/*_kube-system_*.log
        Exclude_Path        *kube-proxy*.log, *sealed-secrets-controller*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_nr_system.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    # Node log inputs
    [INPUT]
        Name                tail
        Tag                 nr.host.dmesg
        Path                /var/log/dmesg
        Parser              dmesg
        DB                  /fluent-bit/state/flb_nr_dmesg.db
        Mem_Buf_Limit       10MB
        Skip_Long_Lines     On
        Refresh_Interval    10
        Read_from_Head      ${READ_FROM_HEAD}


    [INPUT]
        Name                tail
        Tag                 nr.host.messages
        Path                /var/log/messages
        Parser              syslog
        DB                  /fluent-bit/state/flb_nr_messages.db
        Mem_Buf_Limit       10MB
        Skip_Long_Lines     On
        Refresh_Interval    10
        Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
        Name                tail
        Tag                 nr.host.secure
        Path                /var/log/secure
        Parser              syslog
        DB                  /fluent-bit/state/flb_nr_secure.db
        Mem_Buf_Limit       10MB
        Skip_Long_Lines     On
        Refresh_Interval    10
        Read_from_Head      ${READ_FROM_HEAD}

    # Kubernetes filters

    [FILTER]
        Name           kubernetes
        Match          nr.kube.*
        Kube_URL       https://kubernetes.default.svc:443
        Kube_Tag_Prefix nr.kube.var.log.containers.
        Buffer_Size    32k
        K8S-Logging.Exclude Off
        Labels         Off
        Annotations    Off
        Cache_Use_Docker_Id On
        Kube_Meta_Cache_TTL 1800

    [FILTER]
        Name           nest
        Match          nr.kube.*
        Operation      lift
        Nested_under   kubernetes

    [FILTER]
        Name           record_modifier
        Match          nr.kube.*
        Record         cluster_name ${NR_CLUSTER_NAME}
        Allowlist_key  container_name
        Allowlist_key  namespace_name
        Allowlist_key  pod_name
        Allowlist_key  stream
        Allowlist_key  message
        Allowlist_key  log

    # Node log filters

    [FILTER]
        Name                aws
        Match               nr.dataplane.*
        imds_version        v2

    [FILTER]
        Name                record_modifier
        Match               nr.dataplane.*
        Record              cluster_name ${NR_CLUSTER_NAME}

    [FILTER]
        Name                aws
        Match               nr.host.*
        private_ip          true
        imds_version        v2
        hostname            true

    [FILTER]
        Name                record_modifier
        Match               nr.host.*
        Record              cluster_name ${NR_CLUSTER_NAME}

    # Output

    [OUTPUT]
        Name                http
        Alias               nr_out
        Match               nr.*
        Host                logstash-elastic.elastic-stack-logging
        Port                8083
        Format              json
        Retry_Limit         False
        compress            gzip
        net.keepalive_idle_timeout  10
        net.keepalive_max_recycle   100
kind: ConfigMap
metadata:
  labels:
    k8s-app: fluent-bit
  name: fluent-bit-pipeline-nr-ff7c55h5fb
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  s3.conf: |
    # Inputs

    [INPUT]
        Name                tail
        Tag                 s3.kube.*
        Path                /var/log/containers/*_amazon-cloudwatch_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_s3_cw.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        Read_from_Head      ${READ_FROM_HEAD}
        storage.pause_on_chunks_overlimit on

    [INPUT]
        Name                tail
        Tag                 s3.kube.*
        Path                /var/log/containers/*_health*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_s3_health.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        storage.pause_on_chunks_overlimit on
        Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
        Name                tail
        Tag                 s3.kube.*
        Path                /var/log/containers/*_ingress-nginx-*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_s3_ingress.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        storage.pause_on_chunks_overlimit on
        Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
        Name                tail
        Tag                 s3.kube.*
        Path                /var/log/containers/*_ping-cloud_*.log
        Exclude_Path        /var/log/containers/p14c-*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_s3_ping.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        Mem_Buf_Limit       200MB
        storage.type        filesystem
        storage.pause_on_chunks_overlimit on
        Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
        Name                tail
        Tag                 s3.kube.*
        Path                /var/log/containers/*_postgres-operator_*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_s3_postgres.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        storage.pause_on_chunks_overlimit on
        Read_from_Head      ${READ_FROM_HEAD}

    [INPUT]
        Name                tail
        Tag                 s3.kube.*
        Path                /var/log/containers/*_prometheus_*.log
        Exclude_Path        *alertmanager*.log
        multiline.parser    docker, cri
        DB                  /fluent-bit/state/flb_s3_prometheus.db
        Skip_Long_Lines     Off
        Refresh_Interval    10
        Rotate_Wait         30
        storage.type        filesystem
        storage.pause_on_chunks_overlimit on
        Read_from_Head      ${READ_FROM_HEAD}

    # Filters

    [FILTER]
        Name                  multiline
        match                 s3.kube.*_ping-cloud_*
        multiline.key_content log
        buffer                true
        flush_ms              500
        emitter_name          s3.multiline
        emitter_storage.type  filesystem
        emitter_mem_buf_limit 500M
        multiline.parser      multiline_system_log

    [FILTER]
        Name                kubernetes
        Match               s3.kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_Tag_Prefix     s3.kube.var.log.containers.
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Annotations         Off
        Labels              On
        Buffer_Size         50Mb
        Cache_Use_Docker_Id On
        Kube_Meta_Cache_TTL 1800
        Use_Kubelet         On


    # Output

    [OUTPUT]
        Name                http
        Alias               s3_app_out
        Match               s3.kube.*
        Host                logstash-elastic.elastic-stack-logging
        Port                8081
        Format              json
        Retry_Limit         False
        compress            gzip
        net.keepalive_idle_timeout  10
        net.keepalive_max_recycle   100
kind: ConfigMap
metadata:
  labels:
    k8s-app: fluent-bit
  name: fluent-bit-pipeline-s3-5k42bb26bf
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  REGION: ${REGION}
  SERVICE_SSM_PATH_PREFIX: /pcpt/service
kind: ConfigMap
metadata:
  name: logging-bootstrap-environment-variables
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  logging-bootstrap-resources.yaml: |
    storage/efs/uri:
      kind: StorageClass
      name: efs
      template:
      values_container_key: efsId
      ssm_type: string
      ssm_path_prefix: SERVICE_SSM_PATH_PREFIX
    storage/raw-logs/uri:
      kind: ConfigMap
      name: s3-raw-logs-bucket
      template:
      values_container_key: bucketName
      ssm_type: string
      ssm_path_prefix: SERVICE_SSM_PATH_PREFIX
kind: ConfigMap
metadata:
  name: logging-bootstrap-resources
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  01-input.conf: "input {\n  http {\n    port => 8084\n    add_field => { \"cluster_name\"
    => \"${CLUSTER_NAME}\" }\n    threads => 5\n    id => \"customer_in\"\n  }\n}\n###
    Remove unneeded fields came from fluent-bit\nfilter {\n\tmutate {\n\t    remove_field
    => [\"date\", \"headers\", \"time\"]\n\t}\n}"
  02-filters.conf: filter {}
  99-outputs.conf: output { }
kind: ConfigMap
metadata:
  name: logstash-pipeline-customer-97tc4thm7t
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  cloudwatch.conf: "input {\n  http {\n    port => 8082\n    id => \"cw_in\"\n  }\n}\nfilter
    {\n\t### Remove unneeded fields came from fluent-bit\n  mutate {\n          remove_field
    => [ \"headers\",\"host\",\"date\"]\n      }\n\n  if [kubernetes] {\n  ### Add
    temp field to specify correct stream name\n    mutate {\n        add_field =>
    { \"[@metadata][stream_name]\" => \"%{[kubernetes][pod_name]}_%{[kubernetes][namespace_name]}_%{[kubernetes][container_name]}\"
    }\n      }\n  }\n### Add temp field to have the correct host value in log\n  if
    [private_ip] {\n    mutate {\n        add_field => { \"[@metadata][transf_host]\"
    => \"%{private_ip}\" }\n      }\n    mutate {\n        gsub => [ \"[@metadata][transf_host]\",
    \"\\.\", \"-\" ]\n        add_field => { \"host\" => \"ip-%{[@metadata][transf_host]}\"
    }\n      }\n  }      \n}\noutput {\n  if [kubernetes] {\n    awslogs {\n        region
    => \"${AWS_REGION}\"\n        log_group_name => \"/aws/containerinsights/${CW_CLUSTER_NAME}/application\"\n
    \       log_stream_name => \"%{[@metadata][stream_name]}\"\n        id => \"cw_app_out\"\n
    \     }\n  }\n  if [log_name] {\n    awslogs {\n        region => \"${AWS_REGION}\"\n
    \       log_group_name => \"/aws/containerinsights/${CW_CLUSTER_NAME}/host\"\n
    \       log_stream_name => \"%{log_name}-%{host}\"\n        id => \"cw_host_out\"\n
    \     }\n  }\n  if [systemd_unit] {\n    awslogs {\n        region => \"${AWS_REGION}\"\n
    \       log_group_name => \"/aws/containerinsights/${CW_CLUSTER_NAME}/dataplane\"\n
    \       log_stream_name => \"%{systemd_unit}-%{hostname}\"\n        id => \"cw_data_out\"\n
    \     }\n  }    \n}"
kind: ConfigMap
metadata:
  name: logstash-pipeline-cw-8chtm622kh
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  01-input.conf: "input {\n\tdead_letter_queue {\n\t    path => \"/usr/share/logstash/data/queue/dead_letter\"\n\t
    \   clean_consumed => true\n\t    commit_offsets => true\n\t    add_field => {\"DLQ\"
    => \"true\"}\n\t}\n}"
  02-filters.conf: filter {}
  99-outputs.conf: "output {\n\topensearch {\n\t\tid => \"OS_logstash_index\"\n\t\thosts
    => [\"https://opensearch-cluster-master.elastic-stack-logging.svc.cluster.local:9200\"]\n\t\tuser
    => \"${OS_USER}\"\n\t\tpassword => \"${OS_PASSWORD}\"\n\t\tssl => true\n\t\tssl_certificate_verification
    => false\n\t\tsniffing => false\n\t\tindex => \"logstash-%{+YYYY.MM.dd}\"\n\t}\n}"
kind: ConfigMap
metadata:
  name: logstash-pipeline-dlq-t7c6c88tfg
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  01-input.conf: |
    input {
      http {
        port => 8080
        add_field => { "cluster_name" => "${CLUSTER_NAME}" }
        id => 'main_in'
        threads => 10
      }
    }
  02-input-filters.conf: "filter {\n  ### Filter to not store logstash healthchecks\n
    \ ### Logstash will still return '200 OK' when readinessProbe tries to request
    the port,\n  ### but this request will not be stored anywhere\n  if ([headers][request_method]
    == \"GET\")\n  {\n    drop {}\n  }\n  ### Remove unneded fields coming from fluent-bit\n
    \ mutate {\n    remove_field => [\"date\", \"headers\", \"time\", \"_p\"]\n  }\n
    \ ### Fix ES\\OS issue with parsing dots in field names as nested objects\n  de_dot
    {\n    fields => [\"[kubernetes][labels][app.kubernetes.io]\",\n\t\t\t    \"[kubernetes][labels][app.kubernetes.io/name]\",\n\t\t\t
    \   \"[kubernetes][labels][app.kubernetes.io/version]\",\n\t\t\t    \"[kubernetes][labels][app.kubernetes.io/part-of]\",\n\t\t\t
    \   \"[kubernetes][labels][app.kubernetes.io/role]\",\n\t\t\t    \"[kubernetes][labels][app.kubernetes.io/component]\",\n\t\t\t
    \   \"[kubernetes][labels][app.kubernetes.io/instance]\",\n\t\t\t    \"[kubernetes][labels][statefulset.kubernetes.io/pod-name]\"\n
    \           ]\n  }\n  ### Backup jobs logs goes to separate index without parsing\n
    \ if ([kubernetes][pod_name] =~ \".*backup.*\" or [kubernetes][pod_name] =~ \".*repo1.*\")
    {\n      mutate {\n        rename => {\"log\" => \"message\"}\n        add_field
    => { \"[@metadata][index]\" => \"backup-jobs\"}\n      }\n  }\n  ### Healthchecks
    logs goes to separate index without parsing\n  else if ([kubernetes][pod_name]
    =~ \".*healthcheck.*\") {\n      mutate {\n        add_field => { \"[@metadata][index]\"
    => \"healthchecks\"}\n        rename => {\"log\" => \"message\"}\n      }\n  }\n}\n"
  03-ingress-filters.conf: |-
    filter {
      if ([kubernetes][container_name] == "nginx-ingress-controller"){
      ### Parsing for Nginx access logs
        if ([stream] == "stdout") {
          grok {
            match => {
              "log" => [ "%{IPORHOST:[nginx][access][remote_ip]} - %{USER:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{URIPATH:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \"(?:-|%{URI:[nginx][access][referrer]})\" \"%{DATA:[nginx][access][agent]}\" %{NUMBER:[nginx][access][request_length]} %{NUMBER:[nginx][access][request_time]} \[%{NOTSPACE:[nginx][access][proxy_upstream_name]}\] \[\] (?:-|%{HOSTPORT:[nginx][access][upstream_addr]}) %{NOTSPACE:[nginx][access][upstream_response_length]} %{NOTSPACE:[nginx][access][upstream_response_time]} %{NOTSPACE:[nginx][access][upstream_response_code]} %{NOTSPACE:[nginx][access][req_id]}" ]
            }
            remove_field => ["log"]
            add_field => {"[@metadata][index]" => "ingress-access"}
          }
          date {
            match => [ "[nginx][access][time]", "dd/MMM/YYYY:H:m:s Z" ]
            remove_field => "[nginx][access][time]"
          }
          useragent {
            source => "[nginx][access][agent]"
            target => "[nginx][access][user_agent]"
            remove_field => "[nginx][access][agent]"
          }
          geoip {
            source => "[nginx][access][remote_ip]"
            target => "[nginx][access][geoip]"
          }
          mutate {
            gsub => ["[nginx][access][upstream_response_length]", "-", "0"]
          }
        }
        else if ([stream] == "stderr") {
        ### Parsing for Nginx error log
          if ([log] =~ /^[\d\/: ]+\[.+?\]/) {
            grok {
              match => { "log" => ["%{DATA:[nginx][error][time]} \[%{WORD:[nginx][error][level]}\] %{NUMBER:[nginx][error][pid]}#%{NUMBER:[nginx][error][tid]}: (\*%{NUMBER:[nginx][error][connection_id]} )?%{GREEDYDATA:[nginx][error][message]}"] }
              remove_field => ["log"]
              add_field => {"[@metadata][index]" => "ingress-error"}
            }
            date {
              match => [ "[nginx][error][time]", "YYYY/MM/dd H:m:s" ]
              remove_field => "[nginx][error][time]"
            }
          }
          ### Parsing for go Nginx-controller error log
          else if ([log] =~ /^\w{5} [\d:\.]{15}.[ \t]+.*?\]/) {
            grok {
              match => { "log" => ["[A-Z]%{DATA:timestamp} [ \t]+%{DATA}\:%{NUMBER}\] %{GREEDYDATA:[nginx][error][message]}"]}
              remove_field => ["log"]
              add_field => {"[@metadata][index]" => "ingress-error"}
            }
            date {
              match => ["timestamp", "MMdd HH:mm:ss.SSSSSS"]
              remove_field => ["timestamp"]
            }
          }
        }
      }
    }
  04-pa-filters.conf: |-
    filter {
        if ([kubernetes][container_name] =~ "pingaccess(-was)?(-admin)?") {
            ### Parse only logs starting from log path.
            ### Everything else(hooks, logs going directly to console, etc) goes to logstash index without any parsing
            if ([log] =~ /^\/opt\/out\/instance(\/\w+)?\/log[s]?/) {
                grok {
                    match => {
                        "log" => [ "^\/opt\/out\/instance(\/\w+)?\/log[s]?\/%{DATA:log_name}(\.log)?(\.out)? %{GREEDYDATA:log_string}" ]
                    }
                    remove_field => ["log"]
                }
                if ([log_string] == "") {
                    drop {}
                }
                if ([kubernetes][container_name] =~ "pingaccess-was(-admin)?"){
                    mutate {
                        add_field => {"[@metadata][app]" => "pa-was"}
                    }
                }
                else {
                    mutate {
                        add_field => {"[@metadata][app]" => "pa"}
                    }
                }
                if ([log_name] == "pingaccess_engine_audit") {
                  dissect {
                    mapping => {
                      "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{proxyRoundTripMS} ms| %{resource}| %{subject}| %{authMech}| %{client}| %{method}| %{requestUri}| %{responseCode}| %{failedRuleType}| %{failedRuleName}| %{applicationName}| %{resourceName}| %{pathPrefix}"
                    }
                    remove_field => ["log_string"]
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-engine-audit"}
                  }
                } else if ([log_name] == "pingaccess_api_audit") {
                  dissect {
                    mapping => {
                      "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{subject}| %{authMech}| %{client}| %{method}| %{requestUri}| %{responseCode->}"
                    }
                    remove_field => ["log_string"]
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-api-audit"}
                  }
                  mutate {
                    strip => ["responseCode"]
                  }
                }
                else if ([log_name] == "pingaccess_agent_audit") {
                  dissect {
                    mapping => {
                      "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{resource}| %{client}| %{method}| %{requestUri}| %{responseCode}| %{applicationName}| %{resourceName}| %{pathPrefix}"
                    }
                    remove_field => ["log_string"]
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-agent-audit"}
                  }
                }
                else if ([log_name] == "pingaccess_sideband_client_audit") {
                  dissect {
                    mapping => {
                      "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{client}| %{method}| %{requestUri}| %{responseCode}| %{sidebandName}| %{sidebandDecision}"
                    }
                    remove_field => ["log_string"]
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-sideband-client-audit"}
                  }
                }
                else if ([log_name] == "pingaccess_sideband_audit") {
                  dissect {
                    mapping => {
                      "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{resource}| %{client}| %{method}| %{requestUri}| %{responseCode}| %{applicationName}| %{resourceName}| %{pathPrefix}| %{sidebandName}"
                    }
                    remove_field => ["log_string"]
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-sideband-audit"}
                  }
                }
                else if ([log_name] == "pingaccess") {
                  grok {
                    match => {
                      "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} \[(?:|%{NOTSPACE:exchangeId})\] %{NOTSPACE:className} - %{GREEDYDATA:message}" ]
                    }
                    remove_field => ["log_string"]
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-pingaccess"}
                  }
                }
                else if ([log_name] == "audit") {
                  grok {
                    match => {
                      "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"]
                    }
                    remove_field => ["log_string"]
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-upgrade-audit"}
                  }
                }
                else if ([log_name] == "upgrade") {
                  grok {
                    match => {
                      "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} %{NOTSPACE:className}:%{NUMBER:position} - %{GREEDYDATA:message}"]
                    }
                    remove_field => ["log_string"]
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-upgrade-log"}
                  }
                }
                else if ([log_name] == "upgrade_status") {
                  mutate {
                    rename => { "log_string" => "message" }
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-upgrade-status"}
                  }
                }
                ### For log files we don't know right now - store in separate indices without parsing
                else {
                  mutate {
                    rename => { "log_string" => "message" }
                    add_field => {"[@metadata][index]" => "%{[@metadata][app]}-%{[log_name]}"}
                  }
                }
                if ([timestamp]) {
                  date {
                    match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss"]
                    remove_field => ["timestamp"]
                  }
                }
                ### Security Enrichments begin here, ENRICH THE IP ADDRESS DETAIL
                if ([client]) {
                    geoip
                    {
                        source => "client"
                    }
                    translate {
                        source => "client"
                        target => "threat_intel"
                        fallback => "No"
                        dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'
                        refresh_behaviour => "replace"
                    }
                    translate {
                        source => "client"
                        target => "tor_intel"
                        fallback => "No"
                        dictionary_path => '/enrichment-cache-files/TorNodes.yml'
                        refresh_behaviour => "replace"
                    }
                    translate {
                        source => "[geoip][country_name]"
                        target => "malicious_country"
                        fallback => "No"
                        dictionary_path => '/enrichment-cache-files/MaliciousCountries.yml'
                        refresh_behaviour => "replace"
                    }
                    translate {
                        source => "[geoip][country_name]"
                        target => "known_country"
                        fallback => "No"
                        dictionary_path => '/enrichment-cache-files/KnownCountries.yml'
                        refresh_behaviour => "replace"
                    }
                    if([malicious_country] == "No" and [known_country] == "No"){
                        mutate {
                          add_field => { "suspicious_country" => "YES" }
                        }
                    }
                }
            }
        }
    }
  05-pd-filters.conf: "filter {\n    if ([kubernetes][container_name] =~ \"pingdirectory\")
    {\n    ### Parse only logs starting from log path.\n    ### Everything else(hooks,
    logs going directly to console, etc) goes to logstash index without any parsing\n
    \       if ([log] =~ /^\\/opt\\/out\\/instance\\/logs/) {\n            grok {\n
    \               match => {\n                  \"log\" => [ \"^\\/opt\\/out\\/instance(\\/\\w+)?\\/log[s]?\\/%{DATA:log_name}(\\.log)?(\\.out)?
    %{GREEDYDATA:log_string}\" ]\n                }\n                remove_field
    => [\"log\"]\n            }\n            if ([log_string] == \"\") {\n                drop
    {}\n            }\n            mutate {\n                add_field => {\"[@metadata][index]\"
    => \"pd-%{log_name}\"}\n            }\n            if ([log_name] == \"access\"
    ) {\n                kv {\n                  source => \"[log_string]\"\n                  value_split
    => \"=\"\n                  include_brackets => true\n                }\n                grok
    {\n                  match => { \"log_string\" => \"\\[%{DATA:timestamp}\\] %{DATA:ldapType}
    %{WORD}=%{GREEDYDATA}\" }\n                  remove_field => [\"log_string\"]\n
    \               }\n                date {\n                  match => [\"timestamp\",
    \"dd/MMM/yyyy:HH:mm:ss.SSS Z\", \"dd/MMM/yyyy:HH:mm:ss Z\"]\n                  remove_field
    => [\"timestamp\"]\n                }\n                mutate{\n                  gsub
    => [ \"filter\", '\"', \"\" ]\n                  gsub => [ \"dn\", '\"', \"\"
    ]\n                  gsub => [ \"requesterIP\", \"internal\", \"127.0.0.1\" ]\n
    \                 rename => { \"msg\" => \"message\" }\n                }\n                ###
    Security Enrichments begin here, ENRICH THE IP ADDRESS DETAIL\n                translate
    {\n                  source => \"requesterIP\"\n                  target => \"threat_intel\"\n
    \                 fallback => \"No\"\n                  dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'\n
    \                 refresh_behaviour => \"replace\"\n                }\n                translate
    {\n                  source => \"requesterIP\"\n                  target => \"tor_intel\"\n
    \                 fallback => \"No\"\n                  dictionary_path => '/enrichment-cache-files/TorNodes.yml'\n
    \                 refresh_behaviour => \"replace\"\n                }\n                translate
    {\n                  source => \"[geoip][country_name]\"\n                  target
    => \"malicious_country\"\n                  fallback => \"No\"\n                  dictionary_path
    => '/enrichment-cache-files/MaliciousCountries.yml'\n                  refresh_behaviour
    => \"replace\"\n                }\n                translate {\n                  source
    => \"[geoip][country_name]\"\n                  target => \"known_country\"\n
    \                 fallback => \"No\"\n                  dictionary_path => '/enrichment-cache-files/KnownCountries.yml'\n
    \                 refresh_behaviour => \"replace\"\n                }\n                if([malicious_country]
    == \"No\" and [known_country] == \"No\"){\n                    mutate {\n                        add_field
    => { \"suspicious_country\" => \"YES\" }\n                    }\n                }\n
    \           }\n            else if ([log_name] == \"server\" or [log_name] ==
    \"errors\" or [log_name] == \"replication\") {\n                grok {\n                    match
    => {\n                        \"log_string\" => [ \"\\[%{DATA:timestamp}\\] %{WORD:severity}
    %{GREEDYDATA:message}\",\"\\[%{DATA:timestamp}\\][ ]{1,2}%{WORD}=%{GREEDYDATA}\"]\n
    \                   }\n                    break_on_match => \"true\"\n                }\n
    \               if ![severity] {\n                    kv {\n                        source
    => \"[log_string]\"\n                        value_split => \"=\"\n                        field_split
    => \" \\n\"\n                        include_brackets => true\n                    }\n
    \               }\n                date {\n                  match => [\"timestamp\",
    \"dd/MMM/yyyy:HH:mm:ss.SSS Z\", \"dd/MMM/yyyy:HH:mm:ss Z\"]\n                  remove_field
    => [\"timestamp\"]\n                }\n                if \"_grokparsefailure\"
    not in [tags] {\n\t                mutate{\n\t                  remove_field =>
    [\"log_string\"]\n\t                }\n                }\n            }\n            else
    if ([log_name] == \"failed-ops\" or [log_name] == \"expensive-write-ops\"){\n
    \               kv {\n                  source => \"[log_string]\"\n                  value_split
    => \"=\"\n                  include_brackets => true\n                }\n                grok
    {\n                  match => { \"log_string\" => \"\\[%{DATA:timestamp}\\] %{DATA:ldapType}
    %{WORD}=%{GREEDYDATA}\" }\n                  remove_field => [\"log_string\"]\n
    \               }\n                date {\n                  match => [\"timestamp\",
    \"dd/MMM/yyyy:HH:mm:ss.SSS Z\", \"dd/MMM/yyyy:HH:mm:ss Z\"]\n                  remove_field
    => [\"timestamp\"]\n                }\n            }\n        }\n    }\n}"
  06-pds-filters.conf: "filter {\n    if ([kubernetes][container_name] =~ \"pingdatasync\")
    {\n    ### Parse only logs starting from log path.\n    ### Everything else(hooks,
    logs going directly to console, etc) goes to logstash index without any parsing\n
    \       if ([log] =~ /^\\/opt\\/out\\/instance\\/logs/) {\n            grok {\n
    \               match => {\n                  \"log\" => [ \"^\\/opt\\/out\\/instance(\\/\\w+)?\\/log[s]?\\/%{DATA:log_name}(\\.log)?(\\.out)?
    %{GREEDYDATA:log_string}\" ]\n                }\n                remove_field
    => [\"log\"]\n            }\n            if ([log_string] == \"\") {\n                drop
    {}\n            }\n            mutate {\n                add_field => {\"[@metadata][index]\"
    => \"pds-%{log_name}\"}\n            }\n            if ([log_name] == \"access\"
    ) {\n                kv {\n                  source => \"[log_string]\"\n                  value_split
    => \"=\"\n                  include_brackets => true\n                }\n                grok
    {\n                  match => { \"log_string\" => \"\\[%{DATA:timestamp}\\] %{DATA:ldapType}
    %{WORD}=%{GREEDYDATA}\" }\n                  remove_field => [\"log_string\"]\n
    \               }\n                date {\n                  match => [\"timestamp\",
    \"dd/MMM/yyyy:HH:mm:ss.SSS Z\", \"dd/MMM/yyyy:HH:mm:ss Z\"]\n                  remove_field
    => [\"timestamp\"]\n                }\n                mutate{\n                  gsub
    => [ \"filter\", '\"', \"\" ]\n                  gsub => [ \"dn\", '\"', \"\"
    ]\n                  gsub => [ \"requesterIP\", \"internal\", \"127.0.0.1\" ]\n
    \                 rename => { \"msg\" => \"message\" }\n                }\n                translate
    {\n                  source => \"requesterIP\"\n                  target => \"threat_intel\"\n
    \                 fallback => \"No\"\n                  dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'\n
    \                 refresh_behaviour => \"replace\"\n                }\n                translate
    {\n                  source => \"requesterIP\"\n                  target => \"tor_intel\"\n
    \                 fallback => \"No\"\n                  dictionary_path => '/enrichment-cache-files/TorNodes.yml'\n
    \                 refresh_behaviour => \"replace\"\n                }\n                translate
    {\n                  source => \"[geoip][country_name]\"\n                  target
    => \"malicious_country\"\n                  fallback => \"No\"\n                  dictionary_path
    => '/enrichment-cache-files/MaliciousCountries.yml'\n                  refresh_behaviour
    => \"replace\"\n                }\n                translate {\n                  source
    => \"[geoip][country_name]\"\n                  target => \"known_country\"\n
    \                 fallback => \"No\"\n                  dictionary_path => '/enrichment-cache-files/KnownCountries.yml'\n
    \                 refresh_behaviour => \"replace\"\n                }\n                if([malicious_country]
    == \"No\" and [known_country] == \"No\"){\n                    mutate {\n                        add_field
    => { \"suspicious_country\" => \"YES\" }\n                    }\n                }\n
    \           }\n            else if ([log_name] == \"server\" or [log_name] ==
    \"errors\") {\n                grok {\n                    match => {\n                        \"log_string\"
    => [ \"\\[%{DATA:timestamp}\\] %{WORD:severity} %{GREEDYDATA:message}\",\"\\[%{DATA:timestamp}\\]
    %{WORD}=%{GREEDYDATA}\"]\n                    }\n                    break_on_match
    => \"true\"\n                }\n                if ![severity] {\n\t                kv
    {\n\t                    source => \"[log_string]\"\n\t                    value_split
    => \"=\"\n\t                    field_split => \" \\n\"\n\t                    include_brackets
    => true\n\t                }\n\t            }\n                date {\n                  match
    => [\"timestamp\", \"dd/MMM/yyyy:HH:mm:ss.SSS Z\", \"dd/MMM/yyyy:HH:mm:ss Z\"]\n
    \                 remove_field => [\"timestamp\"]\n                }\n                if
    \"_grokparsefailure\" not in [tags] {\n\t                mutate{\n\t                  remove_field
    => [\"log_string\"]\n\t                }\n                }\n            }\n            else
    if ([log_name] == \"failed-ops\"){\n                kv {\n                  source
    => \"[log_string]\"\n                  value_split => \"=\"\n                  include_brackets
    => true\n                }\n                grok {\n                  match =>
    { \"log_string\" => \"\\[%{DATA:timestamp}\\] %{DATA:ldapType} %{WORD}=%{GREEDYDATA}\"
    }\n                  remove_field => [\"log_string\"]\n                }\n                date
    {\n                  match => [\"timestamp\", \"dd/MMM/yyyy:HH:mm:ss.SSS Z\",
    \"dd/MMM/yyyy:HH:mm:ss Z\"]\n                  remove_field => [\"timestamp\"]\n
    \               }\n            }\n            else if ([log_name] == \"sync-failed-ops\"){\n
    \               grok {\n                    match => {\"log_string\" => \"\\[%{DATA:timestamp}\\]
    %{GREEDYDATA:message}\"}\n                    remove_field => [\"log_string\"]\n
    \               }\n                date {\n                  match => [\"timestamp\",
    \"dd/MMM/yyyy:HH:mm:ss.SSS Z\", \"dd/MMM/yyyy:HH:mm:ss Z\"]\n                  remove_field
    => [\"timestamp\"]\n                }\n            }\n        }\n    }\n}"
  07-pf-filters.conf: "filter {\n    if ([kubernetes][container_name] =~ \"pingfederate(-admin)?\")
    {\n    ### Parse only logs starting from log path.\n    ### Everything else(hooks,
    logs going directly to console, etc) goes to logstash index without any parsing\n
    \       if ([log] =~ /^\\/opt\\/out\\/instance\\/log/) {\n            grok {\n
    \               match => {\n                    \"log\" => [ \"^\\/opt\\/out\\/instance\\/log\\/%{DATA:log_name}(\\.log)?(\\.out)?
    %{GREEDYDATA:log_string}\" ]\n                }\n                remove_field
    => [\"log\"]\n            }\n            if ([log_string] == \"\") {\n                drop
    {}\n            }\n            mutate {\n                add_field => {\"[@metadata][index]\"
    => \"pf-%{log_name}\"}\n            }\n            if ([log_name] == \"admin-api\"
    or [log_name] == \"runtime-api\") {\n              dissect {\n                mapping
    => {\n                  \"log_string\" => \"%{timestamp}| %{user}| %{authType}|
    %{clientIP}| %{httpMethod}| %{url}| %{status}\"\n                }\n                remove_field
    => [\"log_string\"]\n              }\n              mutate {\n                gsub
    => [\"clientIP\",\"[\\[\\]]\",\"\"]\n              }\n            }\n            else
    if ([log_name] == \"admin-event-detail\") {\n              dissect {\n                mapping
    => {\n                  \"log_string\" => \"%{eventDetailId} | %{filename} | %{delta}
    | %{position} | %{message}\"\n                }\n                remove_field
    => [\"log_string\"]\n              }\n            }\n            else if ([log_name]
    == \"admin\") {\n              dissect {\n                mapping => {\n                  \"log_string\"
    => \"%{timestamp} | %{user} | %{roles} | %{ip} | %{component} | %{event} | %{eventDetailId}
    | %{message}\"\n                }\n                remove_field => [\"log_string\"]\n
    \             }\n              mutate {\n                replace => {\"[@metadata][index]\"
    => \"pf-admin-log\"}\n                gsub => [\"ip\",\"[\\[\\]]\",\"\"]\n              }\n
    \           }\n            else if ([log_name] == \"transaction\") {\n              dissect
    {\n                mapping => {\n                  \"log_string\" => \"%{timestamp}
    \ | %{host} | %{log_level} | %{event} | Connection ID: %{connectionId} | Virtual
    Server ID: %{virtualServerId} | %{urn} | %{eventType} | SAML ID: %{samlId} | %{variable_part}\"\n
    \               }\n                remove_field => [\"log_string\"]\n              }\n
    \             grok {\n                match => {\n                  \"variable_part\"
    => \"(Endpoint: %{URI:endpoint})|(SAML Subject: %{DATA:samlSubject} \\| %{DATA:binding}
    \\| SignatureStatus: %{DATA:signatureStatus}( \\|%{DATA:xmlMessage})?)$\"\n                }\n
    \               remove_field => [\"variable_part\"]\n              }\n            }\n
    \           else if ([log_name] == \"audit\") {\n              dissect {\n                mapping
    => {\n                  \"log_string\" => \"%{timestamp}| %{trackingId}| %{event}|
    %{subject}| %{ip} | %{app}| %{connectionId}| %{protocol}| %{host}| %{role}| %{status}|
    %{adapterId}| %{description}| %{responseTime->}\"\n                }\n                remove_field
    => [\"log_string\"]\n              }\n              ruby {\n                code
    => '\n                    hash = event.to_hash\n                    hash.each
    do |k,v|\n\t                    if v == \"\" || v == nil\n\t                        event.remove(k)\n\t
    \                   end\n                    end\n                '\n              }\n
    \           }\n            else if ([log_name] == \"provisioner-audit\") {\n              dissect
    {\n                mapping => {\n                  \"log_string\" => \"%{timestamp}|
    %{cycleId}| %{channelId}| %{eventType}| %{sourceId}| %{targetId}| %{isSuccess}|
    %{nonSuccessCause}\"\n                }\n                remove_field => [\"log_string\"]\n
    \             }\n            }\n            else if ([log_name] == \"provisioner\")
    {\n              grok {\n                match => {\n                  \"log_string\"
    => \"%{DATA}[ ]{1,3}%{WORD:logLevel}[ ]{1,3}\\[%{NOTSPACE:className}\\] %{GREEDYDATA:message}\"\n
    \               }\n                remove_field => [\"log_string\"]\n              }\n\t
    \         mutate {\n\t            replace => {\"[@metadata][index]\" => \"pf-provisioner-log\"}\n\t
    \           gsub => [\"ip\",\"[\\[\\]]\",\"\"]\n\t          }\n            }\n
    \           else if ([log_name] == \"server\") {\n              grok {\n                match
    => {\n                  \"log_string\" => \"%{TIMESTAMP_ISO8601:timestamp}( %{DATA:trackingId})?
    %{WORD:logLevel}[ ]{1,3}\\[%{NOTSPACE:className}\\] %{GREEDYDATA:message}\"\n
    \               }\n                remove_field => [\"log_string\"]\n              }\n
    \           }\n            else if ([log_name] == \"init\") {\n              grok
    {\n                match => {\n                  \"log_string\" => \"%{TIMESTAMP_ISO8601:timestamp}
    %{GREEDYDATA:message}\"\n                }\n                remove_field => [\"log_string\"]\n
    \             }\n            }\n            else if ([log_name] == \"jvm-garbage-collection\")
    {\n              grok {\n                match => {\n                  \"log_string\"
    => \"\\[%{TIMESTAMP_ISO8601:timestamp}\\]\\[%{NUMBER:secondsFromStart}s\\]\\[%{WORD:logLevel}\\]\\[%{DATA:categories}\\]
    %{GREEDYDATA:message}\"\n                }\n                remove_field => [\"log_string\"]\n
    \             }\n            }\n            else if ([log_name] =~ \"request\")
    {\n              grok {\n                match => {\n                  \"log_string\"
    => \"(%{IPORHOST:clientip})? %{HTTPDUSER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\]
    \\\"(?:%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\\\"
    %{NUMBER:response} (?:%{NUMBER:bytes}|- )( \\\"%{NOTSPACE:referer}\\\")?( \\\"%{NOTSPACE:useragent}\\\")?\"\n
    \               }\n                remove_field => [\"log_string\"]\n              }\n
    \             mutate {\n                replace => {\"[@metadata][index]\" =>
    \"pf-request\"}\n              }\n            }\n            if ([timestamp])
    {\n              date {\n                match => [ \"timestamp\", \"ISO8601\",
    \"yyyy-MM-dd HH:mm:ss\", \"HH:mm:ss,SSS\", \"dd/MMM/yyyy:HH:mm:ss Z\", \"yyyy-MM-dd
    HH:mm:ss,SSS\"]\n                remove_field => [\"timestamp\"]\n              }\n
    \           }\n            if ([ip]) {\n                geoip {\n                    source
    => \"ip\"\n                }\n              ### Security Enrichments begin here,
    ENRICH THE IP ADDRESS DETAIL\n                translate {\n                    source
    => \"ip\"\n                    target => \"threat_intel\"\n                    fallback
    => \"No\"\n                    dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'\n
    \                   refresh_behaviour => \"replace\"\n                }\n                translate
    {\n                    source => \"ip\"\n                    target => \"tor_intel\"\n
    \                   fallback => \"No\"\n                    dictionary_path =>
    '/enrichment-cache-files/TorNodes.yml'\n                    refresh_behaviour
    => \"replace\"\n                }\n                translate {\n                    source
    => \"[geoip][country_name]\"\n                    target => \"malicious_country\"\n
    \                   fallback => \"No\"\n                    dictionary_path =>
    '/enrichment-cache-files/MaliciousCountries.yml'\n                    refresh_behaviour
    => \"replace\"\n                }\n                translate {\n                    source
    => \"[geoip][country_name]\"\n                    target => \"known_country\"\n
    \                   fallback => \"No\"\n                    dictionary_path =>
    '/enrichment-cache-files/KnownCountries.yml'\n                    refresh_behaviour
    => \"replace\"\n                }\n                if([malicious_country] == \"No\"
    and [known_country] == \"No\"){\n                    mutate {\n                        add_field
    => { \"suspicious_country\" => \"YES\" }\n                    }\n                }\n
    \             #Query for previous logins in OpenSearch, if login is found append
    data to the log\n              #IF A SUCCESSFUL LOGIN OCCURS, Query OS to see
    if the the attempt was successful in the past to determine distance from previous
    login.\n                if([status] == \"success\" and [event] == \"AUTHN_ATTEMPT\"
    and \"_geoip_lookup_failure\" not in [tags]){\n                    opensearch
    {\n                        index => \"pf-audit-read\"\n                        query_template
    => \"/etc/logstash/templates/6hr-1200km-template.json\"\n                        hosts
    \      => [\"opensearch-cluster-master.elastic-stack-logging.svc.cluster.local:9200\"]\n
    \                       user => \"${OS_USER}\"\n                        password
    => \"${OS_PASSWORD}\"\n                        ssl         => true\n                        add_field
    => {\"found_distance_alert\" => \"YES\"}\n                        fields => {\n
    \                           \"subject\" => \"found_subject\"\n                            \"ip\"
    => \"found_ip\"\n                            \"[geoip][country_name]\" => \"found_country\"\n
    \                           \"[geoip][city_name]\" => \"found_city_name\"\n                            \"[geoip][latitude]\"
    => \"[found_geoip][latitude]\"\n                            \"[geoip][longitude]\"
    => \"[found_geoip][longitude]\"\n                            \"[geoip][location]\"
    => \"[found_geoip][location]\"\n                        }\n                    }\n
    \                   ### transform geoip coordinates to geoshape line between two
    locations\n                    if ([found_distance_alert] == \"YES\") {\n                        mutate
    {\n                            add_field => {\"[found_geoip][line]\" => \"LINESTRING
    (%{[geoip][longitude]} %{[geoip][latitude]},%{[found_geoip][longitude]} %{[found_geoip][latitude]})\"}\n
    \                       }\n                    }\n                }\n            }\n
    \       }\n    }\n}"
  08-pc-filters.conf: "filter {\n\tif ([kubernetes][container_name] == \"pingcentral\")
    {\n    ### Parse only logs starting from log path.\n    ### Everything else(hooks,
    logs going directly to console, etc) goes to logstash index without any parsing\n\t\tif
    ([log] =~ \"^\\/opt\\/out\\/instance(\\/\\w+)?\\/log[s]?\") {\n\t\t\tgrok {\n\t\t\t\tmatch
    => {\n\t\t\t\t\t\"log\" => [ \"^\\/opt\\/out\\/instance(\\/\\w+)?\\/log[s]?\\/%{DATA:log_name}(\\.log)?(\\.out)?
    %{GREEDYDATA:log_string}\" ]\n\t\t\t\t}\n\t\t\t\tremove_field => [\"log\"]\n\t\t\t}\n
    \           if ([log_string] == \"\") {\n                drop {}\n            }\n\t\t\tmutate
    {\n\t\t\t\tadd_field => {\"[@metadata][index]\" => \"pc-%{log_name}\"}\n\t\t\t}\n\t\t\tif
    ([log_name] == \"application-ext\" or [log_name] == \"application\") {\n\t\t\t\tgrok
    {\n\t\t\t\t\tmatch => {\n\t\t\t\t\t\t\"log_string\" => \"%{TIMESTAMP_ISO8601:timestamp}[
    ]{1,3}%{WORD:logLevel}[ ]{1,3}%{NOTSPACE:className}:%{NUMBER:position} - %{GREEDYDATA:message}\"\n\t\t\t\t\t}\n\t\t\t\t\tremove_field
    => [\"log_string\"]\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ([log_name] == \"monitor\")
    {\n\t\t\t\tgrok {\n\t\t\t\t\tmatch => {\n\t\t\t\t\t\t\"log_string\" => \"%{TIMESTAMP_ISO8601:timestamp}
    \\| %{NOTSPACE:className} %{GREEDYDATA:message}\"\n\t\t\t\t\t}\n\t\t\t\t\tremove_field
    => [\"log_string\"]\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ([log_name] == \"application-api\")
    {\n\t\t\t\tdissect {\n\t\t\t\t\tmapping => {\n\t\t\t\t\t\t\"log_string\" => \"%{timestamp}
    | %{className} %{user} | %{method} | %{client} | %{requestUri} | %{responseCode}\"\n\t\t\t\t\t}\n\t\t\t\t\tremove_field
    => [\"log_string\"]\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ([timestamp]) {\n\t\t\t\tdate
    {\n\t\t\t\t\tmatch => [ \"timestamp\", \"ISO8601\", \"yyyy-MM-dd HH:mm:ss\" ]\n\t\t\t\t\tremove_field
    => [\"timestamp\"]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  09-pdg-filters.conf: "filter {\nif ([kubernetes][container_name] == \"pingdelegator\")
    {\n    ### Parse only logs starting from log path.\n    ### Everything else(hooks,
    logs going directly to console, etc) goes to logstash index without any parsing\n\t\tif
    ([log] =~ \"^\\/opt\\/out\\/instance(\\/\\w+)?\\/log[s]?\") {\n\t\t\tgrok {\n\t\t\t\tmatch
    => {\n\t\t\t\t\t\"log\" => [ \"^\\/opt\\/out\\/instance(\\/\\w+)?\\/log[s]?\\/%{DATA:log_name}(\\.log)?(\\.out)?
    %{GREEDYDATA:log_string}\" ]\n\t\t\t\t}\n\t\t\t\tremove_field => [\"log\"]\n\t\t\t}\n
    \           if ([log_string] == \"\") {\n                drop {}\n            }\n\t\t\tmutate
    {\n\t\t\t\tadd_field => {\"[@metadata][index]\" => \"pdg-%{log_name}\"}\n\t\t\t}\n\t\t\tif
    ([log_name] == \"access\") {\n\t\t\t\tdissect {\n\t\t\t\t\tmapping => {\n\t\t\t\t\t\t\"log_string\"
    => '%{client} - %{user} [%{timestamp}] \"%{method} %{url} HTTP/%{httpVersion}\"
    %{responseCode} %{bodySentBytes} \"%{referrer}\" \"%{userAgent}\" \"%{httpForwardedFor}\"'\n\t\t\t\t\t}\n\t\t\t\t\tremove_field
    => [\"log_string\"]\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ([log_name] == \"error\")
    {\n\t\t\t\tgrok {\n\t\t\t\t\tmatch => {\n\t\t\t\t\t\t\"log_string\" => [\"%{DATA:timestamp}
    \\[%{WORD:logLevel}\\] %{NUMBER:pid}#%{NUMBER:tid}: (\\*%{NUMBER:connectionId}
    )?%{GREEDYDATA:message}\"]\n\t\t\t\t\t}\n\t\t\t\t\tremove_field => [\"log_string\"]\n\t\t\t\t}\n\t\t\t}\n\t\t\tif
    ([timestamp]){\n\t\t\t\tdate {\n\t\t\t\t\tmatch => [ \"timestamp\", \"dd/MMM/yyyy:H:m:s
    Z\", \"yyyy/MM/dd HH:mm:ss\" ]\n\t\t\t\t\tremove_field => [\"timestamp\"]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  10-outputs.conf: |-
    output {
        if ([@metadata][index]) {
            opensearch {
              id => "OS_specified_index"
              hosts => ["https://opensearch-cluster-master.elastic-stack-logging.svc.cluster.local:9200"]
              user => "${OS_USER}"
              password => "${OS_PASSWORD}"
              ssl => true
              ssl_certificate_verification => false
              sniffing => false
              index => "%{[@metadata][index]}-%{+YYYY.MM.dd}"
            }
        }
        else {
            opensearch {
              id => "OS_everything"
              hosts => ["https://opensearch-cluster-master.elastic-stack-logging.svc.cluster.local:9200"]
              user => "${OS_USER}"
              password => "${OS_PASSWORD}"
              ssl => true
              ssl_certificate_verification => false
              sniffing => false
              index => "logstash-%{+YYYY.MM.dd}"
            }
        }
    }
kind: ConfigMap
metadata:
  name: logstash-pipeline-main-ht5h988bg2
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  newrelic.conf: "input {\n  http {\n    port => 8083\n    id => \"NR_in\"\n  }\n}\nfilter
    {\n### Remove unneeded fields came from fluent-bit\n  mutate {\n          remove_field
    => [ \"headers\",\"host\",\"date\"]\n      }\n\n  if [private_ip] {\n    ### Add
    temp field to get the correct host field inside NR\n    mutate {\n        add_field
    => { \"[@metadata][transf_host]\" => \"%{private_ip}\" }\n      }\n    mutate
    {\n        gsub => [ \"[@metadata][transf_host]\", \"\\.\", \"-\" ]\n        add_field
    => { \"host\" => \"ip-%{[@metadata][transf_host]}\" }\n      }\n  }      \n}\noutput
    {\n  newrelic {\n    license_key => \"${NR_LICENSE_KEY}\"\n    id => \"NR_out\"\n
    \ }\n}"
kind: ConfigMap
metadata:
  name: logstash-pipeline-nr-6tcc6f926g
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  s3.conf: |-
    input {
      http {
        port => 8081
        id => "s3_in"
      }
    }
    filter {
          ### Remove unneeded fields came from fluent-bit and set appropriate directory for s3
          mutate {
            add_field => { "[@metadata][s3_key]" => "%{[kubernetes][pod_name]}_%{[kubernetes][namespace_name]}_%{[kubernetes][container_name]}" }
            remove_field => [ "headers", "host","date"]
          }
    }
    output {
          s3 {
            region => "${AWS_REGION}"
            bucket => "${S3_BUCKET_NAME}"
            prefix => "/application/%{[@metadata][s3_key]}/%{+YYYY}/%{+MM}/%{+dd}/%{+HH}/%{+mm}/%{+ss}"
            time_file => "1"
            codec => "json"
            id => "s3_out"
          }
    }
kind: ConfigMap
metadata:
  name: logstash-pipeline-s3-gc9t2khd28
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  pipelines.yml: |-
    - pipeline.id: main
      path.config: "/usr/share/logstash/pipeline/main"
    - pipeline.id: customer
      path.config: "/usr/share/logstash/pipeline/customer"
    - pipeline.id: s3
      path.config: "/usr/share/logstash/pipeline/s3"
    - pipeline.id: cloudwatch
      path.config: "/usr/share/logstash/pipeline/cloudwatch"
    - pipeline.id: newrelic
      path.config: "/usr/share/logstash/pipeline/newrelic"
    - pipeline.id: dlq
      path.config: "/usr/share/logstash/pipeline/dlq"
      pipeline.workers: 1
kind: ConfigMap
metadata:
  labels:
    app: logstash-elastic
  name: logstash-pipelines
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  6hr-1200km-template.json: |-
    {
      "query": {
        "bool": {
          "must": [],
          "filter": [
            {
              "range": {
                "@timestamp": {
                  "gte": "now-6h/h",
                  "lte": "now"
                }
              }
            },
            {
              "match_phrase": {
                "status": "success"
              }
            },
            {
              "match_phrase": {
                "event": "AUTHN_ATTEMPT"
              }
            },
            {
              "match_phrase": {
                "subject": "%{subject}"
              }
            },
            {
              "exists": {
                "field": "geoip.ip"
              }
            }
          ],
          "should": [],
          "must_not": {
            "geo_distance": {
              "distance": "1200km",
              "geoip.location": {
                "lat": "%{[geoip][latitude]}",
                "lon": "%{[geoip][longitude]}"
              }
            }
          }
        }
      },
      "size": 1,
      "sort": [
        {
          "@timestamp": {
            "order": "desc"
          }
        }
      ],
      "_source": ["subject", "geoip.location", "geoip.latitude", "geoip.longitude", "geoip.country_name", "geoip.city_name", "protocol", "ip", "malicious_country", "suspicious_country", "_id"]
    }
kind: ConfigMap
metadata:
  name: logstash-search-template
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  opensearch.yml: |-
    cluster.name: opensearch-cluster
    network.host: 0.0.0.0
    reindex.remote.whitelist: "*:9200"
    cluster.max_shards_per_node: 10000
    node.search.cache.size: 500mb
    prometheus:
      indices: false

    plugins:
      security:
        ssl:
          transport:
            pemcert_filepath: certs/tls.crt
            pemkey_filepath: certs/tls.key
            pemtrustedcas_filepath: certs/ca.crt
            enforce_hostname_verification: false
          http:
            enabled: true
            pemcert_filepath: certs/tls.crt
            pemkey_filepath: certs/tls.key
            pemtrustedcas_filepath: certs/ca.crt
        allow_unsafe_democertificates: false
        allow_default_init_securityindex: true
        nodes_dn:
          - CN=elastic-stack-logging.svc.cluster.local
        audit.type: internal_opensearch
        enable_snapshot_restore_privilege: true
        check_snapshot_restore_write_privileges: true
        restapi:
          roles_enabled: ["all_access", "security_rest_api_access"]
        system_indices:
          enabled: true
          indices:
            [
              ".opendistro-alerting-config",
              ".opendistro-alerting-alert*",
              ".opendistro-anomaly-results*",
              ".opendistro-anomaly-detector*",
              ".opendistro-anomaly-checkpoints",
              ".opendistro-anomaly-detection-state",
              ".opendistro-reports-*",
              ".opendistro-notifications-*",
              ".opendistro-notebooks",
              ".opendistro-asynchronous-search-response*",
            ]
kind: ConfigMap
metadata:
  name: opensearch-config-kgm6kddf69
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  opensearch_dashboards.yml: |-
    opensearch.ssl.verificationMode: full
    opensearch.ssl.certificateAuthorities: /usr/share/opensearch-dashboards/config/certs/ca.crt
    opensearch.requestHeadersAllowlist: [authorization, securitytenant]
    opensearch_security.auth.anonymous_auth_enabled: true
    opensearch_security.multitenancy.enabled: false
    opensearch_security.readonly_mode.roles: [kibana_read_only]
    # Use this setting if you are running opensearch-dashboards without https
    opensearch_security.cookie.secure: false
    server.host: '0.0.0.0'
    # Use the consolidated menu and global header bar
    opensearchDashboards.branding.useExpandedHeader: false
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: opensearch-dashboards
  name: opensearch-dashboards-config
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  pd_back_init_fail.json: |-
    {
       "name": "PingDirectory Backend Initialization Failed",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"*backend-initialization-failed*\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992641/ALERT+PingDirectory+Backend+Initialization+Failed+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992641/ALERT+PingDirectory+Backend+Initialization+Failed+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_backend_disabled.json: |-
    {
       "name": "PingDirectory Backend Disabled",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"backend-disabled\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154632299/ALERT+PingDirectory+Backend+Disabled+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154632299/ALERT+PingDirectory+Backend+Disabled+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_critical_alarm.json: |-
    {
      "name": "PingDirectory Critical Alarm",
      "type": "monitor",
      "monitor_type": "bucket_level_monitor",
      "enabled": true,
      "schedule": {
        "period": {
          "unit": "MINUTES",
          "interval": 1
        }
      },
      "inputs": [
        {
          "search": {
            "indices": [
              "pd-errors-*"
            ],
            "query": {
              "size": 0,
              "aggregations": {
                "composite_agg": {
                  "composite": {
                    "sources": [
                      {
                        "cluster_name": {
                          "terms": {
                            "field": "cluster_name.keyword"
                          }
                        }
                      }
                    ]
                  },
                  "aggs": {}
                }
              },
              "query": {
                "bool": {
                  "filter": [
                    {
                      "range": {
                        "@timestamp": {
                          "gte": "{{period_end}}||-90s",
                          "lte": "{{period_end}}",
                          "format": "epoch_millis"
                        }
                      }
                    },
                    {
                      "match_phrase": {
                        "kubernetes.container_name": "pingdirectory"
                      }
                    },
                    {
                      "match_phrase": {
                        "msg": "\"alert type=alarm-critical\""
                      }
                    },
                    {
                       "wildcard": {
                          "severity": {
                             "wildcard": "*error*",
                             "boost": 1
                          }
                       }
                    },
                    {
                      "bool": {
                        "must_not": {
                          "bool": {
                            "filter": [
                              {
                                "bool": {
                                  "should": [
                                    {
                                      "match_phrase": {
                                        "msg": "Database Cache Full"
                                      }
                                    }
                                  ],
                                  "minimum_should_match": 1
                                }
                              },
                              {
                                "bool": {
                                  "should": [
                                    {
                                      "match_phrase": {
                                        "msg": "Backend appintegrations"
                                      }
                                    }
                                  ],
                                  "minimum_should_match": 1
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "bool": {
                        "must_not": {
                          "bool": {
                            "filter": [
                              {
                                "bool": {
                                  "should": [
                                    {
                                      "match_phrase": {
                                        "msg": "Database Cache Full"
                                      }
                                    }
                                  ],
                                  "minimum_should_match": 1
                                }
                              },
                              {
                                "bool": {
                                  "should": [
                                    {
                                      "match_phrase": {
                                        "msg": "Backend userRoot"
                                      }
                                    }
                                  ],
                                  "minimum_should_match": 1
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "bool": {
                        "must_not": {
                          "bool": {
                            "filter": [
                              {
                                "bool": {
                                  "should": [
                                    {
                                      "match_phrase": {
                                        "msg": "alert type=alarm-major"
                                      }
                                    }
                                  ],
                                  "minimum_should_match": 1
                                }
                              },
                              {
                                "bool": {
                                  "should": [
                                    {
                                      "match_phrase": {
                                        "msg": "License Expiration"
                                      }
                                    }
                                  ],
                                  "minimum_should_match": 1
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "bool": {
                        "must_not": {
                          "bool": {
                            "should": [
                              {
                                "match_phrase": {
                                  "msg": "Active Cleaner Threads"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Available File Descriptors"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Changelog Database Target Size"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "CPU Usage"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Database Cache Full"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Backend appintegrations"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Backend userRoot"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Disk Busy"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "HTTP Processing"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "JVM Memory Usage"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "License Expiration"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Purge Expired Data Backlog"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Replication Purge Delay"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Undeletable Database Files"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "Work Queue Size"
                                }
                              }
                            ],
                            "minimum_should_match": 1
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      ],
      "triggers": [
        {
          "bucket_level_trigger": {
            "name": "Count more than 0",
            "severity": "1",
            "condition": {
              "buckets_path": {
                "_count": "_count"
              },
              "parent_bucket_path": "composite_agg",
              "script": {
                "source": "params._count > 0",
                "lang": "painless"
              },
              "gap_policy": "skip"
            },
            "actions": [
              {
                "name": "SREAPPALERTS",
                "destination_id": "sns_sreappalerts",
                "message_template": {
                  "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154340442/ALERT+PingDirectory+Critical+Alarm+in+CDE\"\n}",
                  "lang": "mustache"
                },
                "throttle_enabled": false,
                "subject_template": {
                  "source": "ALERT: {{ctx.monitor.name}}",
                  "lang": "mustache"
                },
                "action_execution_policy": {
                  "action_execution_scope": {
                    "per_alert": {
                      "actionable_alerts": [
                        "DEDUPED",
                        "NEW"
                      ]
                    }
                  }
                }
              },
              {
                "name": "CUSTOMERHUB",
                "destination_id": "sns_customerhub",
                "message_template": {
                  "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154340442/ALERT+PingDirectory+Critical+Alarm+in+CDE\"\n}",
                  "lang": "mustache"
                },
                "throttle_enabled": false,
                "subject_template": {
                  "source": "ALERT: {{ctx.monitor.name}}",
                  "lang": "mustache"
                },
                "action_execution_policy": {
                  "action_execution_scope": {
                    "per_alert": {
                      "actionable_alerts": [
                        "DEDUPED",
                        "NEW"
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  pd_deadlock.json: |-
    {
       "name": "PingDirectory Deadlock Detected",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"deadlock-detected\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796042/ALERT+PingDirectory+Deadlock+Detected+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796042/ALERT+PingDirectory+Deadlock+Detected+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_ext_init_fail.json: |-
    {
       "name": "PingDirectory External Server Initialization Failed",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"external-server-initialization-failed\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154665104/ALERT+PingDirectory+External+Server+Initialization+Failed+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154665104/ALERT+PingDirectory+External+Server+Initialization+Failed+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_fail_mirror_conf.json: |-
    {
       "name": "PingDirectory Failed Mirror Configuration",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=failed-to-apply-mirrored-configuration\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992659/ALERT+PingDirectory+Failed+Mirror+Configuration+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992659/ALERT+PingDirectory+Failed+Mirror+Configuration+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_garbage_collection.json: |-
    {
       "name": "PingDirectory Continuous Garbage Collection",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=continuous-garbage-collection-detected\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992650/ALERT+PingDirectory+Continuous+Garbage+Collection+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992650/ALERT+PingDirectory+Continuous+Garbage+Collection+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_index_corrupt.json: |-
    {
       "name": "PingDirectory Index Corrupt",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"index-corrupt\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992668/ALERT+PingDirectory+Index+Corrupt+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992668/ALERT+PingDirectory+Index+Corrupt+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_index_degrade.json: |-
    {
       "name": "PingDirectory Index Degraded",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"index-degraded\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796051/ALERT+PingDirectory+Index+Degraded+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796051/ALERT+PingDirectory+Index+Degraded+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_lockdown.json: |-
    {
       "name": "PingDirectory Entering Lockdown Mode",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"*entering-lockdown-mode*\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154632308/ALERT+PingDirectory+Entering+Lockdown+Mode+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154632308/ALERT+PingDirectory+Entering+Lockdown+Mode+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
kind: ConfigMap
metadata:
  name: os-alerts-pd-1
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  pd_je_recovery.json: |-
    {
       "name": "PingDirectory Je Recovery Required",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"je-recovery-required\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796060/ALERT+PingDirectory+Je+Recovery+Required+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796060/ALERT+PingDirectory+Je+Recovery+Required+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_large_attr_fail.json: |-
    {
       "name": "PingDirectory Large Attribute Update Failure",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"large-attribute-update-failure\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992677/ALERT+PingDirectory+Large+Attribute+Update+Failure+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992677/ALERT+PingDirectory+Large+Attribute+Update+Failure+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_ldap_conn_fails.json: |-
    {
       "name": "PingDirectory LDAP Connection Handler Consecutive Failure",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"ldap-connection-handler-consecutive-failures\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796078/ALERT+PingDirectory+LDAP+Connection+Handler+Consecutive+Failure+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796078/ALERT+PingDirectory+LDAP+Connection+Handler+Consecutive+Failure+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_ldap_start_err.json: |-
    {
       "name": "PingDirectory LDAP Connection Handler Startup Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=ldap-connection-handler-cannot-listen\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796069/ALERT+PingDirectory+LDAP+Connection+Handler+Startup+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796069/ALERT+PingDirectory+LDAP+Connection+Handler+Startup+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_ldap_uncaught_err.json: |-
    {
       "name": "PingDirectory LDAP Connection Handler Uncaught Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"ldap-connection-handler-uncaught-error\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992686/ALERT+PingDirectory+LDAP+Connection+Handler+Uncaught+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992686/ALERT+PingDirectory+LDAP+Connection+Handler+Uncaught+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_low_disk.json: |-
    {
       "name": "PingDirectory Low Disk Space Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"low-disk-space-error\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992695/ALERT+PingDirectory+Low+Disk+Space+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992695/ALERT+PingDirectory+Low+Disk+Space+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_low_disk_warn.json: |-
    {
       "name": "PingDirectory Low Disk Space Warning",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"low-disk-space-warning\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796087/ALERT+PingDirectory+Low+Disk+Space+Warning+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796087/ALERT+PingDirectory+Low+Disk+Space+Warning+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_major_alarm.json: |-
    {
      "name": "PingDirectory Major Alarm",
      "type": "monitor",
      "monitor_type": "bucket_level_monitor",
      "enabled": true,
      "schedule": {
        "period": {
          "unit": "MINUTES",
          "interval": 1
        }
      },
      "inputs": [
        {
          "search": {
            "indices": [
              "pd-errors-*"
            ],
            "query": {
              "size": 0,
              "query": {
                "bool": {
                  "filter": [
                    {
                      "range": {
                        "@timestamp": {
                          "from": "{{period_end}}||-90s",
                          "to": "{{period_end}}",
                          "include_lower": true,
                          "include_upper": true,
                          "format": "epoch_millis",
                          "boost": 1
                        }
                      }
                    },
                    {
                      "match_phrase": {
                        "kubernetes.container_name": {
                          "query": "pingdirectory",
                          "slop": 0,
                          "zero_terms_query": "NONE",
                          "boost": 1
                        }
                      }
                    },
                    {
                       "wildcard": {
                          "severity": {
                             "wildcard": "*warning*",
                             "boost": 1
                          }
                       }
                    },
                    {
                      "match_phrase": {
                        "msg": {
                          "query": "\"alert type=alarm-major\"",
                          "slop": 0,
                          "zero_terms_query": "NONE",
                          "boost": 1
                        }
                      }
                    },
                    {
                      "bool": {
                        "must_not": {
                          "bool": {
                            "should": [
                              {
                                "match_phrase": {
                                  "msg": "Certificate Expiration"
                                }
                              },
                              {
                                "match_phrase": {
                                  "msg": "License Expiration"
                                }
                              }
                            ],
                            "minimum_should_match": 1
                          }
                        }
                      }
                    }
                  ],
                  "adjust_pure_negative": true,
                  "boost": 1
                }
              },
              "aggregations": {
                "composite_agg": {
                  "composite": {
                    "size": 10,
                    "sources": [
                      {
                        "cluster_name": {
                          "terms": {
                            "field": "cluster_name.keyword",
                            "missing_bucket": false,
                            "order": "asc"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      ],
      "triggers": [
        {
          "bucket_level_trigger": {
            "name": "Count more than 0",
            "severity": "1",
            "condition": {
              "buckets_path": {
                "_count": "_count"
              },
              "parent_bucket_path": "composite_agg",
              "script": {
                "source": "params._count > 0",
                "lang": "painless"
              },
              "gap_policy": "skip"
            },
            "actions": [
              {
                "name": "SREAPPALERTS",
                "destination_id": "sns_sreappalerts",
                "message_template": {
                  "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796033/ALERT+PingDirectory+Major+Alarm+in+CDE\"\n}",
                  "lang": "mustache"
                },
                "throttle_enabled": false,
                "subject_template": {
                  "source": "ALERT: {{ctx.monitor.name}}",
                  "lang": "mustache"
                },
                "action_execution_policy": {
                  "action_execution_scope": {
                    "per_alert": {
                      "actionable_alerts": [
                        "DEDUPED",
                        "NEW"
                      ]
                    }
                  }
                }
              },
              {
                "name": "CUSTOMERHUB",
                "destination_id": "sns_customerhub",
                "message_template": {
                  "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796033/ALERT+PingDirectory+Major+Alarm+in+CDE\"\n}",
                  "lang": "mustache"
                },
                "throttle_enabled": false,
                "subject_template": {
                  "source": "ALERT: {{ctx.monitor.name}}",
                  "lang": "mustache"
                },
                "action_execution_policy": {
                  "action_execution_scope": {
                    "per_alert": {
                      "actionable_alerts": [
                        "DEDUPED",
                        "NEW"
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      ]
    }
  pd_out_of_disk.json: |-
    {
       "name": "PingDirectory Out-of-disk Space Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"out-of-disk-space-error\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796096/ALERT+PingDirectory+Out-of-disk+Space+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796096/ALERT+PingDirectory+Out-of-disk+Space+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_priv_assign.json: |-
    {
       "name": "PingDirectory Privilege Assigned",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"privilege-assigned\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992704/ALERT+PingDirectory+Privilege+Assigned+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992704/ALERT+PingDirectory+Privilege+Assigned+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
kind: ConfigMap
metadata:
  name: os-alerts-pd-2
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  pd_3rd_party_ext.json: |-
    {
       "name": "PingDirectory Third Party Extension Exception",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=third-party-extension-exception\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796123/ALERT+PingDirectory+Third+Party+Extension+Exception+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796123/ALERT+PingDirectory+Third+Party+Extension+Exception+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_cert_replace_fail.json: |-
    {
       "name": "PingDirectory Replace Certificate Failed",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "replace-certificate-failed"
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992712/ALERT+PingDirectory+Replace+Certificate+Failed+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992712/ALERT+PingDirectory+Replace+Certificate+Failed+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_repl_backlog.json: |-
    {
       "name": "PingDirectory Replication Backlogged",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=replication-backlogged\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992720/ALERT+PingDirectory+Replication+Backlogged+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992720/ALERT+PingDirectory+Replication+Backlogged+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_repl_changelog_fail.json: |-
    {
       "name": "PingDirectory Replication Changelog Failure",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=replication-server-changelog-failure\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992737/ALERT+PingDirectory+Replication+Changelog+Failure+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992737/ALERT+PingDirectory+Replication+Changelog+Failure+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_repl_genid_mismatch.json: |-
    {
       "name": "PingDirectory Replication Generation-id Mismatch",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"replication-generation-id-mismatch\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992728/ALERT+PingDirectory+Replication+Generation-id+Mismatch+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992728/ALERT+PingDirectory+Replication+Generation-id+Mismatch+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_repl_missing_changes.json: |-
    {
       "name": "PingDirectory Replication Missing Changes",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=replication-missing-changes\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796105/ALERT+PingDirectory+Replication+Missing+Changes+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796105/ALERT+PingDirectory+Replication+Missing+Changes+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_repl_replay_fail.json: |-
    {
       "name": "PingDirectory Replication Replay Operation Failed",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=replication-replay-failed\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796114/ALERT+PingDirectory+Replication+Replay+Operation+Failed+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796114/ALERT+PingDirectory+Replication+Replay+Operation+Failed+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_repl_server_fail.json: |-
    {
       "name": "PingDirectory Replication Server Failure",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=replication-server-listen-failure\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992745/ALERT+PingDirectory+Replication+Server+Failure+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992745/ALERT+PingDirectory+Replication+Server+Failure+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_uncaught.json: |-
    {
       "name": "PingDirectory Uncaught Exception",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"uncaught-exception\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796131/ALERT+PingDirectory+Uncaught+Exception+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796131/ALERT+PingDirectory+Uncaught+Exception+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_unresolved_repl_conflict.json: |-
    {
       "name": "PingDirectory Unresolved Replication Conflict",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=replication-unresolved-conflict\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992753/ALERT+PingDirectory+Unresolved+Replication+Conflict+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992753/ALERT+PingDirectory+Unresolved+Replication+Conflict+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
kind: ConfigMap
metadata:
  name: os-alerts-pd-3
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  pd_active_cleaner_threads.json: |-
    {
       "name": "PingDirectory Active Cleaner Threads",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.labels.role": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Active Cleaner Threads\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_available_file_descriptors.json: |-
    {
       "name": "PingDirectory Available File Descriptors",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.labels.role": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Available File Descriptors\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_changelog_database_target_size.json: |-
    {
       "name": "PingDirectory Changelog Database Target Size",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.labels.role": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Changelog Database Target Size\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_cpu_usage.json: |-
    {
       "name": "PingDirectory CPU Usage",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"CPU Usage\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_db_cache_full_appintegrations.json: |-
    {
       "name": "PingDirectory Database Cache Full - Backend appintegrations",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Database Cache Full\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Backend appintegrations\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_user_err.json: |-
    {
       "name": "PingDirectory User-defined Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"user-defined-error\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796139/ALERT+PingDirectory+User-defined+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796139/ALERT+PingDirectory+User-defined+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_user_fatal.json: |-
    {
       "name": "PingDirectory User-defined Fatal",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"user-defined-fatal\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796147/ALERT+PingDirectory+User-defined+Fatal+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796147/ALERT+PingDirectory+User-defined+Fatal+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_work_queue_back.json: |-
    {
       "name": "PingDirectory Work Queue Backlogged",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"work-queue-backlogged\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992761/ALERT+PingDirectory+Work+Queue+Backlogged+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992761/ALERT+PingDirectory+Work+Queue+Backlogged+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_work_queue_full.json: |-
    {
       "name": "PingDirectory Work Queue Full",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"work-queue-full\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796155/ALERT+PingDirectory+Work+Queue+Full+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796155/ALERT+PingDirectory+Work+Queue+Full+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_worker_threads_termin.json: |-
    {
       "name": "PingDirectory Worker Threads Terminated",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"alert type=work-queue-no-threads-remaining\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992769/ALERT+PingDirectory+Worker+Threads+Terminated+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992769/ALERT+PingDirectory+Worker+Threads+Terminated+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
kind: ConfigMap
metadata:
  name: os-alerts-pd-4
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  pd_db_cache_full_userroot.json: |-
    {
       "name": "PingDirectory Database Cache Full - Backend userRoot",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.labels.role": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Database Cache Full\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Backend userRoot\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_disk_busy.json: |-
    {
       "name": "PingDirectory Disk Busy",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.labels.role": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Disk Busy\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_http_processing.json: |-
    {
       "name": "PingDirectory HTTP Processing",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.labels.role": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"HTTP Processing\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_jvm_mem_usage.json: |-
    {
       "name": "PingDirectory JVM Memory Usage",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.labels.role": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"JVM Memory Usage\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_license_exp_crit.json: |-
    {
       "name": "PingDirectory License Expiration - Critical",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"License Expiration\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_license_exp_major.json: |-
    {
       "name": "PingDirectory License Expiration - Major",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.labels.role": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-major\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"License Expiration\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_purge_expired_data_backlog.json: |-
    {
       "name": "PingDirectory Purge Expired Data Backlog",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Purge Expired Data Backlog\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_repl_purge_delay.json: |-
    {
       "name": "PingDirectory Replication Purge Delay",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Replication Purge Delay\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_undeletable_db_files.json: |-
    {
       "name": "PingDirectory Undeletable Database Files",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Undeletable Database Files\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pd_work_q_size.json: |-
    {
       "name": "PingDirectory Work Queue Size",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pd-errors-*"
                ],
                "query": {
                   "size": 0,
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "from": "{{period_end}}||-90s",
                                     "to": "{{period_end}}",
                                     "include_lower": true,
                                     "include_upper": true,
                                     "format": "epoch_millis",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdirectory"
                              }
                            },
                            {
                               "wildcard": {
                                  "severity": {
                                     "wildcard": "*error*",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"type=alarm-critical\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                  "msg": {
                                     "query": "\"Work Queue Size\"",
                                     "slop": 0,
                                     "zero_terms_query": "NONE",
                                     "boost": 1
                                  }
                               }
                            }
                         ],
                         "adjust_pure_negative": true,
                         "boost": 1
                      }
                   },
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "size": 10,
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword",
                                        "missing_bucket": false,
                                        "order": "asc"
                                     }
                                  }
                               }
                            ]
                         }
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
kind: ConfigMap
metadata:
  name: os-alerts-pd-5
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  pds_conn_error.json: |-
    {
       "name": "PingDataSync Sync Resource Connection Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pds-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdatasync"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"sync-resource-connection-error\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 1",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 1",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796163/ALERT+PingDataSync+Sync+Resource+Connection+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796163/ALERT+PingDataSync+Sync+Resource+Connection+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pds_ops_error.json: |-
    {
       "name": "PingDataSync Sync Resource Operation Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pds-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdatasync"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"sync-resource-operation-error\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992777/ALERT+PingDataSync+Sync+Resource+Operation+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992777/ALERT+PingDataSync+Sync+Resource+Operation+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pds_pipe_backlog.json: |-
    {
       "name": "PingDataSync Sync Pipe Backlog Above Threshold",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pds-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdatasync"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"sync-pipe-backlog-above-threshold\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796171/ALERT+PingDataSync+Sync+Pipe+Backlog+Above+Threshold+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796171/ALERT+PingDataSync+Sync+Pipe+Backlog+Above+Threshold+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pds_user_err.json: |-
    {
       "name": "PingDataSync User-defined Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pds-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdatasync"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"user-defined-error\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796187/ALERT+PingDataSync+User-defined+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796187/ALERT+PingDataSync+User-defined+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pds_user_fatal.json: |-
    {
       "name": "PingDataSync User-defined Fatal",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pds-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdatasync"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"user-defined-fatal\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992785/ALERT+PingDataSync+User-defined+Fatal+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992785/ALERT+PingDataSync+User-defined+Fatal+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pds_work_queue_back.json: |-
    {
       "name": "PingDataSync Work Queue Backlogged",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pds-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdatasync"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"work-queue-backlogged\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992793/ALERT+PingDataSync+Work+Queue+Backlogged+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992793/ALERT+PingDataSync+Work+Queue+Backlogged+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pds_work_queue_full.json: |-
    {
       "name": "PingDataSync Work Queue Full",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pds-errors-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "match_phrase": {
                                "kubernetes.container_name": "pingdatasync"
                              }
                            },
                            {
                              "match_phrase": {
                                "msg": "\"work-queue-full\""
                              }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796195/ALERT+PingDataSync+Work+Queue+Full+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796195/ALERT+PingDataSync+Work+Queue+Full+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
kind: ConfigMap
metadata:
  name: os-alerts-pds
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  pf_authn_exception.json: |-
    {
       "name": "PingFederate Authn Exception",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pf-server-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "term": {
                                "className.keyword": "org.sourceid.saml20.profiles.idp.HandleAuthnRequest"
                              }
                            },
                            {
                               "match_phrase": {
                                 "message": "Exception"
                               }
                             },
                             {
                               "term": {
                                 "kubernetes.labels.role.keyword": "pingfederate-engine"
                               }
                             }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 1",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 1",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992810/ALERT+PingFederate+Authn+Exception+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pf_fatal.json: |-
    {
       "name": "PingFederate Fatal Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pf-server-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "term": {
                                "logLevel.keyword": "FATAL"
                              }
                            },
                            {
                               "term": {
                                 "kubernetes.labels.role.keyword": "pingfederate-engine"
                               }
                            }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 0",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 0",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                        "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992818/ALERT+PingFederate+Fatal+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                        "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992818/ALERT+PingFederate+Fatal+Error+in+CDE\"\n}",                     "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pf_invalid_req.json: |-
    {
       "name": "PingFederate Invalid Request Parameter",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pf-server-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "term": {
                                "className.keyword": "org.sourceid.websso.servlet.reqparam.InvalidRequestParameterException"
                              }
                            },
                            {
                              "term": {
                                "logLevel.keyword": "ERROR"
                               }
                             },
                             {
                               "term": {
                                 "kubernetes.labels.role.keyword": "pingfederate-engine"
                               }
                             }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 1",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 1",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796212/ALERT+PingFederate+Invalid+Request+Parameter+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pf_ldap_conn_lost.json: |-
    {
       "name": "PingFederate LDAP Connection Lost",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pf-server-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                              "term": {
                                "className.keyword": "javax.naming.NamingException"
                              }
                            },
                            {
                               "match_phrase": {
                                 "message": "error code 91"
                               }
                             },
                             {
                               "term": {
                                 "logLevel.keyword": "ERROR"
                               }
                             },
                             {
                               "term": {
                                 "kubernetes.labels.role.keyword": "pingfederate-engine"
                               }
                             }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 1",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 1",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992826/ALERT+PingFederate+LDAP+Connection+Lost+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992826/ALERT+PingFederate+LDAP+Connection+Lost+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pf_missing_id.json: |-
    {
       "name": "PingFederate Profile Message Missing ID",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pf-server-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                               "match_phrase": {
                                 "message": "Profile Message ID Missing"
                               }
                             },
                             {
                               "term": {
                                 "kubernetes.labels.role.keyword": "pingfederate-engine"
                               }
                             }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 1",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 1",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796228/ALERT+PingFederate+Profile+Message+Missing+ID+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796228/ALERT+PingFederate+Profile+Message+Missing+ID+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pf_pingid_conn_lost.json: |-
    {
       "name": "PingFederate PingID Connection Lost",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pf-server-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                               "term": {
                                 "className.keyword": "com.pingidentity.adapters.pingid.DefaultHeartbeatService"
                               }
                             },
                             {
                                "match_phrase": {
                                  "message": "Connection refused"
                                }
                              },
                              {
                                "term": {
                                  "logLevel.keyword": "ERROR"
                                }
                              },
                              {
                                "term": {
                                  "kubernetes.labels.role.keyword": "pingfederate-engine"
                                }
                              }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 1",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 1",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796220/ALERT+PingFederate+PingID+Connection+Lost+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154796220/ALERT+PingFederate+PingID+Connection+Lost+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
  pf_unexpected_runtime.json: |-
    {
       "name": "PingFederate Unexpected Runtime Error",
       "type": "monitor",
       "monitor_type": "bucket_level_monitor",
       "enabled": true,
       "schedule": {
          "period": {
             "unit": "MINUTES",
             "interval": 1
          }
       },
       "inputs": [
          {
             "search": {
                "indices": [
                   "pf-server-*"
                ],
                "query": {
                   "size": 0,
                   "aggregations": {
                      "composite_agg": {
                         "composite": {
                            "sources": [
                               {
                                  "cluster_name": {
                                     "terms": {
                                        "field": "cluster_name.keyword"
                                     }
                                  }
                               }
                            ]
                         },
                         "aggs": {}
                      }
                   },
                   "query": {
                      "bool": {
                         "filter": [
                            {
                               "range": {
                                  "@timestamp": {
                                     "gte": "{{period_end}}||-90s",
                                     "lte": "{{period_end}}",
                                     "format": "epoch_millis"
                                  }
                               }
                            },
                            {
                               "term": {
                                 "className.keyword": "org.sourceid.saml20.profiles.idp.HandleAuthnRequest"
                               }
                             },
                             {
                                "match_phrase": {
                                  "message": "Unexpected Runtime Authn Integration Problem"
                                }
                              },
                              {
                                "term": {
                                  "kubernetes.labels.role.keyword": "pingfederate-engine"
                                }
                              }
                         ]
                      }
                   }
                }
             }
          }
       ],
       "triggers": [
          {
             "bucket_level_trigger": {
                "name": "Count more than 1",
                "severity": "1",
                "condition": {
                   "buckets_path": {
                      "_count": "_count"
                   },
                   "parent_bucket_path": "composite_agg",
                   "script": {
                      "source": "params._count > 1",
                      "lang": "painless"
                   },
                   "gap_policy": "skip"
                },
                "actions": [
                  {
                        "name": "SREAPPALERTS",
                        "destination_id": "sns_sreappalerts",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992834/ALERT+PingFederate+Unexpected+Runtime+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      },
                   {
                        "name": "CUSTOMERHUB",
                        "destination_id": "sns_customerhub",
                        "message_template": {
                          "source": "{\n  \"alert\": \"{{ctx.monitor.name}}\",\n  \"documents\": {{ctx.results.0.hits.total.value}},\n  \"cluster\": \"{{#ctx.newAlerts}}{{bucket_keys}}{{/ctx.newAlerts}}{{#ctx.dedupedAlerts}}{{bucket_keys}}{{/ctx.dedupedAlerts}}\",\n  \"timestamp\": \"{{ctx.periodEnd}}\",\n  \"runbook\": \"https://pingidentity.atlassian.net/wiki/spaces/ST/pages/154992834/ALERT+PingFederate+Unexpected+Runtime+Error+in+CDE\"\n}",
                          "lang": "mustache"
                        },
                        "throttle_enabled": false,
                        "subject_template": {
                          "source": "ALERT: {{ctx.monitor.name}}",
                          "lang": "mustache"
                        },
                        "action_execution_policy": {
                          "action_execution_scope": {
                            "per_alert": {
                              "actionable_alerts": [
                                "DEDUPED",
                                "NEW"
                              ]
                            }
                          }
                        }
                      }
                  ]
             }
          }
       ]
    }
kind: ConfigMap
metadata:
  name: os-alerts-pf
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  backup-jobs.json: |-
    {
      "index_patterns": [
        "backup-jobs-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "0",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-uid": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "job-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "message": {
              "type": "text"
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  general.json: |-
    {
      "index_patterns": [
        "*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 0
    }
  healthchecks.json: |-
    {
      "index_patterns": [
        "healthchecks-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "0",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-template-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "message": {
              "type": "text"
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  ingress-access.json: |-
    {
      "index_patterns": [
        "ingress-access-*"
      ],
      "template": {
        "settings": {
          "index.routing.allocation.require.temp": "hot",
          "index.refresh_interval": "30s",
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1"
        },
        "mappings": {
          "properties": {
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app_kubernetes_io/role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "pod-template-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "app_kubernetes_io/part-of": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "app_kubernetes_io/version": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "app_kubernetes_io/name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "app_kubernetes_io/component": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                }
              }
            },
            "@timestamp": {
              "type": "date"
            },
            "nginx": {
              "properties": {
                "access": {
                  "properties": {
                    "response_code": {
                      "type": "integer"
                    },
                    "geoip": {
                      "properties": {
                        "timezone": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "ip": {
                          "type": "ip"
                        },
                        "latitude": {
                          "type": "float"
                        },
                        "continent_code": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "city_name": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "country_code2": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "country_name": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "dma_code": {
                          "type": "long"
                        },
                        "country_code3": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "location": {
                          "properties": {
                            "lon": {
                              "type": "float"
                            },
                            "lat": {
                              "type": "float"
                            }
                          }
                        },
                        "region_name": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "postal_code": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "longitude": {
                          "type": "float"
                        },
                        "region_code": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        }
                      }
                    },
                    "method": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "upstream_addr": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "upstream_response_length": {
                      "type": "integer"
                    },
                    "user_name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "http_version": {
                      "type": "float"
                    },
                    "url": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "req_id": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "referrer": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "upstream_response_code": {
                      "type": "integer"
                    },
                    "remote_ip": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "request_time": {
                      "type": "float"
                    },
                    "request_length": {
                      "type": "integer"
                    },
                    "body_sent": {
                      "properties": {
                        "bytes": {
                          "type": "integer"
                        }
                      }
                    },
                    "proxy_upstream_name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "upstream_response_time": {
                      "type": "float"
                    },
                    "user_agent": {
                      "properties": {
                        "minor": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "os": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "os_minor": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "os_major": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "os_version": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "version": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "os_patch": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "patch": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "os_full": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "major": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "name": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "os_name": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        },
                        "device": {
                          "type": "text",
                          "fields": {
                            "keyword": {
                              "ignore_above": 256,
                              "type": "keyword"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  ingress-errors.json: |-
    {
      "index_patterns": [
        "ingress-error-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app_kubernetes_io/component": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "app_kubernetes_io/name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "app_kubernetes_io/part-of": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "app_kubernetes_io/role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "app_kubernetes_io/version": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-template-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "nginx": {
              "properties": {
                "error": {
                  "properties": {
                    "connection_id": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "level": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "message": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pid": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "tid": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                }
              }
            },
            "message": {
              "type": "text"
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  logstash.json: |-
    {
      "index_patterns": [
        "logstash-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "dynamic_templates": [
            {
              "message_field": {
                "path_match": "message",
                "mapping": {
                  "norms": false,
                  "type": "text"
                },
                "match_mapping_type": "string"
              }
            },
            {
              "string_fields": {
                "mapping": {
                  "norms": false,
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  },
                  "type": "text"
                },
                "match_mapping_type": "string",
                "match": "*"
              }
            }
          ],
          "date_detection": false,
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "geoip": {
              "dynamic": "true",
              "properties": {
                "ip": {
                  "type": "ip"
                },
                "latitude": {
                  "type": "half_float"
                },
                "location": {
                  "type": "geo_point"
                },
                "longitude": {
                  "type": "half_float"
                }
              }
            },
            "@version": {
              "type": "keyword"
            },
            "timestamp": {
              "type": "text"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-agent-audit.json: |-
    {
      "index_patterns": [
        "pa-agent-audit-*",
        "pa-was-agent-audit-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-api-audit.json: |-
    {
      "index_patterns": [
        "pa-api-audit-*"
      ],
      "template": {
        "settings": {
          "index.routing.allocation.require.temp": "hot",
          "index.refresh_interval": "30s",
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1"
        },
        "mappings": {
          "properties": {
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                }
              }
            },
            "geoip": {
              "type": "object",
              "properties": {
                "ip": {
                  "type": "ip"
                }
              }
            },
            "method": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "subject": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "threat_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "requestUri": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "roundTripMS": {
              "type": "integer"
            },
            "tor_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "responseCode": {
              "type": "integer"
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "exchangeId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@timestamp": {
              "type": "date"
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "client": {
              "type": "ip"
            },
            "authMech": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "trackingId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            }
          }
        },
        "aliases":{
          "pa-audit-ro": {}
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-engine-audit.json: |-
    {
      "index_patterns": [
        "pa-engine-audit-*"
      ],
      "template": {
        "settings": {
          "index.routing.allocation.require.temp": "hot",
          "index.refresh_interval": "30s",
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1"
        },
        "mappings": {
          "properties": {
            "kubernetes": {
              "properties": {
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                }
              }
            },
            "malicious_country": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "subject": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "roundTripMS": {
              "type": "integer"
            },
            "pathPrefix": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "responseCode": {
              "type": "integer"
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "client": {
              "type": "ip"
            },
            "proxyRoundTripMS": {
              "type": "integer"
            },
            "applicationName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "authMech": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "failedRuleType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "trackingId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "geoip": {
              "properties": {
                "timezone": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "ip": {
                  "type": "ip"
                },
                "latitude": {
                  "type": "float"
                },
                "continent_code": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "city_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "country_code2": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "country_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "dma_code": {
                  "type": "long"
                },
                "country_code3": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "location": {
                  "properties": {
                    "lon": {
                      "type": "float"
                    },
                    "lat": {
                      "type": "float"
                    }
                  }
                },
                "region_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "postal_code": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "longitude": {
                  "type": "float"
                },
                "region_code": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                }
              }
            },
            "method": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "resource": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "threat_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "resourceName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "requestUri": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "tor_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "failedRuleName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "known_country": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "exchangeId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@timestamp": {
              "type": "date"
            }
          }
        },
        "aliases":{
          "pa-audit-ro": {}
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-pingaccess.json: |-
    {
      "index_patterns": [
        "pa-pingaccess-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "className": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "exchangeId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-sideband-audit.json: |-
    {
      "index_patterns": [
        "pa-sideband-audit-*",
        "pa-was-sideband-audit-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-sideband-client-audit.json: |-
    {
      "index_patterns": [
        "pa-sideband-client-audit-*",
        "pa-was-sideband-client-audit-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-upgrade.json: |-
    {
      "index_patterns": [
        "pa-upgrade-log-*",
        "pa-was-upgrade-log-*",
        "pa-upgrade-audit-*",
        "pa-was-upgrade-audit-*",
        "pa-upgrade-status-*",
        "pa-was-upgrade-status-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-was-api-audit.json: |-
    {
      "index_patterns": [
        "pa-was-api-audit-*"
      ],
      "template": {
        "settings": {
          "index.routing.allocation.require.temp": "hot",
          "index.refresh_interval": "30s",
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1"
        },
        "mappings": {
          "properties": {
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                }
              }
            },
            "geoip": {
              "type": "object",
              "properties": {
                "ip": {
                  "type": "ip"
                }
              }
            },
            "method": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "subject": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "threat_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "requestUri": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "roundTripMS": {
              "type": "integer"
            },
            "tor_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "responseCode": {
              "type": "integer"
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "exchangeId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@timestamp": {
              "type": "date"
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "client": {
              "type": "ip"
            },
            "authMech": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "trackingId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            }
          }
        },
        "aliases":{
          "pa-was-audit-ro": {}
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-was-engine-audit.json: |-
    {
      "index_patterns": [
        "pa-was-engine-audit-*"
      ],
      "template": {
        "settings": {
          "index.routing.allocation.require.temp": "hot",
          "index.refresh_interval": "30s",
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1"
        },
        "mappings": {
          "properties": {
            "kubernetes": {
              "properties": {
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                }
              }
            },
            "malicious_country": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "subject": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "roundTripMS": {
              "type": "integer"
            },
            "pathPrefix": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "responseCode": {
              "type": "integer"
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "client": {
              "type": "ip"
            },
            "proxyRoundTripMS": {
              "type": "integer"
            },
            "applicationName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "authMech": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "failedRuleType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "trackingId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "geoip": {
              "properties": {
                "timezone": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "ip": {
                  "type": "ip"
                },
                "latitude": {
                  "type": "float"
                },
                "continent_code": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "city_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "country_code2": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "country_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "dma_code": {
                  "type": "long"
                },
                "country_code3": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "location": {
                  "properties": {
                    "lon": {
                      "type": "float"
                    },
                    "lat": {
                      "type": "float"
                    }
                  }
                },
                "region_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "postal_code": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "longitude": {
                  "type": "float"
                },
                "region_code": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                }
              }
            },
            "method": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "resource": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "threat_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "resourceName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "requestUri": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "tor_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "failedRuleName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "known_country": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "exchangeId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@timestamp": {
              "type": "date"
            }
          }
        },
        "aliases":{
          "pa-was-audit-ro": {}
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pa-was-pingaccess.json: |-
    {
      "index_patterns": [
        "pa-was-pingaccess-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "className": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "exchangeId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pc-application.json: |-
    {
      "index_patterns": [
        "pc-application-*",
        "pc-application-ext-*",
        "pc-application-api-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pc-monitor.json: |-
    {
      "index_patterns": [
        "pc-monitor-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pd-access.json: |-
    {
      "index_patterns": [
        "pd-access-*",
        "pds-access-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "conn": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "instanceName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "ldapType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "resultCode": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "preAuthZUsedPrivileges": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "dn": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "type": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "requestOID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "qtime": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "log_type": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "entriesReturned": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "scope": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "additionalInfo": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "authType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "authDN": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "timestamp": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "authFailureReason": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "severity": {
              "type": "long"
            },
            "op": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "requestType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "authFailureID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "msgID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "threat_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "logsource": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "priority": {
              "type": "long"
            },
            "tor_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "attrs": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "filter": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "threadID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@timestamp": {
              "type": "date"
            },
            "resultCodeName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "clientConnectionPolicy": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "etime": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "requesterIP": {
              "type": "ip",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "opPurpose": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "usingAdminSessionWorkerThread": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "facility": {
              "type": "long"
            },
            "severity_label": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "base": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "facility_label": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pd-errors.json: |-
    {
      "index_patterns": [
        "pd-errors-*",
        "pds-errors-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "category": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "instanceName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "class": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_string": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "msgID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "severity": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "threadID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "timestamp": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "triggeredByConn": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "triggeredByOp": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pd-expensive-write-ops.json: |-
    {
      "index_patterns": [
        "pd-expensive-write-ops-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "class": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_string": {
              "type": "text"
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pd-failed-ops.json: |-
    {
      "index_patterns": [
        "pd-failed-ops-*",
        "pds-failed-ops-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "attrs": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "base": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "conn": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "entriesReturned": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "etime": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "filter": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "geoip": {
              "dynamic": "true",
              "properties": {
                "ip": {
                  "type": "ip"
                },
                "latitude": {
                  "type": "half_float"
                },
                "location": {
                  "type": "geo_point"
                },
                "longitude": {
                  "type": "half_float"
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "instanceName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "class": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "ldapType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_string": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "matchedDN": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "msgID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "op": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "passwordUpdateBehaviorAllowPreEncodedPassword": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "preAuthZUsedPrivileges": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "qtime": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requestControls": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requestOID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requestType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requesterDN": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requesterIP": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "resultCode": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "resultCodeName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "scope": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "targetEntry": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "threadID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "timestamp": {
              "type": "text"
            },
            "usedPrivileges": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "usingAdminSessionWorkerThread": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pd-replication.json: |-
    {
      "index_patterns": [
        "pd-replication-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "attrs": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "base": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "conn": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "entriesReturned": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "etime": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "filter": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "geoip": {
              "dynamic": "true",
              "properties": {
                "ip": {
                  "type": "ip"
                },
                "latitude": {
                  "type": "half_float"
                },
                "location": {
                  "type": "geo_point"
                },
                "longitude": {
                  "type": "half_float"
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "instanceName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "class": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "ldapType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_string": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "matchedDN": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "msgID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "op": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "passwordUpdateBehaviorAllowPreEncodedPassword": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "preAuthZUsedPrivileges": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "qtime": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requestControls": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requestOID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requestType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requesterDN": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requesterIP": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "resultCode": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "resultCodeName": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "scope": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "targetEntry": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "threadID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "timestamp": {
              "type": "text"
            },
            "usedPrivileges": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "usingAdminSessionWorkerThread": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pd-server.json: |-
    {
      "index_patterns": [
        "pd-server-*",
        "pds-server-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "addedACIs": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "admin-user": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "category": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "conn": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "class": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_string": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "msgID": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "op": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "removedACIs": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requesterDN": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "requesterIP": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "resource": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "severity": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "timestamp": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "triggeredByConn": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "triggeredByOp": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "userdn": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pdg-access.json: |-
    {
      "index_patterns": [
        "pdg-access-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "bodySentBytes": {
              "type": "integer"
            },
            "client": {
              "type": "ip"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "httpForwardedFor": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "httpVersion": {
              "type": "float"
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-template-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "method": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "referrer": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "responseCode": {
              "type": "integer"
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "url": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "user": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "userAgent": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pdg-error.json: |-
    {
      "index_patterns": [
        "pdg-error-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pds-sync-failed-ops.json: |-
    {
      "index_patterns": [
        "pds-sync-failed-ops-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-admin-api.json: |-
    {
      "index_patterns": [
        "pf-admin-api-*",
        "pf-runtime-api-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "authType": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "clientIP": {
              "type": "ip"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "httpMethod": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "status": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "url": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "user": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-admin-event-detail.json: |-
    {
      "index_patterns": [
        "pf-admin-event-detail-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-admin-log.json: |-
    {
      "index_patterns": [
        "pf-admin-log-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "component": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "event": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "eventDetailId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "geoip": {
              "type": "object"
            },
            "ip": {
              "type": "ip"
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "roles": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "threat_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "tor_intel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "user": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-audit.json: |-
    {
      "index_patterns": [
        "pf-audit-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "role": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "subject": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "long_log_timestamp": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "type": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "log_type": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "protocol": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "event": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "found_geoip": {
              "dynamic": true,
              "properties": {
                "ip": {
                  "type": "ip"
                },
                "latitude": {
                  "type": "half_float"
                },
                "location": {
                  "type": "geo_point"
                },
                "longitude": {
                  "type": "half_float"
                },
                "line": {
                  "type": "geo_shape"
                }
              }
            },
            "timestamp": {
              "type": "text"
            },
            "trackingId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "app": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "severity": {
              "type": "long"
            },
            "geoip": {
              "dynamic": true,
              "properties": {
                "ip": {
                  "type": "ip"
                },
                "latitude": {
                  "type": "half_float"
                },
                "country_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "ignore_above": 256,
                      "type": "keyword"
                    }
                  }
                },
                "location": {
                  "type": "geo_point"
                },
                "longitude": {
                  "type": "half_float"
                }
              }
            },
            "ip": {
              "type": "ip",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "found_country": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "priority": {
              "type": "long"
            },
            "product_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "@timestamp": {
              "type": "date"
            },
            "company_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "connectionId": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "adapterid": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "facility": {
              "type": "long"
            },
            "event_time": {
              "type": "text"
            },
            "host_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "severity_label": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "facility_label": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "status": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        },
          "aliases":{
            "pf-audit-read": {}
          }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-init.json: |-
    {
      "index_patterns": [
        "pf-init-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-jvm-garbage-collection.json: |-
    {
      "index_patterns": [
        "pf-jvm-garbage-collection-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "categories": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "host": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "secondsFromStart": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-provisioner-audit.json: |-
    {
      "index_patterns": [
        "pf-provisioner-audit-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "15m",
          "index.number_of_shards": "1",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-provisioner.json: |-
    {
      "index_patterns": [
        "pf-provisioner-log-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "className": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-requests.json: |-
    {
      "index_patterns": [
        "pf-request-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "timestamp": {
              "type": "text"
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-server.json: |-
    {
      "index_patterns": [
        "pf-server-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "className": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "kubernetes": {
              "properties": {
                "container_hash": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_image": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "container_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "docker_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "host": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "labels": {
                  "properties": {
                    "app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "cluster": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "controller-revision-hash": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "entitled-app": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "pod-reaper": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "role": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    },
                    "statefulset_kubernetes_io/pod-name": {
                      "type": "text",
                      "fields": {
                        "keyword": {
                          "type": "keyword",
                          "ignore_above": 256
                        }
                      }
                    }
                  }
                },
                "namespace_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_id": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                },
                "pod_name": {
                  "type": "text",
                  "fields": {
                    "keyword": {
                      "type": "keyword",
                      "ignore_above": 256
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "log_string": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "message": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "stream": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            },
            "tags": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  pf-transaction.json: |-
    {
      "index_patterns": [
        "pf-transaction-*"
      ],
      "template": {
        "settings": {
          "index.unassigned.node_left.delayed_timeout": "10m",
          "index.number_of_shards": "3",
          "index.number_of_replicas": "1",
          "index.refresh_interval": "30s",
          "index": {
            "routing": {
              "allocation": {
                "require": {
                  "temp": "hot"
                }
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "@version": {
              "type": "text",
              "fields": {
                "keyword": {
                  "ignore_above": 256,
                  "type": "keyword"
                }
              }
            },
            "cluster_name": {
              "type": "text",
              "fields": {
                "keyword": {
                  "type": "keyword",
                  "ignore_above": 256
                }
              }
            }
          }
        }
      },
      "composed_of": [],
      "priority": 100
    }
  shrink-logstash.json: |-
    {
        "index_patterns": [
          "shrink-*-logstash-*"
        ],
        "template": {
          "settings": {
            "index.routing.allocation.require.temp": "hot",
            "index.refresh_interval": "30s",
            "index.unassigned.node_left.delayed_timeout": "10m",
            "index.number_of_shards": "3",
            "index.number_of_replicas": "1"
          },
          "mappings": {
            "dynamic_templates": [
              {
                "message_field": {
                  "path_match": "message",
                  "mapping": {
                    "norms": false,
                    "type": "text"
                  },
                  "match_mapping_type": "string"
                }
              },
              {
                "string_fields": {
                  "mapping": {
                    "norms": false,
                    "fields": {
                      "keyword": {
                        "ignore_above": 256,
                        "type": "keyword"
                      }
                    },
                    "type": "text"
                  },
                  "match_mapping_type": "string",
                  "match": "*"
                }
              }
            ],
            "date_detection": false,
            "properties": {
              "cluster_name": {
                "type": "text",
                "fields": {
                  "keyword": {
                    "ignore_above": 256,
                    "type": "keyword"
                  }
                }
              },
              "@timestamp": {
                "type": "date"
              },
              "geoip": {
                "dynamic": "true",
                "properties": {
                  "ip": {
                    "type": "ip"
                  },
                  "latitude": {
                    "type": "half_float"
                  },
                  "location": {
                    "type": "geo_point"
                  },
                  "longitude": {
                    "type": "half_float"
                  }
                }
              },
              "@version": {
                "type": "keyword"
              },
              "timestamp": {
                "type": "text"
              }
            }
          }
        },
        "composed_of": [],
        "priority": 100
      }
kind: ConfigMap
metadata:
  name: os-index-templates-gb8m7tkmc7
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  ping-general.json: |-
    {
        "policy": {
            "policy_id": "ping_standard_policy",
            "description": "Standard ping policy (after 7 days read-only, after 90 days shrunk and delete, shrunken index will be processed via shrunken policy)",
            "last_updated_time": 1684846142111,
            "schema_version": 17,
            "error_notification": null,
            "default_state": "hot",
            "states": [
                {
                    "name": "hot",
                    "actions": [],
                    "transitions": [
                        {
                            "state_name": "RO",
                            "conditions": {
                                "min_index_age": "7d"
                            }
                        }
                    ]
                },
                {
                    "name": "RO",
                    "actions": [
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "read_only": {}
                        }
                    ],
                    "transitions": [
                        {
                            "state_name": "delete",
                            "conditions": {
                                "min_index_age": "90d"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "actions": [
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "shrink": {
                                "num_new_shards": 1,
                                "target_index_name_template": {
                                    "source": "{{ctx.index}}_shrunken",
                                    "lang": "mustache"
                                },
                                "force_unsafe": true
                            }
                        },
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "delete": {}
                        }
                    ],
                    "transitions": []
                }
            ],
            "ism_template": [
                {
                    "index_patterns": [
                        "pd-*",
                        "pf-*",
                        "pa-*",
                        "pc-*",
                        "pdg-*",
                        "ingress-*",
                        "logstash-*"
                    ],
                    "priority": 1,
                    "last_updated_time": 1684842823048
                }
            ]
        }
    }
  ping-healthchecks.json: |-
    {
        "policy": {
            "policy_id": "ping_7day_policy",
            "description": "Ping policy for healthcheck and backup logs(after 7 days delete)",
            "last_updated_time": 1684842849484,
            "schema_version": 17,
            "error_notification": null,
            "default_state": "hot",
            "states": [
                {
                    "name": "hot",
                    "actions": [],
                    "transitions": [
                        {
                            "state_name": "delete",
                            "conditions": {
                                "min_index_age": "7d"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "actions": [
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "delete": {}
                        }
                    ],
                    "transitions": []
                }
            ],
            "ism_template": [
                {
                    "index_patterns": [
                        "healthchecks-*",
                        "backup-*"
                    ],
                    "priority": 1,
                    "last_updated_time": 1678887761113
                }
            ]
        }
    }
  ping-imported.json: |-
    {
        "policy": {
            "policy_id": "ping_imported",
            "description": "Ping policy for everything imported from ES(after 7 days shrink to 1 shard and delete, shrunken index will be processed via shrunken policy)",
            "last_updated_time": 1684846188882,
            "schema_version": 17,
            "error_notification": null,
            "default_state": "init",
            "states": [
                {
                    "name": "init",
                    "actions": [],
                    "transitions": [
                        {
                            "state_name": "store",
                            "conditions": {
                                "min_index_age": "7d"
                            }
                        }
                    ]
                },
                {
                    "name": "store",
                    "actions": [
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "read_only": {}
                        },
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "shrink": {
                                "num_new_shards": 1,
                                "target_index_name_template": {
                                    "source": "{{ctx.index}}_shrunken",
                                    "lang": "mustache"
                                },
                                "force_unsafe": true
                            }
                        }
                    ],
                    "transitions": [
                        {
                            "state_name": "delete"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "actions": [
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "delete": {}
                        }
                    ],
                    "transitions": []
                }
            ],
            "ism_template": [
                {
                    "index_patterns": [
                        "*-imported"
                    ],
                    "priority": 100,
                    "last_updated_time": 1684841250879
                }
            ]
        }
    }
  ping-shrunken.json: |-
    {
       "policy": {
            "policy_id": "ping_shrunken_policy",
            "description": "Ping policy for shrunken indices(immediately merge, set replica to 0, move to warm, after 180 days delete)",
            "last_updated_time": 1684846300784,
            "schema_version": 17,
            "error_notification": null,
            "default_state": "init",
            "states": [
                {
                    "name": "init",
                    "actions": [
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "replica_count": {
                                "number_of_replicas": 0
                            }
                        },
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "force_merge": {
                                "max_num_segments": 1
                            }
                        },
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "read_only": {}
                        },
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "allocation": {
                                "require": {
                                    "temp": "warm"
                                },
                                "include": {},
                                "exclude": {},
                                "wait_for": false
                            }
                        }
                    ],
                    "transitions": [
                        {
                            "state_name": "delete",
                            "conditions": {
                                "min_index_age": "180d"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "actions": [
                        {
                            "retry": {
                                "count": 3,
                                "backoff": "exponential",
                                "delay": "1m"
                            },
                            "delete": {}
                        }
                    ],
                    "transitions": []
                }
            ],
            "ism_template": [
                {
                    "index_patterns": [
                        "*_shrunken"
                    ],
                    "priority": 500,
                    "last_updated_time": 1684846300784
                }
            ]
        }
    }
kind: ConfigMap
metadata:
  name: os-ism-policies-745k24kdb4
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  sns.json: '[]'
kind: ConfigMap
metadata:
  name: os-notifications-channels-dc7547gk9b
  namespace: elastic-stack-logging
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  name: nr-license-key
  namespace: elastic-stack-logging
type: Opaque
---
apiVersion: v1
data:
  action_groups.yml: X21ldGE6CiAgdHlwZTogImFjdGlvbmdyb3VwcyIKICBjb25maWdfdmVyc2lvbjogMg==
  audit.yml: |
    X21ldGE6CiAgdHlwZTogImF1ZGl0IgogIGNvbmZpZ192ZXJzaW9uOiAyCgpjb25maWc6Ci
    AgIyBlbmFibGUvZGlzYWJsZSBhdWRpdCBsb2dnaW5nCiAgZW5hYmxlZDogdHJ1ZQoKICBh
    dWRpdDoKICAgICMgRW5hYmxlL2Rpc2FibGUgUkVTVCBBUEkgYXVkaXRpbmcKICAgIGVuYW
    JsZV9yZXN0OiB0cnVlCgogICAgIyBDYXRlZ29yaWVzIHRvIGV4Y2x1ZGUgZnJvbSBSRVNU
    IEFQSSBhdWRpdGluZwogICAgZGlzYWJsZWRfcmVzdF9jYXRlZ29yaWVzOgogICAgICAtIE
    FVVEhFTlRJQ0FURUQKICAgICAgLSBHUkFOVEVEX1BSSVZJTEVHRVMKCiAgICAjIEVuYWJs
    ZS9kaXNhYmxlIFRyYW5zcG9ydCBBUEkgYXVkaXRpbmcKICAgIGVuYWJsZV90cmFuc3Bvcn
    Q6IHRydWUKCiAgICAjIENhdGVnb3JpZXMgdG8gZXhjbHVkZSBmcm9tIFRyYW5zcG9ydCBB
    UEkgYXVkaXRpbmcKICAgIGRpc2FibGVkX3RyYW5zcG9ydF9jYXRlZ29yaWVzOgogICAgIC
    AtIEFVVEhFTlRJQ0FURUQKICAgICAgLSBHUkFOVEVEX1BSSVZJTEVHRVMKCiAgICAjIFVz
    ZXJzIHRvIGJlIGV4Y2x1ZGVkIGZyb20gYXVkaXRpbmcuIFdpbGRjYXJkIHBhdHRlcm5zIG
    FyZSBzdXBwb3J0ZWQuIEVnOgogICAgIyBpZ25vcmVfdXNlcnM6IFsidGVzdC11c2VyIiwg
    ImVtcGxveWVlLSoiXQogICAgaWdub3JlX3VzZXJzOgogICAgICAtIGtpYmFuYXNlcnZlcg
    ogICAgICAtIGxvZ3N0YXNoCgogICAgIyBSZXF1ZXN0cyB0byBiZSBleGNsdWRlZCBmcm9t
    IGF1ZGl0aW5nLiBXaWxkY2FyZCBwYXR0ZXJucyBhcmUgc3VwcG9ydGVkLiBFZzoKICAgIC
    MgaWdub3JlX3JlcXVlc3RzOiBbImluZGljZXM6ZGF0YS9yZWFkLyoiLCAiU2VhcmNoUmVx
    dWVzdCJdCiAgICBpZ25vcmVfcmVxdWVzdHM6IFtdCgogICAgIyBMb2cgaW5kaXZpZHVhbC
    BvcGVyYXRpb25zIGluIGEgYnVsayByZXF1ZXN0CiAgICByZXNvbHZlX2J1bGtfcmVxdWVz
    dHM6IGZhbHNlCgogICAgIyBJbmNsdWRlIHRoZSBib2R5IG9mIHRoZSByZXF1ZXN0IChpZi
    BhdmFpbGFibGUpIGZvciBib3RoIFJFU1QgYW5kIHRoZSB0cmFuc3BvcnQgbGF5ZXIKICAg
    IGxvZ19yZXF1ZXN0X2JvZHk6IHRydWUKCiAgICAjIExvZ3MgYWxsIGluZGljZXMgYWZmZW
    N0ZWQgYnkgYSByZXF1ZXN0LiBSZXNvbHZlcyBhbGlhc2VzIGFuZCB3aWxkY2FyZHMvZGF0
    ZSBwYXR0ZXJucwogICAgcmVzb2x2ZV9pbmRpY2VzOiB0cnVlCgogICAgIyBFeGNsdWRlIH
    NlbnNpdGl2ZSBoZWFkZXJzIGZyb20gYmVpbmcgaW5jbHVkZWQgaW4gdGhlIGxvZ3MuIEVn
    OiBBdXRob3JpemF0aW9uCiAgICBleGNsdWRlX3NlbnNpdGl2ZV9oZWFkZXJzOiB0cnVlCg
    ogIGNvbXBsaWFuY2U6CiAgICAjIGVuYWJsZS9kaXNhYmxlIGNvbXBsaWFuY2UKICAgIGVu
    YWJsZWQ6IHRydWUKCiAgICAjIExvZyB1cGRhdGVzIHRvIGludGVybmFsIHNlY3VyaXR5IG
    NoYW5nZXMKICAgIGludGVybmFsX2NvbmZpZzogdHJ1ZQoKICAgICMgTG9nIGV4dGVybmFs
    IGNvbmZpZyBmaWxlcyBmb3IgdGhlIG5vZGUKICAgIGV4dGVybmFsX2NvbmZpZzogZmFsc2
    UKCiAgICAjIExvZyBvbmx5IG1ldGFkYXRhIG9mIHRoZSBkb2N1bWVudCBmb3IgcmVhZCBl
    dmVudHMKICAgIHJlYWRfbWV0YWRhdGFfb25seTogdHJ1ZQoKICAgICMgTWFwIG9mIGluZG
    V4ZXMgYW5kIGZpZWxkcyB0byBtb25pdG9yIGZvciByZWFkIGV2ZW50cy4gV2lsZGNhcmQg
    cGF0dGVybnMgYXJlIHN1cHBvcnRlZCBmb3IgYm90aCBpbmRleCBuYW1lcyBhbmQgZmllbG
    RzLiBFZzoKICAgICMgcmVhZF93YXRjaGVkX2ZpZWxkczogewogICAgIyAgICJ0d2l0dGVy
    IjogWyJtZXNzYWdlIl0KICAgICMgICAibG9ncy0qIjogWyJpZCIsICJhdHRyKiJdCiAgIC
    AjIH0KICAgIHJlYWRfd2F0Y2hlZF9maWVsZHM6IHt9CgogICAgIyBMaXN0IG9mIHVzZXJz
    IHRvIGlnbm9yZSBmb3IgcmVhZCBldmVudHMuIFdpbGRjYXJkIHBhdHRlcm5zIGFyZSBzdX
    Bwb3J0ZWQuIEVnOgogICAgIyByZWFkX2lnbm9yZV91c2VyczogWyJ0ZXN0LXVzZXIiLCAi
    ZW1wbG95ZWUtKiJdCiAgICByZWFkX2lnbm9yZV91c2VyczoKICAgICAgLSBraWJhbmFzZX
    J2ZXIKICAgICAgLSBsb2dzdGFzaAoKICAgICMgTG9nIG9ubHkgbWV0YWRhdGEgb2YgdGhl
    IGRvY3VtZW50IGZvciB3cml0ZSBldmVudHMKICAgIHdyaXRlX21ldGFkYXRhX29ubHk6IH
    RydWUKCiAgICAjIExvZyBvbmx5IGRpZmZzIGZvciBkb2N1bWVudCB1cGRhdGVzCiAgICB3
    cml0ZV9sb2dfZGlmZnM6IGZhbHNlCgogICAgIyBMaXN0IG9mIGluZGljZXMgdG8gd2F0Y2
    ggZm9yIHdyaXRlIGV2ZW50cy4gV2lsZGNhcmQgcGF0dGVybnMgYXJlIHN1cHBvcnRlZAog
    ICAgIyB3cml0ZV93YXRjaGVkX2luZGljZXM6IFsidHdpdHRlciIsICJsb2dzLSoiXQogIC
    Agd3JpdGVfd2F0Y2hlZF9pbmRpY2VzOiBbXQoKICAgICMgTGlzdCBvZiB1c2VycyB0byBp
    Z25vcmUgZm9yIHdyaXRlIGV2ZW50cy4gV2lsZGNhcmQgcGF0dGVybnMgYXJlIHN1cHBvcn
    RlZC4gRWc6CiAgICAjIHdyaXRlX2lnbm9yZV91c2VyczogWyJ0ZXN0LXVzZXIiLCAiZW1w
    bG95ZWUtKiJdCiAgICB3cml0ZV9pZ25vcmVfdXNlcnM6CiAgICAgIC0ga2liYW5hc2Vydm
    VyCiAgICAgIC0gbG9nc3Rhc2g=
  config.yml: |
    X21ldGE6CiAgdHlwZTogImNvbmZpZyIKICBjb25maWdfdmVyc2lvbjogMgoKY29uZmlnOg
    ogIGR5bmFtaWM6CiAgICAjIFNldCBmaWx0ZXJlZF9hbGlhc19tb2RlIHRvICdkaXNhbGxv
    dycgdG8gZm9yYmlkIG1vcmUgdGhhbiAyIGZpbHRlcmVkIGFsaWFzZXMgcGVyIGluZGV4Ci
    AgICAjIFNldCBmaWx0ZXJlZF9hbGlhc19tb2RlIHRvICd3YXJuJyB0byBhbGxvdyBtb3Jl
    IHRoYW4gMiBmaWx0ZXJlZCBhbGlhc2VzIHBlciBpbmRleCBidXQgd2FybnMgYWJvdXQgaX
    QgKGRlZmF1bHQpCiAgICAjIFNldCBmaWx0ZXJlZF9hbGlhc19tb2RlIHRvICdub3dhcm4n
    IHRvIGFsbG93IG1vcmUgdGhhbiAyIGZpbHRlcmVkIGFsaWFzZXMgcGVyIGluZGV4IHNpbG
    VudGx5CiAgICAjZmlsdGVyZWRfYWxpYXNfbW9kZTogd2FybgogICAgI2RvX25vdF9mYWls
    X29uX2ZvcmJpZGRlbjogZmFsc2UKICAgIGtpYmFuYToKICAgICAjS2liYW5hIG11bHRpdG
    VuYW5jeQogICAgICBtdWx0aXRlbmFuY3lfZW5hYmxlZDogZmFsc2UKICAgICAgc2VydmVy
    X3VzZXJuYW1lOiBraWJhbmFzZXJ2ZXIKICAgICAgaW5kZXg6ICcua2liYW5hJwogICAgaH
    R0cDoKICAgICAgYW5vbnltb3VzX2F1dGhfZW5hYmxlZDogdHJ1ZQogICAgICB4ZmY6CiAg
    ICAgICAgZW5hYmxlZDogZmFsc2UKICAgICAgICBpbnRlcm5hbFByb3hpZXM6ICcxOTJcLj
    E2OFwuMFwuMTB8MTkyXC4xNjhcLjBcLjExJyAjIHJlZ2V4IHBhdHRlcm4KICAgICAgICAj
    aW50ZXJuYWxQcm94aWVzOiAnLionICMgdHJ1c3QgYWxsIGludGVybmFsIHByb3hpZXMsIH
    JlZ2V4IHBhdHRlcm4KICAgICAgICAjcmVtb3RlSXBIZWFkZXI6ICAneC1mb3J3YXJkZWQt
    Zm9yJwogICAgICAgICMjIyMjIyBzZWUgaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YX
    NlLzcvZG9jcy9hcGkvamF2YS91dGlsL3JlZ2V4L1BhdHRlcm4uaHRtbCBmb3IgcmVnZXgg
    aGVscAogICAgICAgICMjIyMjIyBtb3JlIGluZm9ybWF0aW9uIGFib3V0IFhGRiBodHRwcz
    ovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9YLUZvcndhcmRlZC1Gb3IKICAgICAgICAjIyMj
    IyMgYW5kIGhlcmUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzkKICAgIC
    AgICAjIyMjIyMgYW5kIGh0dHBzOi8vdG9tY2F0LmFwYWNoZS5vcmcvdG9tY2F0LTguMC1k
    b2MvY29uZmlnL3ZhbHZlLmh0bWwjUmVtb3RlX0lQX1ZhbHZlCiAgICBhdXRoYzoKICAgIC
    Aga2VyYmVyb3NfYXV0aF9kb21haW46CiAgICAgICAgaHR0cF9lbmFibGVkOiBmYWxzZQog
    ICAgICAgIHRyYW5zcG9ydF9lbmFibGVkOiBmYWxzZQogICAgICAgIG9yZGVyOiA2CiAgIC
    AgICAgaHR0cF9hdXRoZW50aWNhdG9yOgogICAgICAgICAgdHlwZToga2VyYmVyb3MKICAg
    ICAgICAgIGNoYWxsZW5nZTogdHJ1ZQogICAgICAgICAgY29uZmlnOgogICAgICAgICAgIC
    AjIElmIHRydWUgYSBsb3Qgb2Yga2VyYmVyb3Mvc2VjdXJpdHkgcmVsYXRlZCBkZWJ1Z2dp
    bmcgb3V0cHV0IHdpbGwgYmUgbG9nZ2VkIHRvIHN0YW5kYXJkIG91dAogICAgICAgICAgIC
    BrcmJfZGVidWc6IGZhbHNlCiAgICAgICAgICAgICMgSWYgdHJ1ZSB0aGVuIHRoZSByZWFs
    bSB3aWxsIGJlIHN0cmlwcGVkIGZyb20gdGhlIHVzZXIgbmFtZQogICAgICAgICAgICBzdH
    JpcF9yZWFsbV9mcm9tX3ByaW5jaXBhbDogdHJ1ZQogICAgICAgIGF1dGhlbnRpY2F0aW9u
    X2JhY2tlbmQ6CiAgICAgICAgICB0eXBlOiBub29wCiAgICAgIGJhc2ljX2ludGVybmFsX2
    F1dGhfZG9tYWluOgogICAgICAgIGRlc2NyaXB0aW9uOiAiQXV0aGVudGljYXRlIHZpYSBI
    VFRQIEJhc2ljIGFnYWluc3QgaW50ZXJuYWwgdXNlcnMgZGF0YWJhc2UiCiAgICAgICAgaH
    R0cF9lbmFibGVkOiB0cnVlCiAgICAgICAgdHJhbnNwb3J0X2VuYWJsZWQ6IHRydWUKICAg
    ICAgICBvcmRlcjogNAogICAgICAgIGh0dHBfYXV0aGVudGljYXRvcjoKICAgICAgICAgIH
    R5cGU6IGJhc2ljCiAgICAgICAgICBjaGFsbGVuZ2U6IHRydWUKICAgICAgICBhdXRoZW50
    aWNhdGlvbl9iYWNrZW5kOgogICAgICAgICAgdHlwZTogaW50ZXJuCiAgICAgIHByb3h5X2
    F1dGhfZG9tYWluOgogICAgICAgIGRlc2NyaXB0aW9uOiAiQXV0aGVudGljYXRlIHZpYSBw
    cm94eSIKICAgICAgICBodHRwX2VuYWJsZWQ6IGZhbHNlCiAgICAgICAgdHJhbnNwb3J0X2
    VuYWJsZWQ6IGZhbHNlCiAgICAgICAgb3JkZXI6IDMKICAgICAgICBodHRwX2F1dGhlbnRp
    Y2F0b3I6CiAgICAgICAgICB0eXBlOiBwcm94eQogICAgICAgICAgY2hhbGxlbmdlOiBmYW
    xzZQogICAgICAgICAgY29uZmlnOgogICAgICAgICAgICB1c2VyX2hlYWRlcjogIngtcHJv
    eHktdXNlciIKICAgICAgICAgICAgcm9sZXNfaGVhZGVyOiAieC1wcm94eS1yb2xlcyIKIC
    AgICAgICBhdXRoZW50aWNhdGlvbl9iYWNrZW5kOgogICAgICAgICAgdHlwZTogbm9vcAog
    ICAgICBqd3RfYXV0aF9kb21haW46CiAgICAgICAgZGVzY3JpcHRpb246ICJBdXRoZW50aW
    NhdGUgdmlhIEpzb24gV2ViIFRva2VuIgogICAgICAgIGh0dHBfZW5hYmxlZDogZmFsc2UK
    ICAgICAgICB0cmFuc3BvcnRfZW5hYmxlZDogZmFsc2UKICAgICAgICBvcmRlcjogMAogIC
    AgICAgIGh0dHBfYXV0aGVudGljYXRvcjoKICAgICAgICAgIHR5cGU6IGp3dAogICAgICAg
    ICAgY2hhbGxlbmdlOiBmYWxzZQogICAgICAgICAgY29uZmlnOgogICAgICAgICAgICBzaW
    duaW5nX2tleTogImJhc2U2NCBlbmNvZGVkIEhNQUMga2V5IG9yIHB1YmxpYyBSU0EvRUNE
    U0EgcGVtIGtleSIKICAgICAgICAgICAgand0X2hlYWRlcjogIkF1dGhvcml6YXRpb24iCi
    AgICAgICAgICAgIGp3dF91cmxfcGFyYW1ldGVyOiBudWxsCiAgICAgICAgICAgIHJvbGVz
    X2tleTogbnVsbAogICAgICAgICAgICBzdWJqZWN0X2tleTogbnVsbAogICAgICAgIGF1dG
    hlbnRpY2F0aW9uX2JhY2tlbmQ6CiAgICAgICAgICB0eXBlOiBub29wCiAgICAgIGNsaWVu
    dGNlcnRfYXV0aF9kb21haW46CiAgICAgICAgZGVzY3JpcHRpb246ICJBdXRoZW50aWNhdG
    UgdmlhIFNTTCBjbGllbnQgY2VydGlmaWNhdGVzIgogICAgICAgIGh0dHBfZW5hYmxlZDog
    ZmFsc2UKICAgICAgICB0cmFuc3BvcnRfZW5hYmxlZDogZmFsc2UKICAgICAgICBvcmRlcj
    ogMgogICAgICAgIGh0dHBfYXV0aGVudGljYXRvcjoKICAgICAgICAgIHR5cGU6IGNsaWVu
    dGNlcnQKICAgICAgICAgIGNvbmZpZzoKICAgICAgICAgICAgdXNlcm5hbWVfYXR0cmlidX
    RlOiBjbiAjb3B0aW9uYWwsIGlmIG9taXR0ZWQgRE4gYmVjb21lcyB1c2VybmFtZQogICAg
    ICAgICAgY2hhbGxlbmdlOiBmYWxzZQogICAgICAgIGF1dGhlbnRpY2F0aW9uX2JhY2tlbm
    Q6CiAgICAgICAgICB0eXBlOiBub29wCiAgICAgIGxkYXA6CiAgICAgICAgZGVzY3JpcHRp
    b246ICJBdXRoZW50aWNhdGUgdmlhIExEQVAgb3IgQWN0aXZlIERpcmVjdG9yeSIKICAgIC
    AgICBodHRwX2VuYWJsZWQ6IGZhbHNlCiAgICAgICAgdHJhbnNwb3J0X2VuYWJsZWQ6IGZh
    bHNlCiAgICAgICAgb3JkZXI6IDUKICAgICAgICBodHRwX2F1dGhlbnRpY2F0b3I6CiAgIC
    AgICAgICB0eXBlOiBiYXNpYwogICAgICAgICAgY2hhbGxlbmdlOiBmYWxzZQogICAgICAg
    IGF1dGhlbnRpY2F0aW9uX2JhY2tlbmQ6CiAgICAgICAgICAjIExEQVAgYXV0aGVudGljYX
    Rpb24gYmFja2VuZCAoYXV0aGVudGljYXRlIHVzZXJzIGFnYWluc3QgYSBMREFQIG9yIEFj
    dGl2ZSBEaXJlY3RvcnkpCiAgICAgICAgICB0eXBlOiBsZGFwCiAgICAgICAgICBjb25maW
    c6CiAgICAgICAgICAgICMgZW5hYmxlIGxkYXBzCiAgICAgICAgICAgIGVuYWJsZV9zc2w6
    IGZhbHNlCiAgICAgICAgICAgICMgZW5hYmxlIHN0YXJ0IHRscywgZW5hYmxlX3NzbCBzaG
    91bGQgYmUgZmFsc2UKICAgICAgICAgICAgZW5hYmxlX3N0YXJ0X3RsczogZmFsc2UKICAg
    ICAgICAgICAgIyBzZW5kIGNsaWVudCBjZXJ0aWZpY2F0ZQogICAgICAgICAgICBlbmFibG
    Vfc3NsX2NsaWVudF9hdXRoOiBmYWxzZQogICAgICAgICAgICAjIHZlcmlmeSBsZGFwIGhv
    c3RuYW1lCiAgICAgICAgICAgIHZlcmlmeV9ob3N0bmFtZXM6IHRydWUKICAgICAgICAgIC
    AgaG9zdHM6CiAgICAgICAgICAgIC0gbG9jYWxob3N0OjgzODkKICAgICAgICAgICAgYmlu
    ZF9kbjogbnVsbAogICAgICAgICAgICBwYXNzd29yZDogbnVsbAogICAgICAgICAgICB1c2
    VyYmFzZTogJ291PXBlb3BsZSxkYz1leGFtcGxlLGRjPWNvbScKICAgICAgICAgICAgIyBG
    aWx0ZXIgdG8gc2VhcmNoIGZvciB1c2VycyAoY3VycmVudGx5IGluIHRoZSB3aG9sZSBzdW
    J0cmVlIGJlbmVhdGggdXNlcmJhc2UpCiAgICAgICAgICAgICMgezB9IGlzIHN1YnN0aXR1
    dGVkIHdpdGggdGhlIHVzZXJuYW1lCiAgICAgICAgICAgIHVzZXJzZWFyY2g6ICcoc0FNQW
    Njb3VudE5hbWU9ezB9KScKICAgICAgICAgICAgIyBVc2UgdGhpcyBhdHRyaWJ1dGUgZnJv
    bSB0aGUgdXNlciBhcyB1c2VybmFtZSAoaWYgbm90IHNldCB0aGVuIEROIGlzIHVzZWQpCi
    AgICAgICAgICAgIHVzZXJuYW1lX2F0dHJpYnV0ZTogbnVsbAogICAgYXV0aHo6CiAgICAg
    IHJvbGVzX2Zyb21fbXlsZGFwOgogICAgICAgIGRlc2NyaXB0aW9uOiAiQXV0aG9yaXplIH
    ZpYSBMREFQIG9yIEFjdGl2ZSBEaXJlY3RvcnkiCiAgICAgICAgaHR0cF9lbmFibGVkOiBm
    YWxzZQogICAgICAgIHRyYW5zcG9ydF9lbmFibGVkOiBmYWxzZQogICAgICAgIGF1dGhvcm
    l6YXRpb25fYmFja2VuZDoKICAgICAgICAgICMgTERBUCBhdXRob3JpemF0aW9uIGJhY2tl
    bmQgKGdhdGhlciByb2xlcyBmcm9tIGEgTERBUCBvciBBY3RpdmUgRGlyZWN0b3J5LCB5b3
    UgaGF2ZSB0byBjb25maWd1cmUgdGhlIGFib3ZlIExEQVAgYXV0aGVudGljYXRpb24gYmFj
    a2VuZCBzZXR0aW5ncyB0b28pCiAgICAgICAgICB0eXBlOiBsZGFwCiAgICAgICAgICBjb2
    5maWc6CiAgICAgICAgICAgICMgZW5hYmxlIGxkYXBzCiAgICAgICAgICAgIGVuYWJsZV9z
    c2w6IGZhbHNlCiAgICAgICAgICAgICMgZW5hYmxlIHN0YXJ0IHRscywgZW5hYmxlX3NzbC
    BzaG91bGQgYmUgZmFsc2UKICAgICAgICAgICAgZW5hYmxlX3N0YXJ0X3RsczogZmFsc2UK
    ICAgICAgICAgICAgIyBzZW5kIGNsaWVudCBjZXJ0aWZpY2F0ZQogICAgICAgICAgICBlbm
    FibGVfc3NsX2NsaWVudF9hdXRoOiBmYWxzZQogICAgICAgICAgICAjIHZlcmlmeSBsZGFw
    IGhvc3RuYW1lCiAgICAgICAgICAgIHZlcmlmeV9ob3N0bmFtZXM6IHRydWUKICAgICAgIC
    AgICAgaG9zdHM6CiAgICAgICAgICAgIC0gbG9jYWxob3N0OjgzODkKICAgICAgICAgICAg
    YmluZF9kbjogbnVsbAogICAgICAgICAgICBwYXNzd29yZDogbnVsbAogICAgICAgICAgIC
    Byb2xlYmFzZTogJ291PWdyb3VwcyxkYz1leGFtcGxlLGRjPWNvbScKICAgICAgICAgICAg
    IyBGaWx0ZXIgdG8gc2VhcmNoIGZvciByb2xlcyAoY3VycmVudGx5IGluIHRoZSB3aG9sZS
    BzdWJ0cmVlIGJlbmVhdGggcm9sZWJhc2UpCiAgICAgICAgICAgICMgezB9IGlzIHN1YnN0
    aXR1dGVkIHdpdGggdGhlIEROIG9mIHRoZSB1c2VyCiAgICAgICAgICAgICMgezF9IGlzIH
    N1YnN0aXR1dGVkIHdpdGggdGhlIHVzZXJuYW1lCiAgICAgICAgICAgICMgezJ9IGlzIHN1
    YnN0aXR1dGVkIHdpdGggYW4gYXR0cmlidXRlIHZhbHVlIGZyb20gdXNlcidzIGRpcmVjdG
    9yeSBlbnRyeSwgb2YgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlci4gVXNlIHVzZXJyb2xlYXR0
    cmlidXRlIHRvIHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZQogICAgICAgIC
    AgICByb2xlc2VhcmNoOiAnKG1lbWJlcj17MH0pJwogICAgICAgICAgICAjIFNwZWNpZnkg
    dGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB3aGljaCB2YWx1ZSBzaG91bGQgYmUgc3Vic3
    RpdHV0ZWQgd2l0aCB7Mn0gYWJvdmUKICAgICAgICAgICAgdXNlcnJvbGVhdHRyaWJ1dGU6
    IG51bGwKICAgICAgICAgICAgIyBSb2xlcyBhcyBhbiBhdHRyaWJ1dGUgb2YgdGhlIHVzZX
    IgZW50cnkKICAgICAgICAgICAgdXNlcnJvbGVuYW1lOiBkaXNhYmxlZAogICAgICAgICAg
    ICAjdXNlcnJvbGVuYW1lOiBtZW1iZXJPZgogICAgICAgICAgICAjIFRoZSBhdHRyaWJ1dG
    UgaW4gYSByb2xlIGVudHJ5IGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhhdCByb2xlLCBE
    ZWZhdWx0IGlzICJuYW1lIi4KICAgICAgICAgICAgIyBDYW4gYWxzbyBiZSAiZG4iIHRvIH
    VzZSB0aGUgZnVsbCBETiBhcyByb2xlbmFtZS4KICAgICAgICAgICAgcm9sZW5hbWU6IGNu
    CiAgICAgICAgICAgICMgUmVzb2x2ZSBuZXN0ZWQgcm9sZXMgdHJhbnNpdGl2ZSAocm9sZX
    Mgd2hpY2ggYXJlIG1lbWJlcnMgb2Ygb3RoZXIgcm9sZXMgYW5kIHNvIG9uIC4uLikKICAg
    ICAgICAgICAgcmVzb2x2ZV9uZXN0ZWRfcm9sZXM6IHRydWUKICAgICAgICAgICAgdXNlcm
    Jhc2U6ICdvdT1wZW9wbGUsZGM9ZXhhbXBsZSxkYz1jb20nCiAgICAgICAgICAgICMgRmls
    dGVyIHRvIHNlYXJjaCBmb3IgdXNlcnMgKGN1cnJlbnRseSBpbiB0aGUgd2hvbGUgc3VidH
    JlZSBiZW5lYXRoIHVzZXJiYXNlKQogICAgICAgICAgICAjIHswfSBpcyBzdWJzdGl0dXRl
    ZCB3aXRoIHRoZSB1c2VybmFtZQogICAgICAgICAgICB1c2Vyc2VhcmNoOiAnKHVpZD17MH
    0pJwogICAgICAgICAgICAjIFNraXAgdXNlcnMgbWF0Y2hpbmcgYSB1c2VyIG5hbWUsIGEg
    d2lsZGNhcmQgb3IgYSByZWdleCBwYXR0ZXJuCiAgICAgICAgICAgICNza2lwX3VzZXJzOg
    ogICAgICAgICAgICAjICAtICdjbj1NaWNoYWVsIEphY2tzb24sb3UqcGVvcGxlLG89VEVT
    VCcKICAgICAgICAgICAgIyAgLSAnL1xTKi8nCiAgICAgIHJvbGVzX2Zyb21fYW5vdGhlcl
    9sZGFwOgogICAgICAgIGRlc2NyaXB0aW9uOiAiQXV0aG9yaXplIHZpYSBhbm90aGVyIEFj
    dGl2ZSBEaXJlY3RvcnkiCiAgICAgICAgaHR0cF9lbmFibGVkOiBmYWxzZQogICAgICAgIH
    RyYW5zcG9ydF9lbmFibGVkOiBmYWxzZQogICAgICAgIGF1dGhvcml6YXRpb25fYmFja2Vu
    ZDoKICAgICAgICAgIHR5cGU6IGxkYXA=
  internal_users.yml: |
    X21ldGE6CiAgdHlwZTogImludGVybmFsdXNlcnMiCiAgY29uZmlnX3ZlcnNpb246IDIKCi
    MgRGVmaW5lIHlvdXIgaW50ZXJuYWwgdXNlcnMgaGVyZQoKCmFkbWluOgogIGhhc2g6ICIk
    MnkkMTIkeDBXL2JiLnJDRXhudERzenpUUU1HTzQ2QmpoY2FiQmxZL2o0NGNMUWxRZ3BOQ1
    BJbWIwMG0iCiAgcmVzZXJ2ZWQ6IHRydWUKICBiYWNrZW5kX3JvbGVzOgogIC0gImFkbWlu
    IgogIGRlc2NyaXB0aW9uOiAiQWRtaW4gdXNlciIKCmtpYmFuYXNlcnZlcjoKICBoYXNoOi
    AiJDJ5JDEyJEtMaUNIbXRJaVhwb2pwc3JpcUZCQmVkbEh5dU9CNlFTV0ZLOTMyUzFERUx3
    ektkWjBpb0FxIgogIHJlc2VydmVkOiB0cnVlCiAgZGVzY3JpcHRpb246ICJPcGVuU2Vhcm
    NoIERhc2hib2FyZHMgdXNlciIKCmxvZ3N0YXNoOgogIGhhc2g6ICIkMnkkMTIkZVRDSVJX
    aXVzLkxpeDUvNXp3SndIT0pDcUlMUW1hV0RSeDZmbjNJRFI1NEs1OXNud2xVUmEiCiAgcm
    VzZXJ2ZWQ6IHRydWUKICBiYWNrZW5kX3JvbGVzOgogIC0gImxvZ3N0YXNoIgogIGRlc2Ny
    aXB0aW9uOiAiTG9nc3Rhc2ggdXNlciIKCgppbmRleG1pZ3JhdGlvbjoKICBoYXNoOiAiJD
    J5JDEyJG5uTnh1enBGY0JscE8vRmVzblVBN084b1pSRkYuekJaYUJwS0trMHplb2tZT3px
    Llk0cGx1IgogIHJlc2VydmVkOiB0cnVlCiAgZGVzY3JpcHRpb246ICJJbmRleCBtaWdyYX
    Rpb24gdXNlciIKCmJvb3RzdHJhcDoKICBoYXNoOiAiJDJ5JDEyJHJLYmoxZVZZcHREOXV3
    NUI3Q09YNHVPS2ZmQ29UTGFEd1pmdFc4VktWd1ptbVQ0bUpSV3N5IgogIHJlc2VydmVkOi
    B0cnVlCiAgZGVzY3JpcHRpb246ICJCb290c3RyYXAgdXNlciI=
  nodes_dn.yml: X21ldGE6CiAgdHlwZTogIm5vZGVzZG4iCiAgY29uZmlnX3ZlcnNpb246IDI=
  roles.yml: |
    X21ldGE6CiAgdHlwZTogInJvbGVzIgogIGNvbmZpZ192ZXJzaW9uOiAyCgojIFJlc3RyaW
    N0IHVzZXJzIHNvIHRoZXkgY2FuIG9ubHkgdmlldyB2aXN1YWxpemF0aW9uIGFuZCBkYXNo
    Ym9hcmQgb24gT3BlblNlYXJjaERhc2hib2FyZHMKa2liYW5hX3JlYWRfb25seToKICByZX
    NlcnZlZDogdHJ1ZQoKbG9nc3Rhc2hfd3JpdGU6CiAgcmVzZXJ2ZWQ6IHRydWUKICBpbmRl
    eF9wZXJtaXNzaW9uczoKICAgIC0gaW5kZXhfcGF0dGVybnM6CiAgICAgICAgLSAnKicKIC
    AgICAgYWxsb3dlZF9hY3Rpb25zOgogICAgICAgIC0gJ2NydWQnCiAgICAgICAgLSAnY3Jl
    YXRlX2luZGV4JwoKIyBUaGUgc2VjdXJpdHkgUkVTVCBBUEkgYWNjZXNzIHJvbGUgaXMgdX
    NlZCB0byBhc3NpZ24gc3BlY2lmaWMgdXNlcnMgYWNjZXNzIHRvIGNoYW5nZSB0aGUgc2Vj
    dXJpdHkgc2V0dGluZ3MgdGhyb3VnaCB0aGUgUkVTVCBBUEkuCnNlY3VyaXR5X3Jlc3RfYX
    BpX2FjY2VzczoKICByZXNlcnZlZDogdHJ1ZQoKIyBBbGxvd3MgdXNlcnMgdG8gdmlldyBt
    b25pdG9ycywgZGVzdGluYXRpb25zIGFuZCBhbGVydHMKYWxlcnRpbmdfcmVhZF9hY2Nlc3
    M6CiAgcmVzZXJ2ZWQ6IHRydWUKICBjbHVzdGVyX3Blcm1pc3Npb25zOgogICAgLSAnY2x1
    c3RlcjphZG1pbi9vcGVuZGlzdHJvL2FsZXJ0aW5nL2FsZXJ0cy9nZXQnCiAgICAtICdjbH
    VzdGVyOmFkbWluL29wZW5kaXN0cm8vYWxlcnRpbmcvZGVzdGluYXRpb24vZ2V0JwogICAg
    LSAnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL2FsZXJ0aW5nL2Rlc3RpbmF0aW9uL2VtYW
    lsX2dyb3VwL3NlYXJjaCcKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9hbGVy
    dGluZy9kZXN0aW5hdGlvbi9lbWFpbF9hY2NvdW50L3NlYXJjaCcKICAgIC0gJ2NsdXN0ZX
    I6YWRtaW4vb3BlbmRpc3Ryby9hbGVydGluZy9tb25pdG9yL2dldCcKICAgIC0gJ2NsdXN0
    ZXI6YWRtaW4vb3BlbmRpc3Ryby9hbGVydGluZy9tb25pdG9yL3NlYXJjaCcKCiMgQWxsb3
    dzIHVzZXJzIHRvIHZpZXcgYW5kIGFja25vd2xlZGdlIGFsZXJ0cwphbGVydGluZ19hY2tf
    YWxlcnRzOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW9uczoKICAgIC
    0gJ2NsdXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9hbGVydGluZy9hbGVydHMvKicKCiMgQWxs
    b3dzIHVzZXJzIHRvIHVzZSBhbGwgYWxlcnRpbmcgZnVuY3Rpb25hbGl0eQphbGVydGluZ1
    9mdWxsX2FjY2VzczoKICByZXNlcnZlZDogdHJ1ZQogIGNsdXN0ZXJfcGVybWlzc2lvbnM6
    CiAgICAtICdjbHVzdGVyX21vbml0b3InCiAgICAtICdjbHVzdGVyOmFkbWluL29wZW5kaX
    N0cm8vYWxlcnRpbmcvKicKICBpbmRleF9wZXJtaXNzaW9uczoKICAgIC0gaW5kZXhfcGF0
    dGVybnM6CiAgICAgICAgLSAnKicKICAgICAgYWxsb3dlZF9hY3Rpb25zOgogICAgICAgIC
    0gJ2luZGljZXNfbW9uaXRvcicKICAgICAgICAtICdpbmRpY2VzOmFkbWluL2FsaWFzZXMv
    Z2V0JwogICAgICAgIC0gJ2luZGljZXM6YWRtaW4vbWFwcGluZ3MvZ2V0JwoKIyBBbGxvdy
    B1c2VycyB0byByZWFkIEFub21hbHkgRGV0ZWN0aW9uIGRldGVjdG9ycyBhbmQgcmVzdWx0
    cwphbm9tYWx5X3JlYWRfYWNjZXNzOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZX
    JtaXNzaW9uczoKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9hZC9kZXRlY3Rv
    ci9pbmZvJwogICAgLSAnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL2FkL2RldGVjdG9yL3
    NlYXJjaCcKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9hZC9kZXRlY3RvcnMv
    Z2V0JwogICAgLSAnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL2FkL3Jlc3VsdC9zZWFyY2
    gnCiAgICAtICdjbHVzdGVyOmFkbWluL29wZW5kaXN0cm8vYWQvdGFza3Mvc2VhcmNoJwog
    ICAgLSAnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL2FkL2RldGVjdG9yL3ZhbGlkYXRlJw
    ogICAgLSAnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL2FkL3Jlc3VsdC90b3BBbm9tYWxp
    ZXMnCgojIEFsbG93cyB1c2VycyB0byB1c2UgYWxsIEFub21hbHkgRGV0ZWN0aW9uIGZ1bm
    N0aW9uYWxpdHkKYW5vbWFseV9mdWxsX2FjY2VzczoKICByZXNlcnZlZDogdHJ1ZQogIGNs
    dXN0ZXJfcGVybWlzc2lvbnM6CiAgICAtICdjbHVzdGVyX21vbml0b3InCiAgICAtICdjbH
    VzdGVyOmFkbWluL29wZW5kaXN0cm8vYWQvKicKICBpbmRleF9wZXJtaXNzaW9uczoKICAg
    IC0gaW5kZXhfcGF0dGVybnM6CiAgICAgICAgLSAnKicKICAgICAgYWxsb3dlZF9hY3Rpb2
    5zOgogICAgICAgIC0gJ2luZGljZXNfbW9uaXRvcicKICAgICAgICAtICdpbmRpY2VzOmFk
    bWluL2FsaWFzZXMvZ2V0JwogICAgICAgIC0gJ2luZGljZXM6YWRtaW4vbWFwcGluZ3MvZ2
    V0JwoKIyBBbGxvd3MgdXNlcnMgdG8gcmVhZCBOb3RlYm9va3MKbm90ZWJvb2tzX3JlYWRf
    YWNjZXNzOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW9uczoKICAgIC
    0gJ2NsdXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9ub3RlYm9va3MvbGlzdCcKICAgIC0gJ2Ns
    dXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9ub3RlYm9va3MvZ2V0JwoKIyBBbGxvd3MgdXNlcn
    MgdG8gYWxsIE5vdGVib29rcyBmdW5jdGlvbmFsaXR5Cm5vdGVib29rc19mdWxsX2FjY2Vz
    czoKICByZXNlcnZlZDogdHJ1ZQogIGNsdXN0ZXJfcGVybWlzc2lvbnM6CiAgICAtICdjbH
    VzdGVyOmFkbWluL29wZW5kaXN0cm8vbm90ZWJvb2tzL2NyZWF0ZScKICAgIC0gJ2NsdXN0
    ZXI6YWRtaW4vb3BlbmRpc3Ryby9ub3RlYm9va3MvdXBkYXRlJwogICAgLSAnY2x1c3Rlcj
    phZG1pbi9vcGVuZGlzdHJvL25vdGVib29rcy9kZWxldGUnCiAgICAtICdjbHVzdGVyOmFk
    bWluL29wZW5kaXN0cm8vbm90ZWJvb2tzL2dldCcKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3
    BlbmRpc3Ryby9ub3RlYm9va3MvbGlzdCcKCiMgQWxsb3dzIHVzZXJzIHRvIHJlYWQgb2Jz
    ZXJ2YWJpbGl0eSBvYmplY3RzCm9ic2VydmFiaWxpdHlfcmVhZF9hY2Nlc3M6CiAgcmVzZX
    J2ZWQ6IHRydWUKICBjbHVzdGVyX3Blcm1pc3Npb25zOgogICAgLSAnY2x1c3RlcjphZG1p
    bi9vcGVuc2VhcmNoL29ic2VydmFiaWxpdHkvZ2V0JwogICAgLSAnY2x1c3RlcjphZG1pbi
    9vcGVuc2VhcmNoL3BwbCcKCiMgQWxsb3dzIHVzZXJzIHRvIGFsbCBPYnNlcnZhYmlsaXR5
    IGZ1bmN0aW9uYWxpdHkKb2JzZXJ2YWJpbGl0eV9mdWxsX2FjY2VzczoKICByZXNlcnZlZD
    ogdHJ1ZQogIGNsdXN0ZXJfcGVybWlzc2lvbnM6CiAgICAtICdjbHVzdGVyOmFkbWluL29w
    ZW5zZWFyY2gvb2JzZXJ2YWJpbGl0eS9jcmVhdGUnCiAgICAtICdjbHVzdGVyOmFkbWluL2
    9wZW5zZWFyY2gvb2JzZXJ2YWJpbGl0eS91cGRhdGUnCiAgICAtICdjbHVzdGVyOmFkbWlu
    L29wZW5zZWFyY2gvb2JzZXJ2YWJpbGl0eS9kZWxldGUnCiAgICAtICdjbHVzdGVyOmFkbW
    luL29wZW5zZWFyY2gvb2JzZXJ2YWJpbGl0eS9nZXQnCgojIEFsbG93cyB1c2VycyB0byBy
    ZWFkIGFuZCBkb3dubG9hZCBSZXBvcnRzCnJlcG9ydHNfaW5zdGFuY2VzX3JlYWRfYWNjZX
    NzOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW9uczoKICAgIC0gJ2Ns
    dXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9yZXBvcnRzL2luc3RhbmNlL2xpc3QnCiAgICAtIC
    djbHVzdGVyOmFkbWluL29wZW5kaXN0cm8vcmVwb3J0cy9pbnN0YW5jZS9nZXQnCiAgICAt
    ICdjbHVzdGVyOmFkbWluL29wZW5kaXN0cm8vcmVwb3J0cy9tZW51L2Rvd25sb2FkJwoKIy
    BBbGxvd3MgdXNlcnMgdG8gcmVhZCBhbmQgZG93bmxvYWQgUmVwb3J0cyBhbmQgUmVwb3J0
    LWRlZmluaXRpb25zCnJlcG9ydHNfcmVhZF9hY2Nlc3M6CiAgcmVzZXJ2ZWQ6IHRydWUKIC
    BjbHVzdGVyX3Blcm1pc3Npb25zOgogICAgLSAnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJv
    L3JlcG9ydHMvZGVmaW5pdGlvbi9nZXQnCiAgICAtICdjbHVzdGVyOmFkbWluL29wZW5kaX
    N0cm8vcmVwb3J0cy9kZWZpbml0aW9uL2xpc3QnCiAgICAtICdjbHVzdGVyOmFkbWluL29w
    ZW5kaXN0cm8vcmVwb3J0cy9pbnN0YW5jZS9saXN0JwogICAgLSAnY2x1c3RlcjphZG1pbi
    9vcGVuZGlzdHJvL3JlcG9ydHMvaW5zdGFuY2UvZ2V0JwogICAgLSAnY2x1c3RlcjphZG1p
    bi9vcGVuZGlzdHJvL3JlcG9ydHMvbWVudS9kb3dubG9hZCcKCiMgQWxsb3dzIHVzZXJzIH
    RvIGFsbCBSZXBvcnRzIGZ1bmN0aW9uYWxpdHkKcmVwb3J0c19mdWxsX2FjY2VzczoKICBy
    ZXNlcnZlZDogdHJ1ZQogIGNsdXN0ZXJfcGVybWlzc2lvbnM6CiAgICAtICdjbHVzdGVyOm
    FkbWluL29wZW5kaXN0cm8vcmVwb3J0cy9kZWZpbml0aW9uL2NyZWF0ZScKICAgIC0gJ2Ns
    dXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9yZXBvcnRzL2RlZmluaXRpb24vdXBkYXRlJwogIC
    AgLSAnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL3JlcG9ydHMvZGVmaW5pdGlvbi9vbl9k
    ZW1hbmQnCiAgICAtICdjbHVzdGVyOmFkbWluL29wZW5kaXN0cm8vcmVwb3J0cy9kZWZpbm
    l0aW9uL2RlbGV0ZScKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9yZXBvcnRz
    L2RlZmluaXRpb24vZ2V0JwogICAgLSAnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL3JlcG
    9ydHMvZGVmaW5pdGlvbi9saXN0JwogICAgLSAnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJv
    L3JlcG9ydHMvaW5zdGFuY2UvbGlzdCcKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbmRpc3
    Ryby9yZXBvcnRzL2luc3RhbmNlL2dldCcKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbmRp
    c3Ryby9yZXBvcnRzL21lbnUvZG93bmxvYWQnCgojIEFsbG93cyB1c2VycyB0byB1c2UgYW
    xsIGFzeW5jaHJvbm91cy1zZWFyY2ggZnVuY3Rpb25hbGl0eQphc3luY2hyb25vdXNfc2Vh
    cmNoX2Z1bGxfYWNjZXNzOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW
    9uczoKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9hc3luY2hyb25vdXNfc2Vh
    cmNoLyonCiAgaW5kZXhfcGVybWlzc2lvbnM6CiAgICAtIGluZGV4X3BhdHRlcm5zOgogIC
    AgICAgIC0gJyonCiAgICAgIGFsbG93ZWRfYWN0aW9uczoKICAgICAgICAtICdpbmRpY2Vz
    OmRhdGEvcmVhZC9zZWFyY2gqJwoKIyBBbGxvd3MgdXNlcnMgdG8gcmVhZCBzdG9yZWQgYX
    N5bmNocm9ub3VzLXNlYXJjaCByZXN1bHRzCmFzeW5jaHJvbm91c19zZWFyY2hfcmVhZF9h
    Y2Nlc3M6CiAgcmVzZXJ2ZWQ6IHRydWUKICBjbHVzdGVyX3Blcm1pc3Npb25zOgogICAgLS
    AnY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL2FzeW5jaHJvbm91c19zZWFyY2gvZ2V0JwoK
    IyBBbGxvd3MgdXNlciB0byB1c2UgYWxsIGluZGV4X21hbmFnZW1lbnQgYWN0aW9ucyAtIG
    lzbSBwb2xpY2llcywgcm9sbHVwcywgdHJhbnNmb3JtcwppbmRleF9tYW5hZ2VtZW50X2Z1
    bGxfYWNjZXNzOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW9uczoKIC
    AgIC0gImNsdXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9pc20vKiIKICAgIC0gImNsdXN0ZXI6
    YWRtaW4vb3BlbmRpc3Ryby9yb2xsdXAvKiIKICAgIC0gImNsdXN0ZXI6YWRtaW4vb3Blbm
    Rpc3Ryby90cmFuc2Zvcm0vKiIKICBpbmRleF9wZXJtaXNzaW9uczoKICAgIC0gaW5kZXhf
    cGF0dGVybnM6CiAgICAgICAgLSAnKicKICAgICAgYWxsb3dlZF9hY3Rpb25zOgogICAgIC
    AgIC0gJ2luZGljZXM6YWRtaW4vb3BlbnNlYXJjaC9pc20vKicKCiMgQWxsb3dzIHVzZXJz
    IHRvIHVzZSBhbGwgY3Jvc3MgY2x1c3RlciByZXBsaWNhdGlvbiBmdW5jdGlvbmFsaXR5IG
    F0IGxlYWRlciBjbHVzdGVyCmNyb3NzX2NsdXN0ZXJfcmVwbGljYXRpb25fbGVhZGVyX2Z1
    bGxfYWNjZXNzOgogIHJlc2VydmVkOiB0cnVlCiAgaW5kZXhfcGVybWlzc2lvbnM6CiAgIC
    AtIGluZGV4X3BhdHRlcm5zOgogICAgICAgIC0gJyonCiAgICAgIGFsbG93ZWRfYWN0aW9u
    czoKICAgICAgICAtICJpbmRpY2VzOmFkbWluL3BsdWdpbnMvcmVwbGljYXRpb24vaW5kZX
    gvc2V0dXAvdmFsaWRhdGUiCiAgICAgICAgLSAiaW5kaWNlczpkYXRhL3JlYWQvcGx1Z2lu
    cy9yZXBsaWNhdGlvbi9jaGFuZ2VzIgogICAgICAgIC0gImluZGljZXM6ZGF0YS9yZWFkL3
    BsdWdpbnMvcmVwbGljYXRpb24vZmlsZV9jaHVuayIKCiMgQWxsb3dzIHVzZXJzIHRvIHVz
    ZSBhbGwgY3Jvc3MgY2x1c3RlciByZXBsaWNhdGlvbiBmdW5jdGlvbmFsaXR5IGF0IGZvbG
    xvd2VyIGNsdXN0ZXIKY3Jvc3NfY2x1c3Rlcl9yZXBsaWNhdGlvbl9mb2xsb3dlcl9mdWxs
    X2FjY2VzczoKICByZXNlcnZlZDogdHJ1ZQogIGNsdXN0ZXJfcGVybWlzc2lvbnM6CiAgIC
    AtICJjbHVzdGVyOmFkbWluL3BsdWdpbnMvcmVwbGljYXRpb24vYXV0b2ZvbGxvdy91cGRh
    dGUiCiAgaW5kZXhfcGVybWlzc2lvbnM6CiAgICAtIGluZGV4X3BhdHRlcm5zOgogICAgIC
    AgIC0gJyonCiAgICAgIGFsbG93ZWRfYWN0aW9uczoKICAgICAgICAtICJpbmRpY2VzOmFk
    bWluL3BsdWdpbnMvcmVwbGljYXRpb24vaW5kZXgvc2V0dXAvdmFsaWRhdGUiCiAgICAgIC
    AgLSAiaW5kaWNlczpkYXRhL3dyaXRlL3BsdWdpbnMvcmVwbGljYXRpb24vY2hhbmdlcyIK
    ICAgICAgICAtICJpbmRpY2VzOmFkbWluL3BsdWdpbnMvcmVwbGljYXRpb24vaW5kZXgvc3
    RhcnQiCiAgICAgICAgLSAiaW5kaWNlczphZG1pbi9wbHVnaW5zL3JlcGxpY2F0aW9uL2lu
    ZGV4L3BhdXNlIgogICAgICAgIC0gImluZGljZXM6YWRtaW4vcGx1Z2lucy9yZXBsaWNhdG
    lvbi9pbmRleC9yZXN1bWUiCiAgICAgICAgLSAiaW5kaWNlczphZG1pbi9wbHVnaW5zL3Jl
    cGxpY2F0aW9uL2luZGV4L3N0b3AiCiAgICAgICAgLSAiaW5kaWNlczphZG1pbi9wbHVnaW
    5zL3JlcGxpY2F0aW9uL2luZGV4L3VwZGF0ZSIKICAgICAgICAtICJpbmRpY2VzOmFkbWlu
    L3BsdWdpbnMvcmVwbGljYXRpb24vaW5kZXgvc3RhdHVzX2NoZWNrIgoKIyBBbGxvdyB1c2
    VycyB0byByZWFkIE1MIHN0YXRzL21vZGVscy90YXNrcwptbF9yZWFkX2FjY2VzczoKICBy
    ZXNlcnZlZDogdHJ1ZQogIGNsdXN0ZXJfcGVybWlzc2lvbnM6CiAgICAtICdjbHVzdGVyOm
    FkbWluL29wZW5zZXJhY2gvbWwvc3RhdHMnCiAgICAtICdjbHVzdGVyOmFkbWluL29wZW5z
    ZWFyY2gvbWwvbW9kZWxzL2dldCcKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbnNlYXJjaC
    9tbC9tb2RlbHMvc2VhcmNoJwogICAgLSAnY2x1c3RlcjphZG1pbi9vcGVuc2VhcmNoL21s
    L3Rhc2tzL2dldCcKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbnNlYXJjaC9tbC90YXNrcy
    9zZWFyY2gnCgojIEFsbG93cyB1c2VycyB0byByZWFkIE5vdGlmaWNhdGlvbnMgY29uZmln
    L2NoYW5uZWxzCm5vdGlmaWNhdGlvbnNfcmVhZF9hY2Nlc3M6CiAgcmVzZXJ2ZWQ6IHRydW
    UKICBjbHVzdGVyX3Blcm1pc3Npb25zOgogICAgLSAnY2x1c3RlcjphZG1pbi9vcGVuc2Vh
    cmNoL25vdGlmaWNhdGlvbnMvY29uZmlncy9nZXQnCiAgICAtICdjbHVzdGVyOmFkbWluL2
    9wZW5zZWFyY2gvbm90aWZpY2F0aW9ucy9mZWF0dXJlcycKICAgIC0gJ2NsdXN0ZXI6YWRt
    aW4vb3BlbnNlYXJjaC9ub3RpZmljYXRpb25zL2NoYW5uZWxzL2dldCcKCiMgQWxsb3dzIH
    VzZXJzIHRvIHNlZSBzbmFwc2hvdHMsIHJlcG9zaXRvcmllcywgYW5kIHNuYXBzaG90IG1h
    bmFnZW1lbnQgcG9saWNpZXMKc25hcHNob3RfbWFuYWdlbWVudF9yZWFkX2FjY2VzczoKIC
    ByZXNlcnZlZDogdHJ1ZQogIGNsdXN0ZXJfcGVybWlzc2lvbnM6CiAgICAtICdjbHVzdGVy
    OmFkbWluL29wZW5zZWFyY2gvc25hcHNob3RfbWFuYWdlbWVudC9wb2xpY3kvZ2V0JwogIC
    AgLSAnY2x1c3RlcjphZG1pbi9vcGVuc2VhcmNoL3NuYXBzaG90X21hbmFnZW1lbnQvcG9s
    aWN5L3NlYXJjaCcKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbnNlYXJjaC9zbmFwc2hvdF
    9tYW5hZ2VtZW50L3BvbGljeS9leHBsYWluJwogICAgLSAnY2x1c3RlcjphZG1pbi9yZXBv
    c2l0b3J5L2dldCcKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vc25hcHNob3QvZ2V0JwoKIyBBbG
    xvd3MgdXNlcnMgdG8gdXNlIGFsbCBNTCBmdW5jdGlvbmFsaXR5Cm1sX2Z1bGxfYWNjZXNz
    OgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW9uczoKICAgIC0gJ2NsdX
    N0ZXJfbW9uaXRvcicKICAgIC0gJ2NsdXN0ZXI6YWRtaW4vb3BlbnNlYXJjaC9tbC8qJwog
    IGluZGV4X3Blcm1pc3Npb25zOgogICAgLSBpbmRleF9wYXR0ZXJuczoKICAgICAgICAtIC
    cqJwogICAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgICAgLSAnaW5kaWNlc19tb25pdG9y
    JwoKIyBBbm9ueW1vdXMgYWNjZXNzIHJvbGUKb3BlbmRpc3Ryb19zZWN1cml0eV9hbm9ueW
    1vdXNfcm9sZToKICByZXNlcnZlZDogdHJ1ZQogIGNsdXN0ZXJfcGVybWlzc2lvbnM6CiAg
    ICAjIEZvciB1c2luZyBfY2F0L2luZGljZXMKICAgIC0gJ2NsdXN0ZXI6bW9uaXRvci9zdG
    F0ZScKICAgIC0gJ2NsdXN0ZXI6bW9uaXRvci9oZWFsdGgnCiAgICAtICdjbHVzdGVyOm1v
    bml0b3Ivbm9kZXMvaW5mbycKICAgICMgVG8gZW5hYmxlIHJlYWQgYWNjZXNzIHRvIElTTQ
    ogICAgLSBjbHVzdGVyOmFkbWluL29wZW5kaXN0cm8vaXNtL3BvbGljeS9zZWFyY2gKICAg
    IC0gY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL2lzbS9tYW5hZ2VkaW5kZXgvZXhwbGFpbg
    ogICAgLSBjbHVzdGVyOmFkbWluL29wZW5kaXN0cm8vcm9sbHVwL3NlYXJjaAogICAgLSBj
    bHVzdGVyOmFkbWluL29wZW5kaXN0cm8vdHJhbnNmb3JtL2dldF90cmFuc2Zvcm1zCiAgIC
    AjIFRvIGVuYWJsZSByZWFkIGFjY2VzcyB0byB2YXJpb3VzIElTTSBKb2JzCiAgICAtIGNs
    dXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby9yb2xsdXAvZXhwbGFpbgogICAgLSBjbHVzdGVyOm
    FkbWluL29wZW5kaXN0cm8vaXNtL3BvbGljeS9nZXQKICAgIC0gY2x1c3RlcjphZG1pbi9v
    cGVuZGlzdHJvL3JvbGx1cC9nZXQKICAgIC0gY2x1c3RlcjphZG1pbi9vcGVuZGlzdHJvL3
    RyYW5zZm9ybS9leHBsYWluCiAgICAtIGNsdXN0ZXI6YWRtaW4vb3BlbmRpc3Ryby90cmFu
    c2Zvcm0vZ2V0CiAgICAjIFRvIGVuYWJsZSByZWFkIGFjY2VzcyB0byBzZWN1cml0eSBhbm
    FseXRpY3MKICAgIC0gY2x1c3RlcjphZG1pbi9vcGVuc2VhcmNoL3NlY3VyaXR5YW5hbHl0
    aWNzL3J1bGUvc2VhcmNoCiAgICAtIGNsdXN0ZXI6YWRtaW4vb3BlbnNlYXJjaC9zZWN1cm
    l0eWFuYWx5dGljcy9kZXRlY3Rvci9zZWFyY2gKICAgIC0gY2x1c3RlcjphZG1pbi9vcGVu
    c2VhcmNoL3NlY3VyaXR5YW5hbHl0aWNzL2ZpbmRpbmdzL2dldAogICAgLSBjbHVzdGVyOm
    FkbWluL29wZW5zZWFyY2gvc2VjdXJpdHlhbmFseXRpY3MvYWxlcnRzL2dldAogICAgLSBj
    bHVzdGVyOmFkbWluL29wZW5zZWFyY2gvc2VjdXJpdHlhbmFseXRpY3MvZGV0ZWN0b3IvZ2
    V0CiAgICAjIEZvciB1c2luZyBzcWwgam9pbiBxdWVyeQogICAgLSAiaW5kaWNlczpkYXRh
    L3JlYWQvc2Nyb2xsKiIKICBpbmRleF9wZXJtaXNzaW9uczoKICAgIC0gaW5kZXhfcGF0dG
    VybnM6CiAgICAgIC0gJyonCiAgICAgIGFsbG93ZWRfYWN0aW9uczoKICAgICAgICAtICJy
    ZWFkIgogICAgICAgIC0gImluZGljZXM6ZGF0YS9yZWFkL21nZXQiCiAgICAgICAgLSAiaW
    5kaWNlczpkYXRhL3JlYWQvbXNlYXJjaCIKICAgICAgICAtICJpbmRpY2VzOmRhdGEvcmVh
    ZC9tdHYiCiAgICAgICAgLSAiaW5kaWNlczphZG1pbi9nZXQiCiAgICAgICAgLSAiaW5kaW
    NlczphZG1pbi9hbGlhc2VzL2V4aXN0cyoiCiAgICAgICAgLSAiaW5kaWNlczphZG1pbi9h
    bGlhc2VzL2dldCoiCiAgICAgICAgLSAiaW5kaWNlczphZG1pbi9tYXBwaW5ncy9nZXQiCi
    AgICAgICAgLSAiaW5kaWNlczpkYXRhL3JlYWQvc2Nyb2xsIgogICAgICAgIC0gImluZGlj
    ZXM6bW9uaXRvci9zZXR0aW5ncy9nZXQiCiAgICAgICAgLSAiaW5kaWNlczptb25pdG9yL3
    N0YXRzIgogIHRlbmFudF9wZXJtaXNzaW9uczoKICAgIC0gdGVuYW50X3BhdHRlcm5zOgog
    ICAgICAtICcqJwogICAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgICAgLSAia2liYW5hX2
    FsbF9yZWFkIgoKIyBBbGxvd3MgaW5kZXgtbWlncmF0aW9uLnB5IHNjcmlwdCB0byBwZXJm
    b3JtIGluZGljZXMgbWlncmF0aW9uIGZyb20gRWxhc3RpY1NlYXJjaCB0byBPcGVuU2Vhcm
    NoCmluZGV4X21pZ3JhdGlvbjoKICByZXNlcnZlZDogdHJ1ZQogIGNsdXN0ZXJfcGVybWlz
    c2lvbnM6CiAgICAgICAgLSAiY3JlYXRlX2luZGV4IgogICAgICAgIC0gImluZGljZXM6ZG
    F0YS93cml0ZS9yZWluZGV4IgogICAgICAgIC0gImluZGljZXM6ZGF0YS93cml0ZS9pbmRl
    eCIKICAgICAgICAtICJjbHVzdGVyOm1vbml0b3IvdGFzay9nZXQiCiAgICAgICAgLSAiaW
    5kaWNlczpkYXRhL3dyaXRlL2J1bGsqIgogIGluZGV4X3Blcm1pc3Npb25zOgogICAgLSBp
    bmRleF9wYXR0ZXJuczoKICAgICAgICAtICcqJwogICAgICBhbGxvd2VkX2FjdGlvbnM6Ci
    AgICAgICAgLSAiY3JlYXRlX2luZGV4IgogICAgICAgIC0gImluZGljZXM6ZGF0YS93cml0
    ZS9yZWluZGV4IgogICAgICAgIC0gImluZGljZXM6ZGF0YS93cml0ZS9pbmRleCIKICAgIC
    AgICAtICJpbmRpY2VzOmRhdGEvd3JpdGUvYnVsayoiCgpib290c3RyYXA6CiAgcmVzZXJ2
    ZWQ6IHRydWUKICBjbHVzdGVyX3Blcm1pc3Npb25zOgogICAgLSAnY2x1c3Rlcl9tb25pdG
    9yJwogICAgLSAnY2x1c3Rlcl9tYW5hZ2VfaW5kZXhfdGVtcGxhdGVzJwogICAgLSAiY2x1
    c3RlcjphZG1pbi9vcGVuZGlzdHJvL2lzbS8qIgogICAgLSAiY2x1c3RlcjphZG1pbi9vcG
    Vuc2VhcmNoL25vdGlmaWNhdGlvbnMvKiIKICAgIC0gImNsdXN0ZXI6YWRtaW4vb3BlbmRp
    c3Ryby9hbGVydGluZy8qIgogICAgLSAiY2x1c3RlcjphZG1pbi9yZXJvdXRlIgogICAgLS
    Aia2liYW5hX2FsbF93cml0ZSIKICAgIC0gImtpYmFuYV9hbGxfcmVhZCIKICAgIC0gJ2lu
    ZGljZXM6ZGF0YS93cml0ZS9idWxrJwogICAgLSAiaW5kaWNlczpkYXRhL3JlYWQvbWdldC
    IKICAgIC0gJ2luZGljZXM6ZGF0YS93cml0ZS9pbmRleCcKICAgIC0gJ2luZGljZXM6ZGF0
    YS93cml0ZS91cGRhdGUnCiAgICAtICdpbmRpY2VzOmRhdGEvd3JpdGUvZGVsZXRlJwogIG
    luZGV4X3Blcm1pc3Npb25zOgogICAgLSBpbmRleF9wYXR0ZXJuczoKICAgICAgICAtICcq
    JwogICAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgICAgLSAnaW5kaWNlczphZG1pbi9vcG
    Vuc2VhcmNoL2lzbS8qJwogICAgICAgIC0gJ2luZGljZXM6YWRtaW4vaW5kZXhfdGVtcGxh
    dGUvKicKICAgICAgICAtICdpbmRpY2VzOmFkbWluL3RlbXBsYXRlLyonCiAgICAgICAgLS
    AnaW5kaWNlczphZG1pbi9zZXR0aW5ncy91cGRhdGUnCiAgICAgICAgLSAnaW5kaWNlczph
    ZG1pbi9kZWxldGUnCiAgICAgICAgLSAnaW5kaWNlczphZG1pbi9yZXNpemUnCiAgICAgIC
    AgLSAnaW5kaWNlczpkYXRhL3dyaXRlL2luZGV4JwogICAgICAgIC0gJ2luZGljZXM6ZGF0
    YS93cml0ZS9idWxrKicKICAgICAgICAtICdpbmRpY2VzOmRhdGEvd3JpdGUvdXBkYXRlJw
    ogICAgICAgIC0gJ2luZGljZXM6ZGF0YS93cml0ZS9kZWxldGUnCiAgICAgICAgLSAncmVh
    ZCcKICAgICAgICAtICdpbmRpY2VzX21vbml0b3InCiAgICAtIGluZGV4X3BhdHRlcm5zOg
    ogICAgICAgIC0gJy5raWJhbmEqJwogICAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgICAg
    LSAnY3J1ZCcKICAgICAgICAtICdjcmVhdGVfaW5kZXgnCg==
  roles_mapping.yml: |
    X21ldGE6CiAgdHlwZTogInJvbGVzbWFwcGluZyIKICBjb25maWdfdmVyc2lvbjogMgoKIy
    BEZWZpbmUgeW91ciByb2xlcyBtYXBwaW5nIGhlcmUKCm9wZW5kaXN0cm9fc2VjdXJpdHlf
    YW5vbnltb3VzX3JvbGU6CiAgYmFja2VuZF9yb2xlczoKICAtICJvcGVuZGlzdHJvX3NlY3
    VyaXR5X2Fub255bW91c19iYWNrZW5kcm9sZSIKCmFsZXJ0aW5nX3JlYWRfYWNjZXNzOgog
    IGJhY2tlbmRfcm9sZXM6CiAgLSAib3BlbmRpc3Ryb19zZWN1cml0eV9hbm9ueW1vdXNfYm
    Fja2VuZHJvbGUiCgphbm9tYWx5X3JlYWRfYWNjZXNzOgogIGJhY2tlbmRfcm9sZXM6CiAg
    LSAib3BlbmRpc3Ryb19zZWN1cml0eV9hbm9ueW1vdXNfYmFja2VuZHJvbGUiCgpub3RlYm
    9va3NfcmVhZF9hY2Nlc3M6CiAgYmFja2VuZF9yb2xlczoKICAtICJvcGVuZGlzdHJvX3Nl
    Y3VyaXR5X2Fub255bW91c19iYWNrZW5kcm9sZSIKCm9ic2VydmFiaWxpdHlfcmVhZF9hY2
    Nlc3M6CiAgYmFja2VuZF9yb2xlczoKICAtICJvcGVuZGlzdHJvX3NlY3VyaXR5X2Fub255
    bW91c19iYWNrZW5kcm9sZSIKCnJlcG9ydHNfaW5zdGFuY2VzX3JlYWRfYWNjZXNzOgogIG
    JhY2tlbmRfcm9sZXM6CiAgLSAib3BlbmRpc3Ryb19zZWN1cml0eV9hbm9ueW1vdXNfYmFj
    a2VuZHJvbGUiCgpyZXBvcnRzX3JlYWRfYWNjZXNzOgogIGJhY2tlbmRfcm9sZXM6CiAgLS
    Aib3BlbmRpc3Ryb19zZWN1cml0eV9hbm9ueW1vdXNfYmFja2VuZHJvbGUiCgphc3luY2hy
    b25vdXNfc2VhcmNoX3JlYWRfYWNjZXNzOgogIGJhY2tlbmRfcm9sZXM6CiAgLSAib3Blbm
    Rpc3Ryb19zZWN1cml0eV9hbm9ueW1vdXNfYmFja2VuZHJvbGUiCgptbF9yZWFkX2FjY2Vz
    czoKICBiYWNrZW5kX3JvbGVzOgogIC0gIm9wZW5kaXN0cm9fc2VjdXJpdHlfYW5vbnltb3
    VzX2JhY2tlbmRyb2xlIgoKbm90aWZpY2F0aW9uc19yZWFkX2FjY2VzczoKICBiYWNrZW5k
    X3JvbGVzOgogIC0gIm9wZW5kaXN0cm9fc2VjdXJpdHlfYW5vbnltb3VzX2JhY2tlbmRyb2
    xlIgoKc25hcHNob3RfbWFuYWdlbWVudF9yZWFkX2FjY2VzczoKICBiYWNrZW5kX3JvbGVz
    OgogIC0gIm9wZW5kaXN0cm9fc2VjdXJpdHlfYW5vbnltb3VzX2JhY2tlbmRyb2xlIgoKYW
    xsX2FjY2VzczoKICByZXNlcnZlZDogZmFsc2UKICBiYWNrZW5kX3JvbGVzOgogIC0gImFk
    bWluIgogIC0gIm9wZW5kaXN0cm9fc2VjdXJpdHlfYW5vbnltb3VzX2JhY2tlbmRyb2xlIg
    ogIGRlc2NyaXB0aW9uOiAiTWFwcyBhZG1pbiB0byBhbGxfYWNjZXNzIgoKbG9nc3Rhc2g6
    CiAgcmVzZXJ2ZWQ6IGZhbHNlCiAgYmFja2VuZF9yb2xlczoKICAtICJsb2dzdGFzaCIKCm
    xvZ3N0YXNoX3dyaXRlOgogIHJlc2VydmVkOiBmYWxzZQogIGJhY2tlbmRfcm9sZXM6CiAg
    LSAibG9nc3Rhc2giCgpraWJhbmFfdXNlcjoKICByZXNlcnZlZDogZmFsc2UKICBiYWNrZW
    5kX3JvbGVzOgogIC0gImtpYmFuYXVzZXIiCiAgZGVzY3JpcHRpb246ICJNYXBzIGtpYmFu
    YXVzZXIgdG8ga2liYW5hX3VzZXIiCgpraWJhbmFfc2VydmVyOgogIHJlc2VydmVkOiB0cn
    VlCiAgdXNlcnM6CiAgLSAia2liYW5hc2VydmVyIgoKaW5kZXhfbWlncmF0aW9uOgogIHJl
    c2VydmVkOiB0cnVlCiAgdXNlcnM6CiAgLSAiaW5kZXhtaWdyYXRpb24iCgpib290c3RyYX
    A6CiAgcmVzZXJ2ZWQ6IHRydWUKICB1c2VyczoKICAtICJib290c3RyYXAiCiAg
  tenants.yml: |
    X21ldGE6CiAgdHlwZTogInRlbmFudHMiCiAgY29uZmlnX3ZlcnNpb246IDIKCiMgRGVmaW
    5lIHlvdXIgdGVuYW50cyBoZXJl
  whitelist.yml: |
    Y29uZmlnOgogIGVuYWJsZWQ6IGZhbHNlCiAgcmVxdWVzdHM6CiAgICAvX2NsdXN0ZXIvc2
    V0dGluZ3M6CiAgICAgIC0gR0VUCiAgICAvX2NhdC9ub2RlczoKICAgICAgLSBHRVQ=
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  name: opensearch-securityconfig-97tg8dm8g4
  namespace: elastic-stack-logging
type: Opaque
---
apiVersion: v1
data:
  password: eGFSYWUxeGFlbmdhaG5pZTBpZURvbzdub2htYWlyb2o=
  username: Ym9vdHN0cmFw
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  name: os-bootstrap-creds
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  password: eG9vYm9peGFpVmU2amFoeXV3b29KNXVvZ2g3ZWVzb28=
  username: a2liYW5hc2VydmVy
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  name: os-dashboard-creds
  namespace: elastic-stack-logging
---
apiVersion: v1
data:
  password: bWk3ZWl0ZTJvb25vbzhFa3UxdWZvbzRlZ2gxamFpajI=
  username: bG9nc3Rhc2g=
kind: Secret
metadata:
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
  name: os-logstash-creds
  namespace: elastic-stack-logging
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "9198"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
  labels:
    app: logstash-elastic
  name: logstash-elastic
  namespace: elastic-stack-logging
spec:
  ports:
  - name: rest
    port: 9600
  - name: http-main-input
    port: 8080
  - name: metrics
    port: 9198
  - name: http-s3-input
    port: 8081
  - name: http-cw-input
    port: 8082
  - name: http-nr-input
    port: 8083
  - name: http-customer-input
    port: 8084
  selector:
    app: logstash-elastic
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: opensearch-dev.ping-demo.com
    prometheus.io/path: /_prometheus/metrics
    prometheus.io/port: "9200"
    prometheus.io/scheme: https
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/name: opensearch
  name: opensearch-cluster-headless
  namespace: elastic-stack-logging
spec:
  clusterIP: None
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: opensearch
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: opensearch-cluster-hot
    app.kubernetes.io/name: opensearch
  name: opensearch-cluster-master
  namespace: elastic-stack-logging
spec:
  ports:
  - name: http
    port: 9200
    protocol: TCP
  - name: transport
    port: 9300
    protocol: TCP
  selector:
    app.kubernetes.io/instance: opensearch-cluster-hot
    app.kubernetes.io/name: opensearch
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: opensearch-dashboards
  name: opensearch-dashboards
  namespace: elastic-stack-logging
spec:
  ports:
  - name: http
    port: 5601
    protocol: TCP
    targetPort: 5601
  selector:
    app.kubernetes.io/name: opensearch-dashboards
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: opensearch-dashboards
  name: opensearch-dashboards
  namespace: elastic-stack-logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: opensearch-dashboards
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: opensearch-dashboards
    spec:
      containers:
      - env:
        - name: OPENSEARCH_HOSTS
          value: https://opensearch-cluster-master.elastic-stack-logging.svc.cluster.local:9200
        - name: SERVER_HOST
          value: 0.0.0.0
        - name: OPENSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: os-dashboard-creds
        - name: OPENSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: os-dashboard-creds
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/opensearchproject/opensearch-dashboards:2.8.0
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 10
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 5601
          timeoutSeconds: 5
        name: dashboards
        ports:
        - containerPort: 5601
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 10
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 5601
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 500m
            memory: 1024M
          requests:
            cpu: 100m
            memory: 512M
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        startupProbe:
          failureThreshold: 20
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 5601
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
          name: config
          subPath: opensearch_dashboards.yml
        - mountPath: /usr/share/opensearch-dashboards/config/certs
          name: os-certs
      securityContext: {}
      serviceAccountName: opensearch-dashboards
      volumes:
      - configMap:
          name: opensearch-dashboards-config
        name: config
      - name: os-certs
        secret:
          secretName: opensearch-cert
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: logstash-elastic
  name: logstash-elastic
  namespace: elastic-stack-logging
spec:
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: logstash-elastic
  serviceName: logstash-elastic
  template:
    metadata:
      labels:
        app: logstash-elastic
    spec:
      containers:
      - args:
        - -c
        - S3_BUCKET_NAME=${S3_BUCKET#s3://} /usr/local/bin/docker-entrypoint
        command:
        - /bin/sh
        env:
        - name: LS_JAVA_OPTS
          value: -Xms6g -Xmx6g -XX:MaxDirectMemorySize=2g
        - name: PIPELINE_WORKERS
          value: "24"
        - name: PIPELINE_BATCH_SIZE
          value: "1000"
        - name: CONTAINER_NAME
          value: logstash
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CONFIG_RELOAD_AUTOMATIC
          value: "false"
        - name: LOG_FORMAT
          value: json
        - name: PIPELINE_ECS_COMPATIBILITY
          value: disabled
        - name: PIPELINE_ORDERED
          value: "false"
        - name: QUEUE_TYPE
          value: persisted
        - name: QUEUE_MAX_BYTES
          value: 1000gb
        - name: QUEUE_DRAIN
          value: "true"
        - name: DEAD_LETTER_QUEUE_ENABLE
          value: "true"
        - name: PATH_DEAD_LETTER_QUEUE
          value: /usr/share/logstash/data/queue/dead_letter
        - name: XPACK_MONITORING_ENABLED
          value: "false"
        - name: OS_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: os-logstash-creds
        - name: OS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: os-logstash-creds
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              key: bucketName
              name: s3-raw-logs-bucket
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              key: logs.region
              name: cluster-info
        - name: CW_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              key: cluster.name
              name: cluster-info
        - name: NR_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              key: NEW_RELIC_LICENSE_KEY
              name: nr-license-key
        envFrom:
        - configMapRef:
            name: elk-environment-variables-dfk4bdbtkk
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/logstash/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: logstash
        ports:
        - containerPort: 9600
          name: rest
          protocol: TCP
        - containerPort: 8080
          name: http-log-input
          protocol: TCP
        - containerPort: 8081
          name: http-s3-input
          protocol: TCP
        - containerPort: 8082
          name: http-cw-input
          protocol: TCP
        - containerPort: 8083
          name: http-nr-input
          protocol: TCP
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "3"
            memory: 8Gi
          requests:
            cpu: "3"
            memory: 8Gi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /usr/share/logstash/config/pipelines.yml
          name: logstash-pipelines
          readOnly: true
          subPath: pipelines.yml
        - mountPath: /usr/share/logstash/pipeline/main
          name: logstash-pipeline-main
          readOnly: true
        - mountPath: /usr/share/logstash/pipeline/customer
          name: logstash-pipeline-customer
          readOnly: true
        - mountPath: /usr/share/logstash/pipeline/s3
          name: logstash-pipeline-s3
          readOnly: true
        - mountPath: /usr/share/logstash/pipeline/dlq
          name: logstash-pipeline-dlq
          readOnly: true
        - mountPath: /usr/share/logstash/pipeline/cloudwatch
          name: logstash-pipeline-cw
        - mountPath: /usr/share/logstash/pipeline/newrelic
          name: logstash-pipeline-nr
          readOnly: true
        - mountPath: /etc/logstash/templates
          name: logstash-search-template
          readOnly: true
        - mountPath: /enrichment-cache-files
          name: enrichment-cache-files
          readOnly: false
        - mountPath: /usr/share/logstash/data/queue
          name: logstash-efs
          readOnly: false
        - mountPath: /usr/share/logstash/certs
          name: os-certs
      - image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/prom/logstash-exporter:v0.0.1
        imagePullPolicy: IfNotPresent
        name: exporter
        ports:
        - containerPort: 9198
          name: metrics
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 150m
            memory: 100Mi
      - args:
        - enrichment_sidecar
        env:
        - name: ENRICHMENT_TOR_FEED_URL
          value: https://check.torproject.org/exit-addresses
        - name: ENRICHMENT_ALIEN_VAULT_FEED_URL
          value: https://reputation.alienvault.com/reputation.generic
        - name: ENRICHMENT_FILEPATH
          value: /enrichment-cache-files/
        - name: ENRICHMENT_DELAY_SECONDS
          value: "600"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: PYTHONIOENCODING
          value: UTF-8
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/enrichment-bootstrap/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: enrichment-sidecar
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 150m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /enrichment-cache-files
          name: enrichment-cache-files
          readOnly: false
      initContainers:
      - command:
        - sh
        - -c
        - kubectl wait --for=condition=complete --timeout=900s -n elastic-stack-logging
          job/opensearch-bootstrap
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        imagePullPolicy: IfNotPresent
        name: wait-for-bootstrap-completed
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
      - args:
        - create_enrichment_cache_files
        env:
        - name: ENRICHMENT_TOR_FEED_URL
          value: https://check.torproject.org/exit-addresses
        - name: ENRICHMENT_ALIEN_VAULT_FEED_URL
          value: https://reputation.alienvault.com/reputation.generic
        - name: ENRICHMENT_FILEPATH
          value: /enrichment-cache-files/
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: PYTHONIOENCODING
          value: UTF-8
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/enrichment-bootstrap/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: create-enrichment-cache-files
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /enrichment-cache
          name: enrichment-cache
        - mountPath: /enrichment-cache-files
          name: enrichment-cache-files
      serviceAccountName: logstash-elastic
      terminationGracePeriodSeconds: 60
      volumes:
      - configMap:
          name: logstash-pipeline-main-ht5h988bg2
        name: logstash-pipeline-main
      - configMap:
          name: logstash-pipeline-customer-97tc4thm7t
        name: logstash-pipeline-customer
      - configMap:
          name: logstash-pipeline-s3-gc9t2khd28
        name: logstash-pipeline-s3
      - configMap:
          name: logstash-pipeline-dlq-t7c6c88tfg
        name: logstash-pipeline-dlq
      - configMap:
          name: logstash-pipeline-cw-8chtm622kh
        name: logstash-pipeline-cw
      - configMap:
          name: logstash-pipeline-nr-6tcc6f926g
        name: logstash-pipeline-nr
      - configMap:
          name: logstash-pipelines
        name: logstash-pipelines
      - configMap:
          name: logstash-search-template
        name: logstash-search-template
      - configMap:
          name: enrichment-cache
        name: enrichment-cache
      - emptyDir: {}
        name: enrichment-cache-files
      - name: os-certs
        secret:
          secretName: opensearch-cert
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: logstash-elastic
      name: logstash-efs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Mi
      storageClassName: efs
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: opensearch-cluster-hot
    app.kubernetes.io/name: opensearch
  name: opensearch-cluster-hot
  namespace: elastic-stack-logging
spec:
  podManagementPolicy: Parallel
  replicas: 5
  selector:
    matchLabels:
      app.kubernetes.io/instance: opensearch-cluster-hot
      app.kubernetes.io/name: opensearch
  serviceName: opensearch-cluster-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: opensearch-cluster-hot
        app.kubernetes.io/name: opensearch
      name: opensearch-cluster-hot
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - opensearch-cluster-hot
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - opensearch
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: OPENSEARCH_JAVA_OPTS
          value: -Xms8g -Xmx8g
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: cluster.initial_cluster_manager_nodes
          value: opensearch-cluster-hot-0,opensearch-cluster-hot-1,opensearch-cluster-hot-2,
        - name: discovery.seed_hosts
          value: opensearch-cluster-headless
        - name: cluster.name
          value: opensearch-cluster
        - name: node.attr.temp
          value: hot
        - name: network.host
          value: 0.0.0.0
        - name: node.roles
          value: cluster_manager,ingest,data,remote_cluster_client,search,
        - name: DISABLE_INSTALL_DEMO_CONFIG
          value: "true"
        - name: logger.level
          value: WARN
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/opensearch/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: opensearch
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 5
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        resources:
          limits:
            cpu: "8"
            memory: 10Gi
          requests:
            cpu: "2"
            memory: 8Gi
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        startupProbe:
          failureThreshold: 30
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        volumeMounts:
        - mountPath: /usr/share/opensearch/data
          name: data
        - mountPath: /usr/share/opensearch/config/opensearch-security
          name: security-config-data
        - mountPath: /usr/share/opensearch/config/opensearch.yml
          name: config
          subPath: opensearch.yml
        - mountPath: /usr/share/opensearch/config/certs
          name: node-cert
      enableServiceLinks: false
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      serviceAccountName: opensearch
      terminationGracePeriodSeconds: 120
      volumes:
      - configMap:
          name: opensearch-config-kgm6kddf69
        name: config
      - name: security-config-data
        secret:
          secretName: opensearch-securityconfig-97tg8dm8g4
      - name: node-cert
        secret:
          secretName: opensearch-cert
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
      storageClassName: efs
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: opensearch-cluster-warm
    app.kubernetes.io/name: opensearch
  name: opensearch-cluster-warm
  namespace: elastic-stack-logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: opensearch-cluster-warm
      app.kubernetes.io/name: opensearch
  serviceName: opensearch-cluster-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: opensearch-cluster-warm
        app.kubernetes.io/name: opensearch
      name: opensearch-cluster-warm
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - opensearch
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: cluster.initial_cluster_manager_nodes
          value: opensearch-cluster-hot-0,opensearch-cluster-hot-1,opensearch-cluster-hot-2,
        - name: discovery.seed_hosts
          value: opensearch-cluster-headless
        - name: cluster.name
          value: opensearch-cluster
        - name: node.attr.temp
          value: warm
        - name: network.host
          value: 0.0.0.0
        - name: OPENSEARCH_JAVA_OPTS
          value: -Xmx3000M -Xms3000M
        - name: node.roles
          value: data,remote_cluster_client,
        - name: DISABLE_INSTALL_DEMO_CONFIG
          value: "true"
        - name: logger.level
          value: WARN
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/opensearch/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: opensearch
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 5
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: "1"
            memory: 4Gi
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        startupProbe:
          failureThreshold: 30
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        volumeMounts:
        - mountPath: /usr/share/opensearch/data
          name: data
        - mountPath: /usr/share/opensearch/config/opensearch-security
          name: security-config-data
        - mountPath: /usr/share/opensearch/config/opensearch.yml
          name: config
          subPath: opensearch.yml
        - mountPath: /usr/share/opensearch/config/certs
          name: node-cert
      enableServiceLinks: false
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      serviceAccountName: opensearch
      terminationGracePeriodSeconds: 120
      volumes:
      - configMap:
          name: opensearch-config-kgm6kddf69
        name: config
      - name: security-config-data
        secret:
          secretName: opensearch-securityconfig-97tg8dm8g4
      - name: node-cert
        secret:
          secretName: opensearch-cert
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 125Gi
      storageClassName: opensearch-sc1
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/instance: opensearch-cluster-hot
    app.kubernetes.io/name: opensearch
  name: opensearch-cluster-hot-pdb
  namespace: elastic-stack-logging
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: opensearch-cluster-hot
      app.kubernetes.io/name: opensearch
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: fluent-bit
  name: fluent-bit
  namespace: elastic-stack-logging
spec:
  selector:
    matchLabels:
      k8s-app: fluent-bit
  template:
    metadata:
      annotations:
        prometheus.io/path: /api/v1/metrics/prometheus
        prometheus.io/port: "2020"
        prometheus.io/scheme: http
        prometheus.io/scrape: "true"
      labels:
        k8s-app: fluent-bit
    spec:
      containers:
      - env:
        - name: READ_FROM_HEAD
          valueFrom:
            configMapKeyRef:
              key: read.head
              name: cluster-info
        - name: READ_FROM_TAIL
          valueFrom:
            configMapKeyRef:
              key: read.tail
              name: cluster-info
        - name: HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: FLB_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              key: log.level
              name: cluster-info
        - name: NR_CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              key: newrelic_cluster_name
              name: cluster-info
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/fluent/fluent-bit:2.1.8
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/v1/health
            port: 2020
          initialDelaySeconds: 20
          periodSeconds: 180
          timeoutSeconds: 5
        name: fluent-bit
        ports:
        - containerPort: 2020
          name: metrics
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 2020
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 100Mi
        securityContext:
          capabilities:
            add:
            - CAP_FOWNER
            drop:
            - ALL
        volumeMounts:
        - mountPath: /fluent-bit/state
          name: fluentbitstate
        - mountPath: /var/log
          name: varlog
          readOnly: true
        - mountPath: /var/lib/docker/containers
          name: varlibdockercontainers
          readOnly: true
        - mountPath: /fluent-bit/etc/fluent-bit.conf
          name: fluent-bit-config
          subPath: fluent-bit.conf
        - mountPath: /fluent-bit/etc/parsers.conf
          name: fluent-bit-parsers
          subPath: parsers.conf
        - mountPath: /fluent-bit/etc/pipelines_cw.conf
          name: fluent-bit-pipeline-cw
          subPath: cw.conf
        - mountPath: /fluent-bit/etc/pipelines_elk.conf
          name: fluent-bit-pipeline-elk
          subPath: elk.conf
        - mountPath: /fluent-bit/etc/pipelines_nr.conf
          name: fluent-bit-pipeline-nr
          subPath: nr.conf
        - mountPath: /fluent-bit/etc/pipelines_s3.conf
          name: fluent-bit-pipeline-s3
          subPath: s3.conf
        - mountPath: /fluent-bit/etc/pipelines_customer.conf
          name: fluent-bit-pipeline-customer
          subPath: customer.conf
        - mountPath: /run/log/journal
          name: runlogjournal
          readOnly: true
        - mountPath: /var/log/dmesg
          name: dmesg
          readOnly: true
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      priorityClassName: high-priority-apps-to-avoid-pending-state
      serviceAccountName: fluent-bit
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/controlplane
        operator: Exists
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      volumes:
      - hostPath:
          path: /fluent-bit/state
        name: fluentbitstate
      - hostPath:
          path: /var/log
        name: varlog
      - hostPath:
          path: /var/lib/docker/containers
        name: varlibdockercontainers
      - configMap:
          name: fluent-bit-config-gbbk7dtckh
        name: fluent-bit-config
      - configMap:
          name: fluent-bit-parsers-9kt7db5k5c
        name: fluent-bit-parsers
      - configMap:
          name: fluent-bit-pipeline-cw-k65k95kkfc
        name: fluent-bit-pipeline-cw
      - configMap:
          name: fluent-bit-pipeline-elk-gtmf85g8k8
        name: fluent-bit-pipeline-elk
      - configMap:
          name: fluent-bit-pipeline-nr-ff7c55h5fb
        name: fluent-bit-pipeline-nr
      - configMap:
          name: fluent-bit-pipeline-s3-5k42bb26bf
        name: fluent-bit-pipeline-s3
      - configMap:
          name: fluent-bit-pipeline-customer-h29h8f4cfh
        name: fluent-bit-pipeline-customer
      - hostPath:
          path: /run/log/journal
        name: runlogjournal
      - hostPath:
          path: /var/log/dmesg
        name: dmesg
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: logstash-elastic
  namespace: elastic-stack-logging
spec:
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 120
    scaleUp:
      stabilizationWindowSeconds: 60
  maxReplicas: 6
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 70
        type: Utilization
    type: Resource
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: logstash-elastic
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-options: Replace=true
  name: logging-bootstrap
  namespace: elastic-stack-logging
spec:
  template:
    spec:
      containers:
      - env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: logging-bootstrap-environment-variables
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/bootstrap/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: logging-bootstrap
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 300m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /app/config/app_config.yaml
          name: logging-bootstrap-resources
          readOnly: true
          subPath: logging-bootstrap-resources.yaml
      restartPolicy: OnFailure
      serviceAccountName: enrichment
      volumes:
      - configMap:
          name: logging-bootstrap-resources
        name: logging-bootstrap-resources
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-options: Replace=true
  name: opensearch-bootstrap
  namespace: elastic-stack-logging
spec:
  backoffLimit: 10
  template:
    spec:
      containers:
      - env:
        - name: OS_HOST
          value: opensearch-cluster-master.elastic-stack-logging.svc.cluster.local
        - name: OS_PORT
          value: "9200"
        - name: BOOTSTRAP_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: os-bootstrap-creds
        - name: BOOTSTRAP_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: os-bootstrap-creds
        - name: TENANT_DOMAIN
          valueFrom:
            configMapKeyRef:
              key: tenant_domain
              name: cluster-info
        - name: PRIMARY_TENANT_DOMAIN
          valueFrom:
            configMapKeyRef:
              key: primary_tenant_domain
              name: cluster-info
        - name: INDEX_TEMPLATES_PATH
          value: /usr/share/opensearch/data/index-templates
        - name: ALERTS_PATH
          value: /usr/share/opensearch/data/alerts
        - name: NOTIFICATIONS_PATH
          value: /usr/share/opensearch/data/notifications
        - name: ISM_PATH
          value: /usr/share/opensearch/data/ism-policies
        - name: OSD_URL
          value: http://opensearch-dashboards:5601
        - name: DASHBOARDS_PATH
          value: /usr/share/opensearch/data/dashboards
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/os-bootstrap/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: opensearch-bootstrap
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 300m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
        volumeMounts:
        - mountPath: /usr/share/opensearch/data/ism-policies
          name: os-ism-policies
        - mountPath: /usr/share/opensearch/data/index-templates
          name: os-index-templates
        - mountPath: /usr/share/opensearch/data/notifications
          name: os-notifications-channels
        - mountPath: /usr/share/opensearch/data/dashboards/pd
          name: os-dashboards-pd
        - mountPath: /usr/share/opensearch/data/dashboards/pf
          name: os-dashboards-pf
        - mountPath: /usr/share/opensearch/data/dashboards/pf-threat
          name: os-dashboards-pf-threat
        - mountPath: /usr/share/opensearch/data/dashboards/pa
          name: os-dashboards-pa
        - mountPath: /usr/share/opensearch/data/dashboards/pa-was
          name: os-dashboards-pa-was
        - mountPath: /usr/share/opensearch/data/alerts/pd-1
          name: os-alerts-pd-1
        - mountPath: /usr/share/opensearch/data/alerts/pd-2
          name: os-alerts-pd-2
        - mountPath: /usr/share/opensearch/data/alerts/pd-3
          name: os-alerts-pd-3
        - mountPath: /usr/share/opensearch/data/alerts/pd-4
          name: os-alerts-pd-4
        - mountPath: /usr/share/opensearch/data/alerts/pd-5
          name: os-alerts-pd-5
        - mountPath: /usr/share/opensearch/data/alerts/pds
          name: os-alerts-pds
        - mountPath: /usr/share/opensearch/data/alerts/pf
          name: os-alerts-pf
      restartPolicy: OnFailure
      volumes:
      - configMap:
          name: os-ism-policies-745k24kdb4
        name: os-ism-policies
      - configMap:
          name: os-index-templates-gb8m7tkmc7
        name: os-index-templates
      - configMap:
          name: os-notifications-channels-dc7547gk9b
        name: os-notifications-channels
      - configMap:
          name: os-dashboards-pd
        name: os-dashboards-pd
      - configMap:
          name: os-dashboards-pf
        name: os-dashboards-pf
      - configMap:
          name: os-dashboards-pf-threat
        name: os-dashboards-pf-threat
      - configMap:
          name: os-dashboards-pa
        name: os-dashboards-pa
      - configMap:
          name: os-dashboards-pa-was
        name: os-dashboards-pa-was
      - configMap:
          name: os-alerts-pd-1
        name: os-alerts-pd-1
      - configMap:
          name: os-alerts-pd-2
        name: os-alerts-pd-2
      - configMap:
          name: os-alerts-pd-3
        name: os-alerts-pd-3
      - configMap:
          name: os-alerts-pd-4
        name: os-alerts-pd-4
      - configMap:
          name: os-alerts-pd-5
        name: os-alerts-pd-5
      - configMap:
          name: os-alerts-pds
        name: os-alerts-pds
      - configMap:
          name: os-alerts-pf
        name: os-alerts-pf
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: opensearch-cert
  namespace: elastic-stack-logging
spec:
  commonName: elastic-stack-logging.svc.cluster.local
  dnsNames:
  - opensearch-cluster-master.elastic-stack-logging.svc.cluster.local
  - opensearch-cluster-headless.elastic-stack-logging.svc.cluster.local
  - '*.opensearch-cluster-headless.elastic-stack-logging.svc.cluster.local'
  - '*.opensearch-cluster-master.elastic-stack-logging.svc.cluster.local'
  - opensearch-cluster-headless.elastic-stack-logging.svc
  - opensearch-cluster-master.elastic-stack-logging.svc
  - '*.opensearch-cluster-headless.elastic-stack-logging.svc'
  - '*.opensearch-cluster-master.elastic-stack-logging.svc'
  issuerRef:
    kind: Issuer
    name: opensearch-self
  privateKey:
    algorithm: RSA
    encoding: PKCS8
    size: 2048
  secretName: opensearch-cert
  usages:
  - server auth
  - client auth
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: opensearch-self-ca
  namespace: elastic-stack-logging
spec:
  commonName: opensearch-self-ca
  isCA: true
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: selfsigned-issuer
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: opensearch-self-ca
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: selfsigned-issuer
  namespace: elastic-stack-logging
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: opensearch-self
  namespace: elastic-stack-logging
spec:
  ca:
    secretName: opensearch-self-ca
