apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  name: newrelic
---
apiVersion: v1
imagePullSecrets: []
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-4.23.0
    nri-bundle.version: 5.0.4
  name: nri-bundle-kube-state-metrics
  namespace: newrelic
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-newrelic-infrastructure
  namespace: newrelic
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-newrelic-infrastructure-controlplane
  namespace: newrelic
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 1.8.0
    helm.sh/chart: nri-kube-events-2.2.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-kube-events
  namespace: newrelic
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync,PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection-admission
  namespace: newrelic
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-prometheus
    app.kubernetes.io/version: 2.16.1
    helm.sh/chart: nri-prometheus-2.1.5
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-prometheus
  namespace: newrelic
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync,PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection-admission
  namespace: newrelic
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-4.23.0
    nri-bundle.version: 5.0.4
  name: nri-bundle-kube-state-metrics
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  - apps
  resources:
  - daemonsets
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  - apps
  resources:
  - deployments
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - limitranges
  verbs:
  - list
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - list
  - watch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - watch
- apiGroups:
  - extensions
  - apps
  resources:
  - replicasets
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - replicationcontrollers
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - resourcequotas
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - list
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - volumeattachments
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-newrelic-infrastructure
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/metrics
  - nodes/stats
  - nodes/proxy
  - pods
  - services
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 1.8.0
    helm.sh/chart: nri-kube-events-2.2.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-kube-events
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync,PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection-admission
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-prometheus
    app.kubernetes.io/version: 2.16.1
    helm.sh/chart: nri-prometheus-2.1.5
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-prometheus
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/metrics
  - nodes/stats
  - nodes/proxy
  - pods
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-controlplane
rules:
- apiGroups:
  - ""
  resources:
  - nodes/metrics
  - nodes/stats
  - nodes/proxy
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
  - head
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync,PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection-admission
  namespace: newrelic
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nri-bundle-nri-metadata-injection-admission
subjects:
- kind: ServiceAccount
  name: nri-bundle-nri-metadata-injection-admission
  namespace: newrelic
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-4.23.0
    nri-bundle.version: 5.0.4
  name: nri-bundle-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: nri-bundle-kube-state-metrics
  namespace: newrelic
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-newrelic-infrastructure
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-newrelic-infrastructure
subjects:
- kind: ServiceAccount
  name: nri-bundle-newrelic-infrastructure
  namespace: newrelic
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 1.8.0
    helm.sh/chart: nri-kube-events-2.2.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-kube-events
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-nri-kube-events
subjects:
- kind: ServiceAccount
  name: nri-bundle-nri-kube-events
  namespace: newrelic
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync,PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection-admission
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-nri-metadata-injection-admission
subjects:
- kind: ServiceAccount
  name: nri-bundle-nri-metadata-injection-admission
  namespace: newrelic
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-prometheus
    app.kubernetes.io/version: 2.16.1
    helm.sh/chart: nri-prometheus-2.1.5
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-nri-prometheus
subjects:
- kind: ServiceAccount
  name: nri-bundle-nri-prometheus
  namespace: newrelic
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-controlplane
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-nrk8s-controlplane
subjects:
- kind: ServiceAccount
  name: nri-bundle-newrelic-infrastructure-controlplane
  namespace: newrelic
---
apiVersion: v1
data:
  copy-secret.sh: |-
    #!/bin/sh

    cd /tmp

    kubectl get secret ${SECRET_NAME} \
        -n ${SECRET_NAMESPACE} \
        -o jsonpath='{.data.NEW_RELIC_LICENSE_KEY}' |
    base64 -d > NEW_RELIC_LICENSE_KEY

    kubectl create secret generic ${SECRET_NAME} \
        -n ${CURRENT_NAMESPACE} \
        --from-file=NEW_RELIC_LICENSE_KEY

    rm -f NEW_RELIC_LICENSE_KEY
kind: ConfigMap
metadata:
  name: copy-secret
  namespace: newrelic
---
apiVersion: v1
data:
  newrelic-infra.yml: |-
    is_forward_only: true
    http_server_enabled: true
    http_server_port: 8001
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 1.8.0
    helm.sh/chart: nri-kube-events-2.2.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-kube-events-agent-config
  namespace: newrelic
---
apiVersion: v1
data:
  config.yaml: |-
    sinks:
    - name: newRelicInfra
      config:
        agentEndpoint: http://localhost:8001/v1/data
        clusterName: k8s-cluster-name
        agentHTTPTimeout: 30s
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 1.8.0
    helm.sh/chart: nri-kube-events-2.2.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-kube-events-config
  namespace: newrelic
---
apiVersion: v1
data:
  config.yaml: |
    cluster_name: k8s-cluster-name
    audit: false
    insecure_skip_verify: true
    require_scrape_enabled_label_for_nodes: true
    scrape_enabled_label: prometheus.io/scrape
    scrape_endpoints: false
    scrape_services: true
    transformations:
    - description: Low data mode defaults
      ignore_metrics:
      - prefixes:
        - kube_
        - container_
        - machine_
        - cadvisor_
    verbose: false
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: nri-prometheus
    app.kubernetes.io/version: 2.9.0
    helm.sh/chart: nri-prometheus-1.10.0
  name: nri-bundle-nri-prometheus-config
  namespace: newrelic
---
apiVersion: v1
data:
  newrelic-infra.yml: |-
    # This is the configuration file for the infrastructure agent. See:
    # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
    custom_attributes:
      clusterName: k8s-cluster-name
    # Report metric data about all the operating system's processes (PDO-4178)
    enable_process_metrics: true
    http_server_enabled: true
    http_server_port: 8001
    is_forward_only: true
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-agent-controlplane
  namespace: newrelic
---
apiVersion: v1
data:
  newrelic-infra.yml: |-
    # This is the configuration file for the infrastructure agent. See:
    # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
    custom_attributes:
      clusterName: k8s-cluster-name
    http_server_enabled: true
    http_server_port: 8002
    is_forward_only: true
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-agent-ksm
  namespace: newrelic
---
apiVersion: v1
data:
  newrelic-infra.yml: |-
    # This is the configuration file for the infrastructure agent. See:
    # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
    custom_attributes:
      clusterName: k8s-cluster-name
    features:
      docker_enabled: false
    http_server_enabled: true
    http_server_port: 8003
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-agent-kubelet
  namespace: newrelic
---
apiVersion: v1
data:
  nri-kubernetes.yml: |-
    interval: 15s # Default value is 15s
    controlPlane:
      retries: 3
      timeout: 10s
      enabled: true
      etcd:
        autodiscover:
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:4001
          - url: http://localhost:2381
          matchNode: true
          namespace: kube-system
          selector: tier=control-plane,component=etcd
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:4001
          matchNode: true
          namespace: kube-system
          selector: k8s-app=etcd-manager-main
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:4001
          matchNode: true
          namespace: kube-system
          selector: k8s-app=etcd
        enabled: true
      scheduler:
        autodiscover:
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:10259
          matchNode: true
          namespace: kube-system
          selector: tier=control-plane,component=kube-scheduler
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:10259
          matchNode: true
          namespace: kube-system
          selector: k8s-app=kube-scheduler
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:10259
          matchNode: true
          namespace: kube-system
          selector: app=openshift-kube-scheduler,scheduler=true
        enabled: true
      controllerManager:
        autodiscover:
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:10257
          matchNode: true
          namespace: kube-system
          selector: tier=control-plane,component=kube-controller-manager
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:10257
          matchNode: true
          namespace: kube-system
          selector: k8s-app=kube-controller-manager
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:10257
          matchNode: true
          namespace: kube-system
          selector: app=kube-controller-manager,kube-controller-manager=true
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:10257
          matchNode: true
          namespace: kube-system
          selector: app=controller-manager,controller-manager=true
        enabled: true
      apiServer:
        autodiscover:
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:8443
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:6443
          - url: http://localhost:8080
          matchNode: true
          namespace: kube-system
          selector: tier=control-plane,component=kube-apiserver
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:8443
          - url: http://localhost:8080
          matchNode: true
          namespace: kube-system
          selector: k8s-app=kube-apiserver
        - endpoints:
          - auth:
              type: bearer
            insecureSkipVerify: true
            url: https://localhost:8443
          matchNode: true
          namespace: kube-system
          selector: app=openshift-kube-apiserver,apiserver=true
        enabled: true
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-controlplane
  namespace: newrelic
---
apiVersion: v1
data:
  pixie-health-check.yaml: |
    ---
    # This Flex config performs periodic checks of the Pixie
    # /healthz and /statusz endpoints exposed by the Pixie Cloud Connector.
    # A status for each endpoint is sent to New Relic in a pixieHealthCheck event.
    #
    # If Pixie is not installed in the cluster, no events will be generated.
    # This can also be disabled with enablePixieHealthCheck: false in the values.yaml file.
    discovery:
      command:
        exec: /var/db/newrelic-infra/nri-discovery-kubernetes --tls --port 10250
        match:
          label.name: vizier-cloud-connector
    integrations:
      - name: nri-flex
        interval: 60s
        config:
          name: pixie-health-check
          apis:
            - event_type: pixieHealth
              commands:
                - run: curl --insecure -s https://${discovery.ip}:50800/healthz | xargs | awk '{print "cloud_connector_health:"$1}'
                  split_by: ":"
              merge: pixieHealthCheck
            - event_type: pixieStatus
              commands:
                - run: curl --insecure -s https://${discovery.ip}:50800/statusz | awk '{if($1 == ""){ print "cloud_connector_status:OK" } else { print "cloud_connector_status:"$1 }}'
                  split_by: ":"
              merge: pixieHealthCheck
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-integrations-cfg
  namespace: newrelic
---
apiVersion: v1
data:
  nri-kubernetes.yml: |-
    interval: 15s # Default value is 15s
    ksm:
      enabled: true
      retries: 3
      scheme: http
      selector: app.kubernetes.io/name=kube-state-metrics
      timeout: 10s
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.6.0
    helm.sh/chart: newrelic-infrastructure-3.12.0
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-ksm
  namespace: newrelic
---
apiVersion: v1
data:
  nri-kubernetes.yml: |
    interval: 15s # Default value is 15s
    kubelet:
      enabled: true
      retries: 3
      timeout: 10s
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-kubelet
  namespace: newrelic
---
apiVersion: v1
data:
  pingmetadata.yaml: |
    ---
    integrations:
      - name: nri-flex
        interval: 2m
        config:
          name: pingmetadata
          apis:
            - event_type: pingmetaDataOutputSample
              url: http://metadata.${PING_CLOUD_NAMESPACE}:5000
              jq: ".version"
kind: ConfigMap
metadata:
  name: pingmetadata
  namespace: newrelic
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-4.23.0
    nri-bundle.version: 5.0.4
  name: nri-bundle-kube-state-metrics
  namespace: newrelic
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: kube-state-metrics
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection
  namespace: newrelic
spec:
  ports:
  - port: 443
    targetPort: 8443
  selector:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/version: 2.9.2
    helm.sh/chart: kube-state-metrics-4.23.0
    nri-bundle.version: 5.0.4
  name: nri-bundle-kube-state-metrics
  namespace: newrelic
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: kube-state-metrics
        nri-bundle.version: 5.0.4
    spec:
      containers:
      - args:
        - --resources=certificatesigningrequests
        - --resources=configmaps
        - --resources=cronjobs
        - --resources=daemonsets
        - --resources=deployments
        - --resources=endpoints
        - --resources=horizontalpodautoscalers
        - --resources=ingresses
        - --resources=jobs
        - --resources=leases
        - --resources=limitranges
        - --resources=mutatingwebhookconfigurations
        - --resources=namespaces
        - --resources=networkpolicies
        - --resources=nodes
        - --resources=persistentvolumeclaims
        - --resources=persistentvolumes
        - --resources=poddisruptionbudgets
        - --resources=pods
        - --resources=replicasets
        - --resources=replicationcontrollers
        - --resources=resourcequotas
        - --resources=secrets
        - --resources=services
        - --resources=statefulsets
        - --resources=storageclasses
        - --resources=validatingwebhookconfigurations
        - --resources=volumeattachments
        - --telemetry-port=8081
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/coreos/kube-state-metrics:v2.9.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        name: kube-state-metrics
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 30m
            memory: 80Mi
          requests:
            cpu: 10m
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
      hostNetwork: false
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      serviceAccountName: nri-bundle-kube-state-metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: newrelic-infrastructure
    chart: newrelic-infrastructure-1.6.2
    mode: privileged
    release: nri-bundle
  name: nri-bundle-newrelic-metadata
  namespace: newrelic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: newrelic-infrastructure
      release: nri-bundle
  template:
    metadata:
      annotations: {}
      labels:
        app: newrelic-infrastructure
        mode: privileged
        release: nri-bundle
    spec:
      containers:
      - env:
        - name: NRIA_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              key: NEW_RELIC_LICENSE_KEY
              name: newrelic-license-key
        - name: CLUSTER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['CLUSTER_NAME']
        - name: NRIA_DISABLE_CLOUD_INSTANCE_ID
          value: "true"
        - name: NRIA_DISABLE_CLOUD_METADATA
          value: "true"
        - name: NRIA_ENABLE_PROCESS_METRICS
          value: "false"
        - name: NRIA_METRICS_PROCESS_SAMPLE_RATE
          value: "-1"
        - name: NRK8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: NRIA_CUSTOM_ATTRIBUTES
          value: '{"clusterName":"$(CLUSTER_NAME)"}'
        - name: NRIA_PASSTHROUGH_ENVIRONMENT
          value: CLUSTER_NAME
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/infrastructure:1.37.2
        imagePullPolicy: IfNotPresent
        name: newrelic-infrastructure
        resources:
          limits:
            cpu: 200m
            memory: 300M
          requests:
            cpu: 100m
            memory: 150M
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /dev
          name: dev
        - mountPath: /var/run/docker.sock
          name: host-docker-socket
        - mountPath: /var/log
          name: log
        - mountPath: /host
          name: host-volume
          readOnly: true
        - mountPath: /etc/newrelic-infra/integrations.d
          name: pingmetadata
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      initContainers:
      - args:
        - 'kubectl get secret $(SECRET_NAME) && echo ''INFO: NR secret object found,
          skipping waiting for job completion.'' || kubectl wait --for=condition=Complete
          --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)'
        command:
        - /bin/sh
        - -c
        env:
        - name: WAIT_TIMEOUT_SEC
          value: "300"
        - name: JOB_NAME
          value: newrelic-license-secret-exporter
        - name: SECRET_NAME
          value: newrelic-license-key
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        name: wait-for-nr-license-secret
      serviceAccountName: nri-bundle-newrelic-infrastructure
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - hostPath:
          path: /dev
        name: dev
      - hostPath:
          path: /var/run/docker.sock
        name: host-docker-socket
      - hostPath:
          path: /var/log
        name: log
      - hostPath:
          path: /
        name: host-volume
      - configMap:
          items:
          - key: pingmetadata.yaml
            path: pingmetadata.yaml
          name: pingmetadata
        name: pingmetadata
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 1.8.0
    helm.sh/chart: nri-kube-events-2.2.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-kube-events
  namespace: newrelic
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-kube-events
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-kube-events
        app.kubernetes.io/version: 1.8.0
        helm.sh/chart: nri-kube-events-2.2.4
        nri-bundle.version: 5.0.4
    spec:
      containers:
      - args:
        - -config
        - /app/config/config.yaml
        - -loglevel
        - debug
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/nri-kube-events:1.9.1
        imagePullPolicy: IfNotPresent
        name: kube-events
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /app/config
          name: config-volume
      - env:
        - name: NRIA_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              key: NEW_RELIC_LICENSE_KEY
              name: newrelic-license-key
        - name: NRIA_IS_SECURE_FORWARD_ONLY
          value: "false"
        - name: NRIA_IS_FORWARD_ONLY
          value: "true"
        - name: NRIA_OVERRIDE_HOSTNAME_SHORT
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-events-forwarder:1.36.1
        imagePullPolicy: IfNotPresent
        name: forwarder
        ports:
        - containerPort: 8001
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /var/db/newrelic-infra/data
          name: tmpfs-data
        - mountPath: /var/db/newrelic-infra/user_data
          name: tmpfs-user-data
        - mountPath: /tmp
          name: tmpfs-tmp
        - mountPath: /etc/newrelic-infra.yml
          name: config
          subPath: newrelic-infra.yml
      hostNetwork: true
      initContainers:
      - args:
        - 'kubectl get secret $(SECRET_NAME) && echo ''INFO: NR secret object found,
          skipping waiting for job completion.'' || kubectl wait --for=condition=Complete
          --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)'
        command:
        - /bin/sh
        - -c
        env:
        - name: WAIT_TIMEOUT_SEC
          value: "300"
        - name: JOB_NAME
          value: newrelic-license-secret-exporter
        - name: SECRET_NAME
          value: newrelic-license-key
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        name: wait-for-nr-license-secret
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: nri-bundle-nri-kube-events
      volumes:
      - configMap:
          items:
          - key: newrelic-infra.yml
            path: newrelic-infra.yml
          name: nri-bundle-nri-kube-events-agent-config
        name: config
      - configMap:
          name: nri-bundle-nri-kube-events-config
        name: config-volume
      - emptyDir: {}
        name: tmpfs-data
      - emptyDir: {}
        name: tmpfs-user-data
      - emptyDir: {}
        name: tmpfs-tmp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection
  namespace: newrelic
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-metadata-injection
  template:
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-metadata-injection
        app.kubernetes.io/version: 1.7.0
        helm.sh/chart: nri-metadata-injection-3.0.4
        nri-bundle.version: 5.0.4
    spec:
      containers:
      - env:
        - name: clusterName
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['CLUSTER_NAME']
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-metadata-injection:1.7.5
        imagePullPolicy: IfNotPresent
        name: nri-metadata-injection
        ports:
        - containerPort: 8443
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 1
        resources:
          limits:
            memory: 80M
          requests:
            cpu: 100m
            memory: 30M
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
        volumeMounts:
        - mountPath: /etc/tls-key-cert-pair
          name: tls-key-cert-pair
      hostNetwork: false
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      serviceAccount: default
      volumes:
      - name: tls-key-cert-pair
        secret:
          secretName: nri-bundle-nri-metadata-injection-admission
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-prometheus
    app.kubernetes.io/version: 2.16.1
    helm.sh/chart: nri-prometheus-2.1.5
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-prometheus
  namespace: newrelic
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-prometheus
  template:
    metadata:
      annotations:
        checksum/config: ccb1eaf63851097c4abf7fd036baccf66b0979e728f14bbe687d21a691119c17
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-prometheus
        nri-bundle.version: 5.0.4
    spec:
      containers:
      - args:
        - --configfile=/etc/nri-prometheus/config.yaml
        env:
        - name: LICENSE_KEY
          valueFrom:
            secretKeyRef:
              key: NEW_RELIC_LICENSE_KEY
              name: newrelic-license-key
        - name: BEARER_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: CA_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/nri-prometheus:2.17.0
        imagePullPolicy: IfNotPresent
        name: nri-prometheus
        ports:
        - containerPort: 8080
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        volumeMounts:
        - mountPath: /etc/nri-prometheus/
          name: config-volume
      initContainers:
      - args:
        - 'kubectl get secret $(SECRET_NAME) && echo ''INFO: NR secret object found,
          skipping waiting for job completion.'' || kubectl wait --for=condition=Complete
          --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)'
        command:
        - /bin/sh
        - -c
        env:
        - name: WAIT_TIMEOUT_SEC
          value: "300"
        - name: JOB_NAME
          value: newrelic-license-secret-exporter
        - name: SECRET_NAME
          value: newrelic-license-key
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        name: wait-for-nr-license-secret
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
      serviceAccountName: nri-bundle-nri-prometheus
      volumes:
      - configMap:
          name: nri-bundle-nri-prometheus-config
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-ksm
  namespace: newrelic
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: ksm
      app.kubernetes.io/instance: nri-bundle
      app.kubernetes.io/name: newrelic-infrastructure
  strategy:
    type: Recreate
  template:
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/component: ksm
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: newrelic-infrastructure
        nri-bundle.version: 5.0.4
    spec:
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: kube-state-metrics
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - env:
        - name: NRI_KUBERNETES_SINK_HTTP_PORT
          value: "8002"
        - name: NRI_KUBERNETES_CLUSTERNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['CLUSTER_NAME']
        - name: NRI_KUBERNETES_VERBOSE
          value: "false"
        - name: NRI_KUBERNETES_NODENAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/nri-kubernetes/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: ksm
        resources:
          limits:
            memory: 850M
          requests:
            cpu: 100m
            memory: 150M
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /etc/newrelic-infra/nri-kubernetes.yml
          name: nri-kubernetes-config
          subPath: nri-kubernetes.yml
      - env:
        - name: NRIA_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              key: NEW_RELIC_LICENSE_KEY
              name: newrelic-license-key
        - name: NRIA_OVERRIDE_HOSTNAME_SHORT
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: NRIA_CUSTOM_ATTRIBUTES
          value: '{"clusterName":"$(CLUSTER_NAME)"}'
        - name: NRIA_PASSTHROUGH_ENVIRONMENT
          value: KUBERNETES_SERVICE_HOST,KUBERNETES_SERVICE_PORT,CLUSTER_NAME,CADVISOR_PORT,NRK8S_NODE_NAME,KUBE_STATE_METRICS_URL,KUBE_STATE_METRICS_POD_LABEL,TIMEOUT,ETCD_TLS_SECRET_NAME,ETCD_TLS_SECRET_NAMESPACE,API_SERVER_SECURE_PORT,KUBE_STATE_METRICS_SCHEME,KUBE_STATE_METRICS_PORT,SCHEDULER_ENDPOINT_URL,ETCD_ENDPOINT_URL,CONTROLLER_MANAGER_ENDPOINT_URL,API_SERVER_ENDPOINT_URL,DISABLE_KUBE_STATE_METRICS,DISCOVERY_CACHE_TTL
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-events-forwarder:1.36.1
        imagePullPolicy: IfNotPresent
        name: forwarder
        ports:
        - containerPort: 8002
        resources:
          limits:
            memory: 850M
          requests:
            cpu: 100m
            memory: 150M
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /var/db/newrelic-infra/data
          name: forwarder-tmpfs-data
        - mountPath: /var/db/newrelic-infra/user_data
          name: forwarder-tmpfs-user-data
        - mountPath: /tmp
          name: forwarder-tmpfs-tmp
        - mountPath: /etc/newrelic-infra.yml
          name: config
          subPath: newrelic-infra.yml
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      initContainers:
      - args:
        - 'kubectl get secret $(SECRET_NAME) && echo ''INFO: NR secret object found,
          skipping waiting for job completion.'' || kubectl wait --for=condition=Complete
          --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)'
        command:
        - /bin/sh
        - -c
        env:
        - name: WAIT_TIMEOUT_SEC
          value: "300"
        - name: JOB_NAME
          value: newrelic-license-secret-exporter
        - name: SECRET_NAME
          value: newrelic-license-key
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        name: wait-for-nr-license-secret
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
      serviceAccountName: nri-bundle-newrelic-infrastructure
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - configMap:
          items:
          - key: nri-kubernetes.yml
            path: nri-kubernetes.yml
          name: nri-bundle-nrk8s-ksm
        name: nri-kubernetes-config
      - emptyDir: {}
        name: forwarder-tmpfs-data
      - emptyDir: {}
        name: forwarder-tmpfs-user-data
      - emptyDir: {}
        name: forwarder-tmpfs-tmp
      - configMap:
          items:
          - key: newrelic-infra.yml
            path: newrelic-infra.yml
          name: nri-bundle-nrk8s-agent-ksm
        name: config
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-controlplane
  namespace: newrelic
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: controlplane
      app.kubernetes.io/instance: nri-bundle
      app.kubernetes.io/name: newrelic-infrastructure
  template:
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/component: controlplane
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: newrelic-infrastructure
        nri-bundle.version: 5.0.4
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
            - matchExpressions:
              - key: node-role.kubernetes.io/controlplane
                operator: Exists
            - matchExpressions:
              - key: node-role.kubernetes.io/etcd
                operator: Exists
            - matchExpressions:
              - key: node-role.kubernetes.io/controlplane
                operator: Exists
      containers:
      - env:
        - name: NRI_KUBERNETES_SINK_HTTP_PORT
          value: "8001"
        - name: NRI_KUBERNETES_CLUSTERNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['CLUSTER_NAME']
        - name: NRI_KUBERNETES_VERBOSE
          value: "false"
        - name: NRI_KUBERNETES_NODENAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: NRI_KUBERNETES_NODEIP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/nri-kubernetes/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: controlplane
        resources:
          limits:
            memory: 300M
          requests:
            cpu: 100m
            memory: 150M
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /etc/newrelic-infra/nri-kubernetes.yml
          name: nri-kubernetes-config
          subPath: nri-kubernetes.yml
      - env:
        - name: NRI_KUBERNETES_VERBOSE
          value: "false"
        - name: NRIA_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              key: NEW_RELIC_LICENSE_KEY
              name: newrelic-license-key
        - name: NRIA_OVERRIDE_HOSTNAME_SHORT
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-events-forwarder:1.36.1
        imagePullPolicy: IfNotPresent
        name: forwarder
        ports:
        - containerPort: 8001
        resources:
          limits:
            memory: 300M
          requests:
            cpu: 100m
            memory: 150M
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /var/db/newrelic-infra/data
          name: forwarder-tmpfs-data
        - mountPath: /var/db/newrelic-infra/user_data
          name: forwarder-tmpfs-user-data
        - mountPath: /tmp
          name: forwarder-tmpfs-tmp
        - mountPath: /etc/newrelic-infra.yml
          name: config
          subPath: newrelic-infra.yml
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      initContainers:
      - args:
        - 'kubectl get secret $(SECRET_NAME) && echo ''INFO: NR secret object found,
          skipping waiting for job completion.'' || kubectl wait --for=condition=Complete
          --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)'
        command:
        - /bin/sh
        - -c
        env:
        - name: WAIT_TIMEOUT_SEC
          value: "300"
        - name: JOB_NAME
          value: newrelic-license-secret-exporter
        - name: SECRET_NAME
          value: newrelic-license-key
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        name: wait-for-nr-license-secret
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
      priorityClassName: high-priority-apps-to-avoid-pending-state
      serviceAccountName: nri-bundle-newrelic-infrastructure-controlplane
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - configMap:
          items:
          - key: nri-kubernetes.yml
            path: nri-kubernetes.yml
          name: nri-bundle-nrk8s-controlplane
        name: nri-kubernetes-config
      - emptyDir: {}
        name: forwarder-tmpfs-data
      - emptyDir: {}
        name: forwarder-tmpfs-user-data
      - emptyDir: {}
        name: forwarder-tmpfs-tmp
      - configMap:
          items:
          - key: newrelic-infra.yml
            path: newrelic-infra.yml
          name: nri-bundle-nrk8s-agent-controlplane
        name: config
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.2.0
    helm.sh/chart: newrelic-infrastructure-3.5.3
    nri-bundle.version: 5.0.4
  name: nri-bundle-nrk8s-kubelet
  namespace: newrelic
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: kubelet
      app.kubernetes.io/instance: nri-bundle
      app.kubernetes.io/name: newrelic-infrastructure
  template:
    metadata:
      annotations: {}
      labels:
        app.kubernetes.io/component: kubelet
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: newrelic-infrastructure
        nri-bundle.version: 5.0.4
    spec:
      containers:
      - env:
        - name: NRI_KUBERNETES_SINK_HTTP_PORT
          value: "8003"
        - name: NRI_KUBERNETES_CLUSTERNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['CLUSTER_NAME']
        - name: NRI_KUBERNETES_VERBOSE
          value: "false"
        - name: NRI_KUBERNETES_NODENAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: NRI_KUBERNETES_NODEIP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/nri-kubernetes/dev:v1.19-release-branch-latest
        imagePullPolicy: Always
        name: kubelet
        resources:
          limits:
            memory: 300M
          requests:
            cpu: 100m
            memory: 150M
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /etc/newrelic-infra/nri-kubernetes.yml
          name: nri-kubernetes-config
          subPath: nri-kubernetes.yml
      - args:
        - newrelic-infra
        env:
        - name: NRI_KUBERNETES_VERBOSE
          value: "false"
        - name: NRIA_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              key: NEW_RELIC_LICENSE_KEY
              name: newrelic-license-key
        - name: CLUSTER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['CLUSTER_NAME']
        - name: NRIA_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: NRIA_OVERRIDE_HOSTNAME_SHORT
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: NRI_KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: NRIA_CUSTOM_ATTRIBUTES
          value: '{"clusterName":"$(CLUSTER_NAME)"}'
        - name: NRIA_PASSTHROUGH_ENVIRONMENT
          value: KUBERNETES_SERVICE_HOST,KUBERNETES_SERVICE_PORT,CLUSTER_NAME,CADVISOR_PORT,NRK8S_NODE_NAME,KUBE_STATE_METRICS_URL,KUBE_STATE_METRICS_POD_LABEL,TIMEOUT,ETCD_TLS_SECRET_NAME,ETCD_TLS_SECRET_NAMESPACE,API_SERVER_SECURE_PORT,KUBE_STATE_METRICS_SCHEME,KUBE_STATE_METRICS_PORT,KUBE_STATE_METRICS_NAMESPACE,SCHEDULER_ENDPOINT_URL,ETCD_ENDPOINT_URL,CONTROLLER_MANAGER_ENDPOINT_URL,API_SERVER_ENDPOINT_URL,DISABLE_KUBE_STATE_METRICS,DISCOVERY_CACHE_TTL
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/infrastructure-bundle:2.8.38
        imagePullPolicy: IfNotPresent
        name: agent
        ports:
        - containerPort: 8003
        resources:
          limits:
            memory: 300M
          requests:
            cpu: 100m
            memory: 150M
        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - mountPath: /etc/newrelic-infra.yml
          name: config
          subPath: newrelic-infra.yml
        - mountPath: /etc/newrelic-infra/integrations.d/
          name: nri-integrations-cfg-volume
        - mountPath: /dev
          name: dev
        - mountPath: /var/run/docker.sock
          name: host-docker-socket
        - mountPath: /var/log
          name: log
        - mountPath: /host
          name: host-volume
          readOnly: true
        - mountPath: /var/db/newrelic-infra/data
          name: agent-tmpfs-data
        - mountPath: /var/db/newrelic-infra/user_data
          name: agent-tmpfs-user-data
        - mountPath: /tmp
          name: agent-tmpfs-tmp
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: false
      initContainers:
      - args:
        - 'kubectl get secret $(SECRET_NAME) && echo ''INFO: NR secret object found,
          skipping waiting for job completion.'' || kubectl wait --for=condition=Complete
          --timeout=$(WAIT_TIMEOUT_SEC)s job/$(JOB_NAME)'
        command:
        - /bin/sh
        - -c
        env:
        - name: WAIT_TIMEOUT_SEC
          value: "300"
        - name: JOB_NAME
          value: newrelic-license-secret-exporter
        - name: SECRET_NAME
          value: newrelic-license-key
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        name: wait-for-nr-license-secret
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
      priorityClassName: high-priority-apps-to-avoid-pending-state
      serviceAccountName: nri-bundle-newrelic-infrastructure
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - hostPath:
          path: /dev
        name: dev
      - hostPath:
          path: /var/run/docker.sock
        name: host-docker-socket
      - hostPath:
          path: /var/log
        name: log
      - hostPath:
          path: /
        name: host-volume
      - emptyDir: {}
        name: agent-tmpfs-data
      - emptyDir: {}
        name: agent-tmpfs-user-data
      - emptyDir: {}
        name: agent-tmpfs-tmp
      - configMap:
          items:
          - key: nri-kubernetes.yml
            path: nri-kubernetes.yml
          name: nri-bundle-nrk8s-kubelet
        name: nri-kubernetes-config
      - configMap:
          items:
          - key: newrelic-infra.yml
            path: newrelic-infra.yml
          name: nri-bundle-nrk8s-agent-kubelet
        name: config
      - configMap:
          name: nri-bundle-nrk8s-integrations-cfg
        name: nri-integrations-cfg-volume
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
  labels:
    app: newrelic-license-secret-exporter
  name: newrelic-license-secret-exporter
  namespace: newrelic
spec:
  template:
    metadata:
      annotations: {}
      labels:
        app: newrelic-license-secret-exporter
    spec:
      containers:
      - command:
        - /tmp/copy-secret.sh
        env:
        - name: SECRET_NAME
          value: newrelic-license-key
        - name: SECRET_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['SECRET_NAMESPACE']
        - name: CURRENT_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.15.0
        name: newrelic-license-secret-exporter
        securityContext:
          allowPrivilegeEscalation: false
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp/copy-secret.sh
          name: copy-secret
          subPath: copy-secret.sh
      restartPolicy: OnFailure
      serviceAccountName: nri-bundle-newrelic-infrastructure
      volumes:
      - configMap:
          defaultMode: 365
          name: copy-secret
        name: copy-secret
  ttlSecondsAfterFinished: 30
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
  labels:
    app: nri-metadata-injection-admission-create
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection-admission-create
  namespace: newrelic
spec:
  template:
    metadata:
      labels:
        app: nri-metadata-injection-admission-create
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-metadata-injection
        app.kubernetes.io/version: 1.7.0
        helm.sh/chart: nri-metadata-injection-3.0.4
        nri-bundle.version: 5.0.4
      name: nri-bundle-nri-metadata-injection-admission-create
    spec:
      containers:
      - args:
        - create
        - --host=nri-bundle-nri-metadata-injection,nri-bundle-nri-metadata-injection.newrelic.svc
        - --namespace=newrelic
        - --secret-name=nri-bundle-nri-metadata-injection-admission
        - --cert-name=tls.crt
        - --key-name=tls.key
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/ingress-nginx/kube-webhook-certgen:v1.1.1
        imagePullPolicy: IfNotPresent
        name: create
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
      hostIPC: false
      hostNetwork: false
      hostPID: false
      restartPolicy: OnFailure
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: nri-bundle-nri-metadata-injection-admission
  ttlSecondsAfterFinished: 30
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation,HookSucceeded
  labels:
    app: nri-metadata-injection-admission-patch
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection-admission-patch
  namespace: newrelic
spec:
  template:
    metadata:
      labels:
        app: nri-metadata-injection-admission-patch
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-metadata-injection
        app.kubernetes.io/version: 1.7.0
        helm.sh/chart: nri-metadata-injection-3.0.4
        nri-bundle.version: 5.0.4
      name: nri-bundle-nri-metadata-injection-admission-patch
    spec:
      containers:
      - args:
        - patch
        - --webhook-name=nri-bundle-nri-metadata-injection
        - --namespace=newrelic
        - --secret-name=nri-bundle-nri-metadata-injection-admission
        - --patch-failure-policy=Ignore
        - --patch-validating=false
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/ingress-nginx/kube-webhook-certgen:v1.1.1
        imagePullPolicy: IfNotPresent
        name: patch
      restartPolicy: OnFailure
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: nri-bundle-nri-metadata-injection-admission
  ttlSecondsAfterFinished: 30
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.7.0
    helm.sh/chart: nri-metadata-injection-3.0.4
    nri-bundle.version: 5.0.4
  name: nri-bundle-nri-metadata-injection
webhooks:
- admissionReviewVersions:
  - v1beta1
  - v1
  clientConfig:
    caBundle: ""
    service:
      name: nri-bundle-nri-metadata-injection
      namespace: newrelic
      path: /mutate
  failurePolicy: Ignore
  name: metadata-injection.newrelic.com
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - pods
  sideEffects: None
  timeoutSeconds: 30
