#!/bin/bash

function get_site() {

  password="${1}"
  endpoint="${2}"
  id="${3}"

  get_site_response=$(curl -k \
    -i \
    -s \
    -u "Administrator:${password}" \
    -H 'X-Xsrf-Header: PingAccess' \
    "${endpoint}/sites/${id}")

  get_site_response_code=$(parse_http_response_code "${get_site_response}")

  if [[ 200 -ne ${get_site_response_code} ]]; then
      echo "There was a problem getting the site: " ${get_site_response_code}
      return 1
  else
      echo "${get_site_response}"
      return 0
  fi
}

function get_virtual_host() {

  password="${1}"
  endpoint="${2}"
  id="${3}"

  get_virtual_host_response=$(curl -k \
    -i \
    -s \
    -u "Administrator:${password}" \
    -H 'X-Xsrf-Header: PingAccess' \
    "${endpoint}/virtualhosts/${id}")

  get_virtual_host_response_code=$(parse_http_response_code "${get_virtual_host_response}")

  if [[ 200 -ne ${get_virtual_host_response_code} ]]; then
      echo "There was a problem getting the virtual host: " ${get_virtual_host_response_code}
      return 1
  else
      echo "${get_virtual_host_response}"
      return 0
  fi
}

function get_application() {

  password="${1}"
  endpoint="${2}"
  id="${3}"

  get_application_response=$(curl -k \
    -i \
    -s \
    -u "Administrator:${password}" \
    -H 'X-Xsrf-Header: PingAccess' \
    "${endpoint}/applications/${id}")

  get_application_response_code=$(parse_http_response_code "${get_application_response}")

  if [[ 200 -ne ${get_application_response_code} ]]; then
      echo "There was a problem getting the application: " ${get_application_response_code}
      return 1
  else
      echo "${get_application_response}"
      return 0
  fi
}

function get_web_session() {

  password="${1}"
  endpoint="${2}"
  id="${3}"

  get_web_session_response=$(curl -k \
    -i \
    -s \
    -u "Administrator:${password}" \
    -H 'X-Xsrf-Header: PingAccess' \
    "${endpoint}/webSessions/${id}")

  get_web_session_response_code=$(parse_http_response_code "${get_web_session_response}")

  if [[ 200 -ne ${get_web_session_response_code} ]]; then
      echo "There was a problem getting the web session: " ${get_web_session_response_code}
      return 1
  else
      echo "${get_web_session_response}"
      return 0
  fi
}

function get_ping_one() {

  password="${1}"
  endpoint="${2}"

  get_ping_one_response=$(curl -k \
    -i \
    -s \
    -u "Administrator:${password}" \
    -H 'X-Xsrf-Header: PingAccess' \
    "${endpoint}/pingone/customers")

  get_ping_one_response_code=$(parse_http_response_code "${get_ping_one_response}")

  if [[ 200 -ne ${get_ping_one_response_code} ]]; then
      echo "There was a problem getting the ping one configuration: " ${get_ping_one_response_code}
      return 1
  else
      echo "${get_ping_one_response}"
      return 0
  fi
}

function get_token_provider() {

  password="${1}"
  endpoint="${2}"

  get_token_provider_response=$(curl -k \
    -i \
    -s \
    -u "Administrator:${password}" \
    -H 'X-Xsrf-Header: PingAccess' \
    "${endpoint}/tokenProvider/settings")

  get_token_provider_response_code=$(parse_http_response_code "${get_token_provider_response}")

  if [[ 200 -ne ${get_token_provider_response_code} ]]; then
      echo "There was a problem getting the token provider configuration: " ${get_token_provider_response_code}
      return 1
  else
      echo "${get_token_provider_response}"
      return 0
  fi
}