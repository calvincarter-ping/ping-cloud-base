#!/usr/bin/env sh

# Check and source environment variable(s) generated by discovery service
test -f "${STAGING_DIR}/ds_env_vars" && . "${STAGING_DIR}/ds_env_vars"

# A function to help with unit
# test mocking.  Please do not
# delete!
function inject_template() {
  echo $(envsubst < ${1})
  return $?;
}

########################################################################################################################
# Export values for PingAccess configuration settings based on single vs. multi cluster.
########################################################################################################################
function export_config_settings() {
  # First export environment variables based on PA or PA-WAS.
  export_environment_variables

  SHORT_HOST_NAME=$(hostname)
  ORDINAL=${SHORT_HOST_NAME##*-}

  if is_multi_cluster; then
    MULTI_CLUSTER=true
    export ENGINE_NAME="${ENGINE_PUBLIC_HOST_NAME}:300${ORDINAL}"
  else
    MULTI_CLUSTER=false
    export ENGINE_NAME=${SHORT_HOST_NAME}
  fi

  if is_secondary_cluster; then
    PRIMARY_CLUSTER=false
    export ADMIN_HOST_PORT="${CLUSTER_PUBLIC_HOSTNAME}:9000"
    export CLUSTER_CONFIG_HOST="${ADMIN_PUBLIC_HOST_NAME}"
  else
    PRIMARY_CLUSTER=true
    export ADMIN_HOST_PORT="${K8S_SERVICE_NAME_ADMIN}:9000"
    export CLUSTER_CONFIG_HOST="${K8S_SERVICE_NAME_ADMIN}"
  fi

  export CLUSTER_CONFIG_PORT=9090

  echo "MULTI_CLUSTER - ${MULTI_CLUSTER}"
  echo "PRIMARY_CLUSTER - ${PRIMARY_CLUSTER}"
  echo "ENGINE_NAME - ${ENGINE_NAME}"
  echo "CLUSTER_CONFIG_HOST_PORT - ${CLUSTER_CONFIG_HOST}:${CLUSTER_CONFIG_PORT}"
  echo "ADMIN_HOST_PORT - ${ADMIN_HOST_PORT}"
}

########################################################################################################################
# Determines if the environment is running in the context of multiple clusters.
#
# Returns
#   true if multi-cluster; false if not.
########################################################################################################################
function is_multi_cluster() {
  test ! -z "${IS_MULTI_CLUSTER}" && "${IS_MULTI_CLUSTER}"
}

########################################################################################################################
# Determines if the environment is set up in the primary cluster.
#
# Returns
#   true if primary cluster; false if not.
########################################################################################################################
function is_primary_cluster() {
  test "${TENANT_DOMAIN}" = "${PRIMARY_TENANT_DOMAIN}"
}

########################################################################################################################
# Determines if the environment is set up in a secondary cluster.
#
# Returns
#   true if secondary cluster; false if not.
########################################################################################################################
function is_secondary_cluster() {
  ! is_primary_cluster
}

########################################################################################################################
# Function to export different environment variables depending
# on if container is pingaccess-was or pingaccess
#
########################################################################################################################
function export_environment_variables() {

  # Common marker files
  export ADMIN_CONFIGURATION_COMPLETE="${SERVER_ROOT_DIR}/ADMIN_CONFIGURATION_COMPLETE"
  export POST_START_INIT_MARKER_FILE="${SERVER_ROOT_DIR}/post-start-init-complete"

  if isPingaccessWas; then
    export K8S_STATEFUL_SET_NAME="${K8S_STATEFUL_SET_NAME_PINGACCESS_WAS}"
    export K8S_SERVICE_NAME_ADMIN="${K8S_SERVICE_NAME_PINGACCESS_WAS_ADMIN}"

    export ADMIN_PUBLIC_HOST_NAME="${PA_WAS_ADMIN_PUBLIC_HOSTNAME}"
    export ENGINE_PUBLIC_HOST_NAME="${PA_WAS_ENGINE_PUBLIC_HOSTNAME}"

    export CLUSTER_PUBLIC_HOSTNAME="${PA_WAS_CLUSTER_PUBLIC_HOSTNAME}"

    export PA_DATA_BACKUP_URL="${BACKUP_URL}/pingaccess-was"

    # If PA_WAS heap settings are defined, then prefer those over the PA ones.
    export PA_MIN_HEAP="${PA_WAS_MIN_HEAP:-${PA_MIN_HEAP}}"
    export PA_MAX_HEAP="${PA_WAS_MAX_HEAP:-${PA_MAX_HEAP}}"
    export PA_MIN_YGEN="${PA_WAS_MIN_YGEN:-${PA_MIN_YGEN}}"
    export PA_MAX_YGEN="${PA_WAS_MAX_YGEN:-${PA_MAX_YGEN}}"
    export PA_GCOPTION="${PA_WAS_GCOPTION:-${PA_GCOPTION}}"
  else
    export K8S_STATEFUL_SET_NAME="${K8S_STATEFUL_SET_NAME_PINGACCESS}"
    export K8S_SERVICE_NAME_ADMIN="${K8S_SERVICE_NAME_PINGACCESS_ADMIN}"

    export ADMIN_PUBLIC_HOST_NAME="${PA_ADMIN_PUBLIC_HOSTNAME}"
    export ENGINE_PUBLIC_HOST_NAME="${PA_ENGINE_PUBLIC_HOSTNAME}"

    export CLUSTER_PUBLIC_HOSTNAME="${PA_CLUSTER_PUBLIC_HOSTNAME}"

    export PA_DATA_BACKUP_URL=
  fi
}

########################################################################################################################
# Logs the provided message at the provided log level. Default log level is INFO, if not provided.
#
# Arguments
#   $1 -> The log message.
#   $2 -> Optional log level. Default is INFO.
########################################################################################################################
function beluga_log() {
  file_name="$(basename "$0")"
  message="$1"
  test -z "$2" && log_level='INFO' || log_level="$2"
  format='+%Y-%m-%d %H:%M:%S'
  timestamp="$(TZ=UTC date "${format}")"
  echo "${file_name}: ${timestamp} ${log_level} ${message}"
}

########################################################################################################################
# Logs the provided message and set the log level to ERROR.
#
# Arguments
#   $1 -> The log message.
########################################################################################################################
function beluga_error() {
  beluga_log "$1" 'ERROR'
}

########################################################################################################################
# Logs the provided message and set the log level to WARN.
#
# Arguments
#   $1 -> The log message.
########################################################################################################################
function beluga_warn() {
  beluga_log "$1" 'WARN'
}

# These are needed by every script - so export them when this script is sourced.
beluga_log "export config settings"
# export_config_settings