#!/usr/bin/env sh

. "${HOOKS_DIR}/logger.lib.sh"

# Check and source environment variable(s) generated by discovery service
test -f "${STAGING_DIR}/ds_env_vars" && . "${STAGING_DIR}/ds_env_vars"

# TrustStore directory
export TRUST_STORE="${SERVER_ROOT_DIR}/config/truststore"
export TRUST_STORE_PIN="${SERVER_ROOT_DIR}/config/truststore.pin"

########################################################################################################################
# Determines if the environment is running in the context of multiple clusters.
#
# Returns
#   true if multi-cluster; false if not.
########################################################################################################################
function is_multi_cluster() {
  test ! -z "${IS_MULTI_CLUSTER}" && "${IS_MULTI_CLUSTER}"
}

########################################################################################################################
# Determines if the environment is set up in the primary cluster.
#
# Returns
#   true if primary cluster; false if not.
########################################################################################################################
function is_primary_cluster() {
  test "${TENANT_DOMAIN}" = "${PRIMARY_TENANT_DOMAIN}"
}

########################################################################################################################
# Determines if the environment is set up in a secondary cluster.
#
# Returns
#   true if secondary cluster; false if not.
########################################################################################################################
function is_secondary_cluster() {
  ! is_primary_cluster
}

########################################################################################################################
# Set DataSync start-point to listen for changes from PD instance A and replicate to PD instance B.
# Try up to 10 times to connect to PD instance before failing script.
#
# Arguments
#   $1 -> Name of pipe
########################################################################################################################
function set_start_point_for_ds_pipe() {
  PIPE=$1
  retry_count=10

  beluga_log "Set start-point for pipe, ${PIPE}"
  while [ ${retry_count} -gt 0 ]; do
    realtime-sync set-startpoint \
      --pipe-name "${PIPE}" \
      --end-of-changelog \
      --useSSL \
      --trustStorePath "${SERVER_ROOT_DIR}/config/trustore" \
      --trustStorePassword "${SERVER_ROOT_DIR}/config/trustore.pin" \
      --trustStoreFormat "JKS" \
      --bindDN "${ROOT_BIND_DN}"

    if [ $? = 0 ]; then
      beluga_log "Set start-point for pipe ${PIPE} was successful"
      return 0
    fi

    retry_count=$((retry_count - 1))
    beluga_warn "Set start-point for pipe ${PIPE} failed. Retry: ${retry_count}"
    sleep 3
  done

  beluga_error "Timeout for setting the start-point for pipe ${PIPE} exiting..."
  return 1
}

########################################################################################################################
# Start DataSync Pipe for PD instance. Try up to 10 times to connect to PD instance before failing script.
#
# Arguments
#   $1 -> Name of pipe
########################################################################################################################
function start_ds_pipe() {
  PIPE=$1
  retry_count=10

  # Stop realtime-sync if it is running at the moment
  realtime-sync stop --bindDN "${ROOT_BIND_DN}" \
  --useSSL \
  --trustAll \
  --pipe-name "${PIPE}"

  beluga_log "Starting pipe: ${PIPE}"
  while [ ${retry_count} -gt 0 ]; do
    realtime-sync start --pipe-name "${PIPE}" \
      --useSSL \
      --trustAll \
      --bindDN "${ROOT_BIND_DN}"

    if [ $? = 0 ]; then
      beluga_log "Startup for pipe ${PIPE} started successfully"
      return 0
    fi

    retry_count=$((retry_count - 1))
    beluga_warn "Startup for pipe ${PIPE} failed, retry: ${retry_count}"
    sleep 3
  done

  beluga_error "Timeout of starting pipe ${PIPE}, exiting..."
  return 1
}

########################################################################################################################
# Makes curl request to PingDirectory external API.
#
# Arguments
#   $@ -> Custom arguments to add to curl request
########################################################################################################################
function make_api_request() {
    set +x
    http_code=$(curl -sSk -o ${OUT_DIR}/api_response.txt -w "%{http_code}" \
         --retry ${API_RETRY_LIMIT} \
         --max-time ${API_TIMEOUT_WAIT} \
         --retry-delay 1 \
         --retry-connrefused \
         -u ${EXT_PD_ADMIN_BIND_DN}:${EXT_PD_ADMIN_BIND_DN_PASSWORD} \
         -H "Content-Type: application/json" "$@")
    curl_result=$?
    "${VERBOSE}" && set -x

    if test "${curl_result}" -ne 0; then
        beluga_error "API connection refused with the curl exit code: ${curl_result}"
        return 1
    fi

    if test "${http_code}" -ne 200; then
        beluga_log "API call returned HTTP status code: ${http_code}"
        cat ${OUT_DIR}/api_response.txt && rm -f ${OUT_DIR}/api_response.txt
        return 1
    fi

    cat ${OUT_DIR}/api_response.txt && rm -f ${OUT_DIR}/api_response.txt
    echo ""

    return 0
}

########################################################################################################################
# Function to copy file(s) between cloud storage and k8s
#
# Arguments
#   $1 -> desired source to copy from.
#   $2 -> desired destination to copy to.
#   s3 -> use recursion flag. will use recursion if any value is passed. if set will target all files in directory
########################################################################################################################
function awscliCopy() {
  SOURCE="${1}"
  DESTINATION="${2}"
  RECURSIVE="${3}"

  if [ -n "$RECURSIVE" ]; then
    if ! aws s3 cp "$SOURCE" "${DESTINATION}" --recursive; then
      return 1
    fi
  else
    if ! aws s3 cp "$SOURCE" "${DESTINATION}"; then
      return 1
    fi
  fi
}

#########################################################################################################################
# Function sets required environment variables for backup
#
########################################################################################################################
function initializeS3Configuration() {
  unset   BACKUP_CLOUD_PREFIX

  # Allow overriding the backup URL with an arg
  test ! -z "${1}" && BACKUP_URL="${1}"

  # Check if endpoint is AWS cloud storage service (S3 bucket)
  case "$BACKUP_URL" in "s3://"*)

    # Set AWS specific variable for backup
    export AWS_REGION=${REGION}

    DIRECTORY_NAME=$(echo "${PING_PRODUCT}" | tr '[:upper:]' '[:lower:]')

    if ! $(echo "$BACKUP_URL" | grep -q "/$DIRECTORY_NAME"); then
      BACKUP_URL="${BACKUP_URL}/${DIRECTORY_NAME}"
    fi

  esac

  export BACKUP_CLOUD_PREFIX="${BACKUP_URL}"
}
