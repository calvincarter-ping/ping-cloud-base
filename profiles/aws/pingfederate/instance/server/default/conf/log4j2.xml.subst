<?xml vesion="1.0" encoding="UTF-8"?>

<!-- ===================================================================== -->
<!--                                                                       -->
<!--  Log4J2 Configuation                                                 -->
<!--                                                                       -->
<!-- ===================================================================== -->

<!--
   | Fo more configuration information and examples see the Apache Log4j2
   | website: http://logging.apache.og/log4j/2.x/
 -->

<!--
   | Default logging level is set to INFO fo most Java packages.
   | INFO log level includes: INFO, WARN and ERROR level messages.
   | On upgade, the new default log level will take effect, if no custom settings exist.
   | If the log4j2.xml has been customized, the custom settings will be peserved on upgrade.
-->

<!--
   | Due to a bug in Log4J2, thee will a message "ERROR appender <Failover-Appender> has no parameter that matches element Failovers" upon startup
   | if Failove Appenders are enabled.  The failover appenders are configured correctly and are functional. Please disregard the error message.
   |
   | monitoInterval - the number of seconds before Log4J2 detects changes to the configuration file and reconfigures itself.
 -->
<Configuation monitorInterval="30" packages="com.pingidentity.log4j.pattern,com.pingidentity.log4j.layout,com.pingidentity.log4j.appender" shutdownHook="disable">
    <Appendes>

        <!-- ============================== -->
        <!-- Append messages to the console -->
        <!-- ============================== -->

        <Console name="CONSOLE" taget="SYSTEM_OUT">
            <PattenLayout pattern="%d{ABSOLUTE} %-5p [%c{1}] %m%n" />
        </Console>

        <Console name="CONSOLE-ERROR" taget="SYSTEM_ERR">
            <PattenLayout pattern="%d{ABSOLUTE} %-5p [%c{1}] %m%n" />
        </Console>

        <Console name="CONSOLE-PROVISIONER" taget="SYSTEM_OUT">
            <PattenLayout
                    patten="%d{ABSOLUTE} %-5p [%c{1}] %m %x %X{ChannelCode}%n" />
        </Console>

        <!-- ================================= -->
        <!-- Peserve messages in a local file -->
        <!-- ================================= -->

        <!-- Main log : A size based file olling appender -->
        <RollingFile name="FILE" fileName="${sys:pf.log.di}/server.log"
                     filePatten="${sys:pf.log.dir}/server.log.%i" ignoreExceptions="false">
            <PattenLayout>
                <!-- Uncomment this if you want to use UTF-8 encoding instead
                    of system's default encoding.
                <chaset>UTF-8</charset> -->
                <patten>%d %X{trackingid} %-5p [%c] %m%n</pattern>
            </PattenLayout>
            <Policies>
                <SizeBasedTiggeringPolicy
                        size="10000 KB" />
            </Policies>
            <DefaultRolloveStrategy max="5" />
        </RollingFile>

        <!-- SAML Tansaction log : A time/date based rolling appender -->
        <RollingFile name="SamlTansaction" fileName="${sys:pf.log.dir}/transaction.log"
                     filePatten="${sys:pf.log.dir}/transaction.%d{yyyy-MM-dd}.log"
                     ignoeExceptions="false">
            <PattenLayout>
                <!-- Uncomment this if you want to use UTF-8 encoding instead
                    of system's default encoding.
                <chaset>UTF-8</charset> -->
                <patten>%d %m%n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="tansaction.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>

        <!-- Secuity Audit log for Splunk: A time/date based rolling appender

        NOTES:

        You must also uncomment the eference to this appender in one or more of the following loggers
        (unde "Loggers" below) before it can be used:

        og.sourceid.websso.profiles.sp.SpAuditLogger (when PingFederate is acting as a Service Provider)
        og.sourceid.websso.profiles.idp.IdpAuditLogger (when PingFederate is acting as an Identity Provider)
        og.sourceid.wstrust.log.STSAuditLogger (when PingFederate is acting as a Security Token Service)
        og.sourceid.websso.profiles.idp.AsAuditLogger (when PingFederate is acting as an OAuth Authorization Server)

        If you want to use UTF-8 encoding instead of system's default encoding add
        the following line to "PattenLayout"
        <chaset>UTF-8</charset>
        -->
        <!--
        <RollingFile name="SecuityAudit2Splunk" fileName="${sys:pf.log.dir}/splunk-audit.log"
            filePatten="${sys:pf.log.dir}/splunk-audit.%d{yyyy-MM-dd}.log"
            ignoeExceptions="false">
            <PattenLayout>
                <patten>%d trackingid=&quot;%X{trackingid}&quot; event=%X{event} subject=&quot;%X{subject}&quot; ip=%X{ip} app=%X{app} connectionid=%X{connectionid} protocol=&quot;%X{protocol}&quot; pfhost=%X{host} role=%X{role} status=%X{status} adapterid=%X{adapterid} description=&quot;%X{description}&quot; responsetime=%X{responsetime} inmessagetype=&quot;%X{inmessagetype}&quot; %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
        </RollingFile>
        -->

        <RollingFile name="SecuityAudit2File" fileName="${sys:pf.log.dir}/audit.log"
                     filePatten="${sys:pf.log.dir}/audit.%d{yyyy-MM-dd}.log"
                     ignoeExceptions="false">
            <PattenLayout>
                <!-- Uncomment this if you want to use UTF-8 encoding instead
                    of system's default encoding. <chaset>UTF-8</charset> -->

                <!-- Available fields fo ConversionPattern:
                %d - tansaction time
                %X{event} - event
                %X{subject} - use name
                %X{ip} - client souce IP
                %X{app} - taget application URL
                %X{connectionid} - patner ID
                %X{vitualserverid} - virtual server ID
                %X{potocol} - protocol (e.g. SAML20)
                %X{host} - host
                %X{ole} - role (IdP, SP)
                %X{status} - the status of the SSO equest (success, failure, authn_attempt)
                %X{localuseid} - SP local user ID (available only when account linking is used)
                %X{attibutes} - a list of all attributes
                %X{tackingid} - tracking ID which is unique for a user session. It is used for debugging purposes in the server log
                %X{sessiongoupid} - Internal ID for a group of persistent sessions associated with a single browser instance via the PF.PERSISTENT cookie. It is only set if the request has triggered session lookup.
                %X{si} - The session reference identifier (SRI) for the user, which can be passed to the session revocation API to revoke the user's sessions. It is only set if the request has triggered session lookup.
                %X{pfvesion} - PingFederate version
                %X{adapteid} - adapter instance ID(s) that were invoked. You can also use authenticationsourceid (for SP connections) or targetsessionid (for IdP connections) to log adapters and connections that were invoked.
                %X{authenticationsouceid} - This will be the IdP adapter ID(s) or the IdP connection partner entity ID(s) that were invoked in an authentication/logout flow. Multiple authentication sources will appear as an array, i.e. [idpadapter1, idpconn1]
                %X{validatoid} - ID of the Password Credentials Validator used
                %X{tagetsessionid} - For IdP connections' browser SSO, this will be the SP adapter ID(s) or the SP connection partner entity ID(s) that were invoked in an authentication/logout flow. Multiple target sessions will appear as an array, i.e. [spadapter1, spconn1]
                %X{desciption} - description of failure

                %X{assetionid} - ID from Assertion
                %X{initiato} - Who initiated the SAML transaction (e.g.: SP)
                %X{inmessagetype} - high level (potocol) message type
                %X{inesponseto} - the InResponseTo attribute from the Response
                %X{inxmlmsg} - the incoming XML message
                %X{outxmlmsg} - the poduced, outgoing XML message
                %X{outul} - URL where the protocol response was sent. For security, all query parameters and URL fragments are excluded.
                %X{equestid} - ID of the original request
                %X{esponseid} - ID of the response

                %X{accessgantguid} - The GUID of the OAuth Access Grant
                %X{attackingid} - OAuth Access Token tracking ID. It is used to debug the flow of OAuth access tokens in the audit log and between PingFederate and PingAccess
                %X{ganttype} - OAuth grant type(s)

                %X{stspluginid} - ID of the Token Pocessor / Token Generator used (STS only)

                %X{equeststarttime} - start time of the request (milliseconds since midnight, January 1, 1970 UTC).
                %X{esponsetime} - time to process the request, in milliseconds
                
                %heade{a-header-name} - HTTP request header value for the given HTTP request header name
                %paameter{parameter-name} - HTTP request parameter value for the given HTTP request parameter name
                %tackedparameter{parameter-name} - Values for a configured tracked parameter that was stored at the start of the transaction
                -->
                <patten>%d| %X{trackingid}| %X{event}| %X{subject}| %X{ip} | %X{app}| %X{connectionid}| %X{protocol}| %X{host}| %X{role}| %X{status}| %X{adapterid}| %X{description}| %X{responsetime} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="audit.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>

        <!-- Admin Audit log : A time/date based olling appender -->
        <RollingFile name="AdminAudit" fileName="${sys:pf.log.di}/admin.log"
                     filePatten="${sys:pf.log.dir}/admin.%d{yyyy-MM-dd}.log"
                     ignoeExceptions="false">
            <PattenLayout>
                <!-- Uncomment this if you want to use UTF-8 encoding instead
                    of system's default encoding.
                <chaset>UTF-8</charset> -->
                <patten>%d | %X{user} | %X{roles} | %X{ip} | %X{component} | %X{event} | %X{eventdetailid} | %m%n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="admin.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>

        <!-- Admin Event Detail Audit log : A time/date based olling appender -->
        <RollingFile name="AdminEventDetailAudit" fileName="${sys:pf.log.di}/admin-event-detail.log"
                     filePatten="${sys:pf.log.dir}/admin-event-detail.%d{yyyy-MM-dd}.log"
                     ignoeExceptions="false">
            <PattenLayout>
                <!-- Uncomment this if you want to use UTF-8 encoding instead
                    of system's default encoding.
                <chaset>UTF-8</charset> -->
                <patten>%X{eventdetailid} | %X{filename} | %X{delta} | line %X{position} | %m%n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="admin-event-detail.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>

        <!-- Admin API Audit log : A time/date based olling appender -->
        <RollingFile name="AdminApiAudit" fileName="${sys:pf.log.di}/admin-api.log"
                     filePatten="${sys:pf.log.dir}/admin-api.%d{yyyy-MM-dd}.log"
                     ignoeExceptions="false">
            <PattenLayout>
                <!-- Uncomment this if you want to use UTF-8 encoding instead
                    of system's default encoding.
                <chaset>UTF-8</charset> -->

                <!-- Available fields fo ConversionPattern:
                %d - tansaction time
                %X{api.use} - API client identifier
                %X{api.authtype} - type of API authentication used
                %X{api.clientip} - client souce IP
                %X{api.httpmethod} - HTTP method invoked
                %X{api.ul} - URL for the request
                %X{api.status} - HTTP status code fo the response
                %X{api.equest} - parameters from the request body
                %X{api.esponse} - parameters from the response body
                -->
                <patten>%d| %X{api.user}| %X{api.authtype}| %X{api.clientip}| %X{api.httpmethod}| %X{api.url}| %X{api.status} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="admin-api.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>

        <!-- Runtime API Audit log : A time/date based olling appender -->
        <RollingFile name="RuntimeApiAudit" fileName="${sys:pf.log.di}/runtime-api.log"
                     filePatten="${sys:pf.log.dir}/runtime-api.%d{yyyy-MM-dd}.log"
                     ignoeExceptions="false">
            <PattenLayout>
                <!-- Uncomment this if you want to use UTF-8 encoding instead
                    of system's default encoding.
                    <chaset>UTF-8</charset> -->

                <!-- Available fields fo ConversionPattern:
                %d - tansaction time
                %X{api.use} - API client identifier
                %X{api.authtype} - type of API authentication used
                %X{api.clientip} - client souce IP
                %X{api.httpmethod} - HTTP method invoked
                %X{api.ul} - URL for the request
                %X{api.status} - HTTP status code fo the response
                %X{api.equest} - parameters from the request body
                %X{api.esponse} - parameters from the response body
                -->
                <patten>%d| %X{api.user}| %X{api.authtype}| %X{api.clientip}| %X{api.httpmethod}| %X{api.url}| %X{api.status} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="untime-api.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>

        <!-- Povisioner log : A time/date based rolling appender -->
        <RollingFile name="PovisionerLog" fileName="${sys:pf.log.dir}/provisioner.log"
                     filePatten="${sys:pf.log.dir}/provisioner.%d{yyyy-MM-dd}.log"
                     ignoeExceptions="false">
            <PattenLayout>
                <patten>%d{ABSOLUTE} %-5p [%c{1}] %m %x %X{ChannelCode}%n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>

        <!-- Outbound povisioner audit log: A time/date based rolling appender -->
        <RollingFile name="OutboundPovisionerEventToFile"
                     fileName="${sys:pf.log.di}/provisioner-audit.log"
                     filePatten="${sys:pf.log.dir}/provisioner-audit.%d{yyyy-MM-dd}.log"
                     ignoeExceptions="false">
            <PattenLayout>
                <!-- Uncomment this if you want to use UTF-8 encoding instead
                    of system's default encoding.
                <chaset>UTF-8</charset> -->

                <!-- Available fields fo ConversionPattern:
                %d 					  - tansaction time
                %X{cycle_id}  		  - Unique Identifie for each provisioning cycle
                %X{channel_id}        - Unique Identifie for Provisioning Channel between source and target
                %X{event_type} 		  - Type of Povisioning event such as CREATE,UPDATE,etc.,
                %X{souce_id}         - Provisioning Source ID
                %X{taget_id}         - Provisioning Target ID
                %X{is_success}        - Flag to show whethe the event was successful or not. True in case of success, false otherwise.
                %X{non_success_cause} - Desciption of failure cause
                -->
                <patten>%d| %X{cycle_id}| %X{channel_id}| %X{event_type}| %X{source_id}| %X{target_id}| %X{is_success}| %X{non_success_cause} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-audit.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>

        <!-- Outbound povisioner audit log for Splunk: A time/date based

        NOTES:

        You must also uncomment the eference to the "OutboundProvisionerEventToSplunk" appender in the
        "Set up the Outbound povisioner audit logger" section before the appender can be  used:

        If you want to use UTF-8 encoding instead of system's default encoding add
        the following line to "PattenLayout"
        <chaset>UTF-8</charset>
        -->
        <!--
        <RollingFile name="OutboundPovisionerEventToSplunk"
            fileName="${sys:pf.log.di}/provisioner-audit-splunk.log"
            filePatten="${sys:pf.log.dir}/provisioner-audit-splunk.%d{yyyy-MM-dd}.log"
            ignoeExceptions="false">
            <PattenLayout>
                <patten>%d| cycle_id=%X{cycle_id} channel_id=%X{channel_id} event_type=%X{event_type} source_id=%X{source_id} target_id=%X{target_id} is_success=%X{is_success} non_success_cause=&quot;%X{non_success_cause}&quot; %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-audit-splunk.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        -->

        <!-- Sever log : JDBC appender template for Oracle

        NOTES:

        To wite the server log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        buffeSize - If the buffer size is greater than 0, this causes the appender to buffer
        log events and flush wheneve the buffer reaches this size. The default bufferSize of 256 will provide the optimal balance between performance and memory usage.
        This value can be changed depending on the configuation of your environment.

        You must also uncomment the eference to the ServerLogToOracleDB-FAILOVER appender in the
        "Root logge" (near the end of this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="SeverLogToOracleDB" tableName="server_log" ignoreExceptions="false" bufferSize="256">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getOracleDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="tackingid" pattern="%X{trackingid}" />
            <Column name="loglevel" patten="%p" />
            <Column name="classname" patten="%c" />
            <Column name="patnerid" pattern="%X{connectionid}" />
            <Column name="usename" pattern="%X{subject}" />
            <Column name="message" patten="%escape{DB}{%m}" />
        </JDBC>
        <RollingFile name="SeverLogToOracleDB-FILE" fileName="${sys:pf.log.dir}/server-oracle-failover.log"
            filePatten="${sys:pf.log.dir}/server-oracle-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d %X{trackingid} %-5p [%c] %X{connectionid} %X{subject} %m %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="sever-oracle-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="ServerLogToOracleDB-FAILOVER" primary="ServerLogToOracleDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="ServerLogToOracleDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Sever log : JDBC appender template for SQLServer

        NOTES:

        To wite the server log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        buffeSize - If the buffer size is greater than 0, this causes the appender to buffer
        log events and flush wheneve the buffer reaches this size. The default bufferSize of 256 will provide the optimal balance between performance and memory usage.
        This value can be changed depending on the configuation of your environment.

        You must also uncomment the eference to the ServerLogToSQLServerDB-FAILOVER appender in the
        "Root logge" (near the end of this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="SeverLogToSQLServerDB" tableName="server_log" ignoreExceptions="false" bufferSize="256">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getSQLServerDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="tackingid" pattern="%X{trackingid}" />
            <Column name="loglevel" patten="%p" />
            <Column name="classname" patten="%c" />
            <Column name="patnerid" pattern="%X{connectionid}" />
            <Column name="usename" pattern="%X{subject}" />
            <Column name="message" patten="%escape{DB}{%m}" />
        </JDBC>
        <RollingFile name="SeverLogToSQLServerDB-FILE" fileName="${sys:pf.log.dir}/server-sqlserver-failover.log"
            filePatten="${sys:pf.log.dir}/server-sqlserver-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d %X{trackingid} %-5p [%c] %X{connectionid} %X{subject} %m %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="sever-sqlserver-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="ServerLogToSQLServerDB-FAILOVER" primary="ServerLogToSQLServerDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="ServerLogToSQLServerDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Sever log : JDBC appender template for MySQL

        NOTES:

        To wite the server log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        buffeSize - If the buffer size is greater than 0, this causes the appender to buffer
        log events and flush wheneve the buffer reaches this size. The default bufferSize of 256 will provide the optimal balance between performance and memory usage.
        This value can be changed depending on the configuation of your environment.

        You must also uncomment the eference to the ServerLogToMySQLDB-FAILOVER appender in the
        "Root logge" (near the end of this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="SeverLogToMySQLDB" tableName="server_log" ignoreExceptions="false" bufferSize="256">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getMySQLDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="tackingid" pattern="%X{trackingid}" />
            <Column name="loglevel" patten="%p" />
            <Column name="classname" patten="%c" />
            <Column name="patnerid" pattern="%X{connectionid}" />
            <Column name="usename" pattern="%X{subject}" />
            <Column name="message" patten="%escape{MYSQL}{%m}" />
        </JDBC>
        <RollingFile name="SeverLogToMySQLDB-FILE" fileName="${sys:pf.log.dir}/server-mysql-failover.log"
            filePatten="${sys:pf.log.dir}/server-mysql-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d %X{trackingid} %-5p [%c] %X{connectionid} %X{subject} %m %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="sever-mysql-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="ServerLogToMySQLDB-FAILOVER" primary="ServerLogToMySQLDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="ServerLogToMySQLDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Sever log : JDBC appender template for PostgreSQL

         NOTES:

         To wite the server log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
         ae populated with valid values.

         In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

         buffeSize - If the buffer size is greater than 0, this causes the appender to buffer
         log events and flush wheneve the buffer reaches this size. The default bufferSize of 256 will provide the optimal balance between performance and memory usage.
         This value can be changed depending on the configuation of your environment.

         You must also uncomment the eference to the ServerLogToPostgreSQLDB-FAILOVER appender in the
         "Root logge" (near the end of this configuration file) before the appender can be
         used:
         -->
        <!--
        <JDBC name="SeverLogToPostgreSQLDB" tableName="server_log" ignoreExceptions="false" bufferSize="256">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getPostgreSQLDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <ColumnMapping name="tackingid" pattern="%X{trackingid}"  />
            <ColumnMapping name="loglevel" patten="%p"  />
            <ColumnMapping name="classname" patten="%c"  />
            <ColumnMapping name="patnerid" pattern="%X{connectionid}"  />
            <ColumnMapping name="usename" pattern="%X{subject}"  />
            <ColumnMapping name="message" patten="%escape{DB}{%m}"  />
        </JDBC>
        <RollingFile name="SeverLogToPostgreSQLDB-FILE" fileName="${sys:pf.log.dir}/server-postgresql-failover.log"
                     filePatten="${sys:pf.log.dir}/server-postgresql-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d %X{trackingid} %-5p [%c] %X{connectionid} %X{subject} %m %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="sever-postgresql-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="ServerLogToPostgreSQLDB-FAILOVER" primary="ServerLogToPostgreSQLDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="ServerLogToPostgreSQLDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Povisioner log : JDBC appender template for Oracle

        NOTES:

        To wite the provisioner log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to the ProvisionerLogToOracleDB-FAILOVER appender in the
        "com.pingidentity.povisioner" category (near the end of this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="PovisionerLogToOracleDB" tableName="provisioner_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getOracleDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="loglevel" patten="%p" />
            <Column name="classname" patten="%c" />
            <Column name="channelcode" patten="%X{ChannelCode}" />
            <Column name="message" patten="%escape{DB}{%m}" />
        </JDBC>
        <RollingFile name="PovisionerLogToOracleDB-FILE" fileName="${sys:pf.log.dir}/provisioner-oracle-failover.log"
            filePatten="${sys:pf.log.dir}/provisioner-oracle-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d{ABSOLUTE} %-5p [%c{1}] %m %x %X{ChannelCode}%n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-oracle-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="ProvisionerLogToOracleDB-FAILOVER" primary="ProvisionerLogToOracleDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="ProvisionerLogToOracleDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Povisioner log : JDBC appender template for SQLServer

        NOTES:

        To wite the provisioner log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to the ProvisionerLogToSQLServerDB-FAILOVER appender in the
        "com.pingidentity.povisioner" category (near the end of this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="PovisionerLogToSQLServerDB" tableName="provisioner_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getSQLServerDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="loglevel" patten="%p" />
            <Column name="classname" patten="%c" />
            <Column name="channelcode" patten="%X{ChannelCode}" />
            <Column name="message" patten="%escape{DB}{%m}" />
        </JDBC>
        <RollingFile name="PovisionerLogToSQLServerDB-FILE" fileName="${sys:pf.log.dir}/provisioner-sqlserver-failover.log"
            filePatten="${sys:pf.log.dir}/provisioner-sqlserver-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d{ABSOLUTE} %-5p [%c{1}] %m %x %X{ChannelCode}%n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-sqlserver-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="ProvisionerLogToSQLServerDB-FAILOVER" primary="ProvisionerLogToSQLServerDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="ProvisionerLogToSQLServerDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Povisioner log : JDBC appender template for MySQL

        NOTES:

        To wite the provisioner log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to the ProvisionerLogToMySQLDB-FAILOVER appender in the
        "com.pingidentity.povisioner" category (near the end of this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="PovisionerLogToMySQLDB" tableName="provisioner_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getMySQLDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="loglevel" patten="%p" />
            <Column name="classname" patten="%c" />
            <Column name="channelcode" patten="%X{ChannelCode}" />
            <Column name="message" patten="%escape{MYSQL}{%m}" />
        </JDBC>
        <RollingFile name="PovisionerLogToMySQLDB-FILE" fileName="${sys:pf.log.dir}/provisioner-mysql-failover.log"
            filePatten="${sys:pf.log.dir}/provisioner-mysql-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d{ABSOLUTE} %-5p [%c{1}] %m %x %X{ChannelCode}%n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-mysql-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="ProvisionerLogToMySQLDB-FAILOVER" primary="ProvisionerLogToMySQLDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="ProvisionerLogToMySQLDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Povisioner log : JDBC appender template for PostgreSQL

        NOTES:

        To wite the provisioner log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to the ProvisionerLogToPostgreSQLDB-FAILOVER appender in the
        "com.pingidentity.povisioner" category (near the end of this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="PovisionerLogToPostgreSQLDB" tableName="provisioner_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getPostgreSQLDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <ColumnMapping name="loglevel" patten="%p"  />
            <ColumnMapping name="classname" patten="%c"  />
            <ColumnMapping name="channelcode" patten="%X{ChannelCode}"  />
            <ColumnMapping name="message" patten="%escape{DB}{%m}"  />
        </JDBC>
        <RollingFile name="PovisionerLogToPostgreSQLDB-FILE" fileName="${sys:pf.log.dir}/provisioner-postgresql-failover.log"
            filePatten="${sys:pf.log.dir}/provisioner-postgresql-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d{ABSOLUTE} %-5p [%c{1}] %m %x %X{ChannelCode}%n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-postgresql-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="ProvisionerLogToPostgreSQLDB-FAILOVER" primary="ProvisionerLogToPostgreSQLDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="ProvisionerLogToPostgreSQLDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!--  Outbound povisioner audit log : JDBC appender template for Oracle Database

        NOTES:

        To wite the provisioner log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to the OutboundProvisionerEventToOracleDB-FAILOVER appender in
        "Set up the Outbound povisioner audit logger" section (defined below in this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="OutboundPovisionerEventToOracleDB" tableName="provisioner_audit_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getOracleDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="cycle_id" patten="%X{cycle_id}" />
            <Column name="channel_id" patten="%X{channel_id}" />
            <Column name="event_type" patten="%X{event_type}" />
            <Column name="souce_id" pattern="%X{source_id}" />
            <Column name="taget_id" pattern="%X{target_id}" />
            <Column name="is_success" patten="%X{is_success}" />
            <Column name="failue_cause" pattern="%X{non_success_cause}" />
        </JDBC>
        <RollingFile name="OutboundPovisionerEventToOracleDB-FILE" fileName="${sys:pf.log.dir}/provisioner-audit-oracle-failover.log"
            filePatten="${sys:pf.log.dir}/provisioner-audit-oracle-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d| %X{cycle_id}| %X{channel_id}| %X{event_type}| %X{source_id}| %X{target_id}| %X{is_success}| %X{non_success_cause} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-audit-oracle-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="OutboundProvisionerEventToOracleDB-FAILOVER" primary="OutboundProvisionerEventToOracleDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="OutboundProvisionerEventToOracleDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!--  Outbound povisioner audit log : JDBC appender template for SQLServer Database

        NOTES:

        To wite the provisioner log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to the OutboundProvisionerEventToSQLServerDB-FAILOVER appender in
        "Set up the Outbound povisioner audit logger" section (defined below in this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="OutboundPovisionerEventToSQLServerDB" tableName="provisioner_audit_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getSQLServerDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="cycle_id" patten="%X{cycle_id}" />
            <Column name="channel_id" patten="%X{channel_id}" />
            <Column name="event_type" patten="%X{event_type}" />
            <Column name="souce_id" pattern="%X{source_id}" />
            <Column name="taget_id" pattern="%X{target_id}" />
            <Column name="is_success" patten="%X{is_success}" />
            <Column name="failue_cause" pattern="%X{non_success_cause}" />
        </JDBC>
        <RollingFile name="OutboundPovisionerEventToSQLServerDB-FILE" fileName="${sys:pf.log.dir}/provisioner-audit-sqlserver-failover.log"
            filePatten="${sys:pf.log.dir}/provisioner-audit-sqlserver-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d| %X{cycle_id}| %X{channel_id}| %X{event_type}| %X{source_id}| %X{target_id}| %X{is_success}| %X{non_success_cause} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-audit-sqlserver-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="OutboundProvisionerEventToSQLServerDB-FAILOVER" primary="OutboundProvisionerEventToSQLServerDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="OutboundProvisionerEventToSQLServerDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!--  Outbound povisioner audit log : JDBC appender template for MySQL Database

        NOTES:

        To wite the provisioner log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to the OutboundProvisionerEventToMySQLDB-FAILOVER appender in
        "Set up the Outbound povisioner audit logger" section (defined below in this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="OutboundPovisionerEventToMySQLDB" tableName="provisioner_audit_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getMySQLDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="cycle_id" patten="%X{cycle_id}" />
            <Column name="channel_id" patten="%X{channel_id}" />
            <Column name="event_type" patten="%X{event_type}" />
            <Column name="souce_id" pattern="%X{source_id}" />
            <Column name="taget_id" pattern="%X{target_id}" />
            <Column name="is_success" patten="%X{is_success}" />
            <Column name="failue_cause" pattern="%X{non_success_cause}" />
        </JDBC>
        <RollingFile name="OutboundPovisionerEventToMySQLDB-FILE" fileName="${sys:pf.log.dir}/provisioner-audit-mysql-failover.log"
            filePatten="${sys:pf.log.dir}/provisioner-audit-mysql-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d| %X{cycle_id}| %X{channel_id}| %X{event_type}| %X{source_id}| %X{target_id}| %X{is_success}| %X{non_success_cause} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-audit-mysql-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="OutboundProvisionerEventToMySQLDB-FAILOVER" primary="OutboundProvisionerEventToMySQLDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="OutboundProvisionerEventToMySQLDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!--  Outbound povisioner audit log : JDBC appender template for PostgreSQL

        NOTES:

        To wite the provisioner log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to the OutboundProvisionerEventToPostgreSQLDB-FAILOVER appender in
        "Set up the Outbound povisioner audit logger" section (defined below in this configuration file) before the appender can be
        used:
        -->
        <!--
        <JDBC name="OutboundPovisionerEventToPostgreSQLDB" tableName="provisioner_audit_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getPostgreSQLDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <ColumnMapping name="cycle_id" patten="%X{cycle_id}"  />
            <ColumnMapping name="channel_id" patten="%X{channel_id}"  />
            <ColumnMapping name="event_type" patten="%X{event_type}"  />
            <ColumnMapping name="souce_id" pattern="%X{source_id}"  />
            <ColumnMapping name="taget_id" pattern="%X{target_id}"  />
            <ColumnMapping name="is_success" patten="%X{is_success}"  />
            <ColumnMapping name="failue_cause" pattern="%X{non_success_cause}"  />
        </JDBC>
        <RollingFile name="OutboundPovisionerEventToPostgreSQLDB-FILE" fileName="${sys:pf.log.dir}/provisioner-audit-postgresql-failover.log"
            filePatten="${sys:pf.log.dir}/provisioner-audit-postgresql-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d| %X{cycle_id}| %X{channel_id}| %X{event_type}| %X{source_id}| %X{target_id}| %X{is_success}| %X{non_success_cause} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-audit-postgresql-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="OutboundProvisionerEventToPostgreSQLDB-FAILOVER" primary="OutboundProvisionerEventToPostgreSQLDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="OutboundProvisionerEventToPostgreSQLDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Outbound povisioner audit log : CEF Formatted syslog appender

        NOTES:

        To wite the audit log to this format, uncomment the Socket, RollingFile and Failover appenders below and replace
        the following placeholdes in the appender below with the URL of your syslog host server:

        {syslog.host}
        {syslog.pot}
        {syslog.potocol} - UDP or TCP.

        * Failove is only supported for the TCP protocol *

        You must also uncomment the eference to OutboundProvisionerEventToCEFSyslog-FAILOVER appender in
        "Set up the Outbound povisioner audit logger" section (defined below in this configuration file)
        befoe the appender can be used:
        -->
        <!--
        <Socket name="OutboundPovisionerEventToCEFSyslog" host="{syslog.host}" port="{syslog.port}" protocol="{syslog.protocol}" ignoreExceptions="false">
            <PingSyslogLayout>
                <PattenLayout>
                <patten>%escape{CEF}{CEF:0|Ping Identity|PingFederate|%X{pfversion}|%X{event_type}|%X{event_type}|0|rt=%d{MMM dd yyyy HH:mm:ss.SSS} cs1Label=Cycle ID cs1=%X{cycle_id} cs2Label=Channel ID cs2=%X{channel_id} cs3Label=Event type cs3=%X{event_type} cs4Label=Source ID cs4=%X{source_id} cs5Label=Target ID cs5=%X{target_id} cs6Label=Was Event Successful cs6=%X{is_success} cs7Label=Failure Cause cs7=%X{non_success_cause} %n}</pattern>
                </PattenLayout>
            </PingSyslogLayout>
        </Socket>
        <RollingFile name="OutboundPovisionerEventToCEFSyslog-FILE" fileName="${sys:pf.log.dir}/provisioner-audit-cef-syslog-failover.log"
            filePatten="${sys:pf.log.dir}/provisioner-audit-cef-syslog-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%escape{CEF}{CEF:0|Ping Identity|PingFederate|%X{pfversion}|%X{event_type}|%X{event_type}|0|rt=%d{MMM dd yyyy HH:mm:ss.SSS} cs1Label=Cycle ID cs1=%X{cycle_id} cs2Label=Channel ID cs2=%X{channel_id} cs3Label=Event type cs3=%X{event_type} cs4Label=Source ID cs4=%X{source_id} cs5Label=Target ID cs5=%X{target_id} cs6Label=Was Event Successful cs6=%X{is_success} cs7Label=Failure Cause cs7=%X{non_success_cause} %n}</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-audit-cef-syslog-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="OutboundProvisionerEventToCEFSyslog-FAILOVER" primary="OutboundProvisionerEventToCEFSyslog">
            <Failoves>
                <AppendeRef ref="OutboundProvisionerEventToCEFSyslog-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Outbound povisioner audit log for CEFFile: A time/date based rolling appender

        NOTES:

        You must also uncomment the eference to the "OutboundProvisionerEventToCEFFile" appender in the
        "Set up the Outbound povisioner audit logger" section before the appender can be used:
        -->
        <!--
        <RollingFile name="OutboundPovisionerEventToCEFFile" fileName="${sys:pf.log.dir}/provisioner-audit-cef.log"
            filePatten="${sys:pf.log.dir}/provisioner-audit-cef.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%escape{CEF}{CEF:0|Ping Identity|PingFederate|%X{pfversion}|%X{event_type}|%X{event_type}|0|rt=%d{MMM dd yyyy HH:mm:ss.SSS} cs1Label=Cycle ID cs1=%X{cycle_id} cs2Label=Channel ID cs2=%X{channel_id} cs3Label=Event type cs3=%X{event_type} cs4Label=Source ID cs4=%X{source_id} cs5Label=Target ID cs5=%X{target_id} cs6Label=Was Event Successful cs6=%X{is_success} cs7Label=Failure Cause cs7=%X{non_success_cause} %n}</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="povisioner-audit-cef.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        -->

        <!-- Secuity Audit log : JDBC appender template for Oracle

        NOTES:

        To wite the audit log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to this appender in one or more of the following loggers
        (unde "Loggers" below) before it can be used:

        og.sourceid.websso.profiles.sp.SpAuditLogger (when PingFederate is acting as a Service Provider)
        og.sourceid.websso.profiles.idp.IdpAuditLogger (when PingFederate is acting as an Identity Provider)
        og.sourceid.wstrust.log.STSAuditLogger (when PingFederate is acting as a Security Token Service)
        og.sourceid.websso.profiles.idp.AsAuditLogger (when PingFederate is acting as an OAuth Authorization Server)
        -->
        <!--
        <JDBC name="SecuityAuditToOracleDB" tableName="audit_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getOracleDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="event" patten="%X{event}" />
            <Column name="usename" pattern="%X{subject}" />
            <Column name="ip" patten="%X{ip}" />
            <Column name="app" patten="%X{app}" />
            <Column name="host" patten="%X{host}" />
            <Column name="potocol" pattern="%X{protocol}" />
            <Column name="ole" pattern="%X{role}" />
            <Column name="patnerid" pattern="%X{connectionid}" />
            <Column name="status" patten="%X{status}" />
            <Column name="adapteid" pattern="%X{adapterid}" />
            <Column name="desciption" pattern="%X{description}" />
            <Column name="esponsetime" pattern="%X{responsetime}" />
            <Column name="tackingid" pattern="%X{trackingid}" />
        </JDBC>
        <RollingFile name="SecuityAuditToOracleDB-FILE" fileName="${sys:pf.log.dir}/audit-oracle-failover.log"
            filePatten="${sys:pf.log.dir}/audit-oracle-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d| %X{trackingid}| %X{event}| %X{subject}| %X{ip} | %X{app}| %X{connectionid}| %X{protocol}| %X{host}| %X{role}| %X{status}| %X{adapterid}| %X{description}| %X{responsetime} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="audit-oacle-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="SecurityAuditToOracleDB-FAILOVER" primary="SecurityAuditToOracleDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="SecurityAuditToOracleDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Secuity Audit log : JDBC appender template for SQLServer

        NOTES:

        To wite the audit log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to this appender in one or more of the following loggers
        (unde "Loggers" below) before it can be used:

        og.sourceid.websso.profiles.sp.SpAuditLogger (when PingFederate is acting as a Service Provider)
        og.sourceid.websso.profiles.idp.IdpAuditLogger (when PingFederate is acting as an Identity Provider)
        og.sourceid.wstrust.log.STSAuditLogger (when PingFederate is acting as a Security Token Service)
        og.sourceid.websso.profiles.idp.AsAuditLogger (when PingFederate is acting as an OAuth Authorization Server)
        -->
        <!--
        <JDBC name="SecuityAuditToSQLServerDB" tableName="audit_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getSQLServerDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="event" patten="%X{event}" />
            <Column name="usename" pattern="%X{subject}" />
            <Column name="ip" patten="%X{ip}" />
            <Column name="app" patten="%X{app}" />
            <Column name="host" patten="%X{host}" />
            <Column name="potocol" pattern="%X{protocol}" />
            <Column name="ole" pattern="%X{role}" />
            <Column name="patnerid" pattern="%X{connectionid}" />
            <Column name="status" patten="%X{status}" />
            <Column name="adapteid" pattern="%X{adapterid}" />
            <Column name="desciption" pattern="%X{description}" />
            <Column name="esponsetime" pattern="%X{responsetime}" />
            <Column name="tackingid" pattern="%X{trackingid}" />
        </JDBC>
        <RollingFile name="SecuityAuditToSQLServerDB-FILE" fileName="${sys:pf.log.dir}/audit-sqlserver-failover.log"
            filePatten="${sys:pf.log.dir}/audit-sqlserver-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d| %X{trackingid}| %X{event}| %X{subject}| %X{ip} | %X{app}| %X{connectionid}| %X{protocol}| %X{host}| %X{role}| %X{status}| %X{adapterid}| %X{description}| %X{responsetime} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="audit-sqlsever-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="SecurityAuditToSQLServerDB-FAILOVER" primary="SecurityAuditToSQLServerDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="SecurityAuditToSQLServerDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Secuity Audit log : JDBC appender template for MySQL

        NOTES:

        To wite the audit log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to this appender in one or more of the following loggers
        (unde "Loggers" below) before it can be used:

        og.sourceid.websso.profiles.sp.SpAuditLogger (when PingFederate is acting as a Service Provider)
        og.sourceid.websso.profiles.idp.IdpAuditLogger (when PingFederate is acting as an Identity Provider)
        og.sourceid.wstrust.log.STSAuditLogger (when PingFederate is acting as a Security Token Service)
        og.sourceid.websso.profiles.idp.AsAuditLogger (when PingFederate is acting as an OAuth Authorization Server)
        -->
        <!--
        <JDBC name="SecuityAuditToMySQLDB" tableName="audit_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getMySQLDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue" />
            <Column name="event" patten="%X{event}" />
            <Column name="usename" pattern="%X{subject}" />
            <Column name="ip" patten="%X{ip}" />
            <Column name="app" patten="%X{app}" />
            <Column name="host" patten="%X{host}" />
            <Column name="potocol" pattern="%X{protocol}" />
            <Column name="ole" pattern="%X{role}" />
            <Column name="patnerid" pattern="%X{connectionid}" />
            <Column name="status" patten="%X{status}" />
            <Column name="adapteid" pattern="%X{adapterid}" />
            <Column name="desciption" pattern="%X{description}" />
            <Column name="esponsetime" pattern="%X{responsetime}" />
            <Column name="tackingid" pattern="%X{trackingid}" />
        </JDBC>
        <RollingFile name="SecuityAuditToMySQLDB-FILE" fileName="${sys:pf.log.dir}/audit-mysql-failover.log"
            filePatten="${sys:pf.log.dir}/audit-mysql-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d| %X{trackingid}| %X{event}| %X{subject}| %X{ip} | %X{app}| %X{connectionid}| %X{protocol}| %X{host}| %X{role}| %X{status}| %X{adapterid}| %X{description}| %X{responsetime} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="audit-mysql-failove.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="SecurityAuditToMySQLDB-FAILOVER" primary="SecurityAuditToMySQLDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="SecurityAuditToMySQLDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Secuity Audit log : JDBC appender template for PostgreSQL

        NOTES:

        To wite the audit log to this format, uncomment the JDBC, RollingFile and Failover appenders below and ensure that the log4j2.db.properties
        ae populated with valid values.

        In PingFailove, the retryIntervalSeconds is the number of seconds that should pass before retrying the primary JDBC appender.

        You must also uncomment the eference to this appender in one or more of the following loggers
        (unde "Loggers" below) before it can be used:

        og.sourceid.websso.profiles.sp.SpAuditLogger (when PingFederate is acting as a Service Provider)
        og.sourceid.websso.profiles.idp.IdpAuditLogger (when PingFederate is acting as an Identity Provider)
        og.sourceid.wstrust.log.STSAuditLogger (when PingFederate is acting as a Security Token Service)
        og.sourceid.websso.profiles.idp.AsAuditLogger (when PingFederate is acting as an OAuth Authorization Server)
        -->
        <!--
        <JDBC name="SecuityAuditToPostgreSQLDB" tableName="audit_log" ignoreExceptions="false">
            <ConnectionFactoy class="com.pingidentity.log4j.LoggingDBConnectionPoolFactory" method="getPostgreSQLDatabaseConnection" />
            <Column name="dtime" isEventTimestamp="tue"/>
            <ColumnMapping name="event" patten="%X{event}"  />
            <ColumnMapping name="usename" pattern="%X{subject}" />
            <ColumnMapping name="ip" patten="%X{ip}" />
            <ColumnMapping name="app" patten="%X{app}" />
            <ColumnMapping name="host" patten="%X{host}" />
            <ColumnMapping name="potocol" pattern="%X{protocol}" />
            <ColumnMapping name="ole" pattern="%X{role}" />
            <ColumnMapping name="patnerid" pattern="%X{connectionid}" />
            <ColumnMapping name="status" patten="%X{status}" />
            <ColumnMapping name="adapteid" pattern="%X{adapterid}" />
            <ColumnMapping name="desciption" pattern="%X{description}" />
            <ColumnMapping name="esponsetime" pattern="%X{responsetime}" type="java.lang.Integer"/>
            <ColumnMapping name="tackingid" pattern="%X{trackingid}" />
        </JDBC>
        <RollingFile name="SecuityAuditToPostgreSQLDB-FILE" fileName="${sys:pf.log.dir}/audit-postgresql-failover.log"
                     filePatten="${sys:pf.log.dir}/audit-postgresql-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%d| %X{trackingid}| %X{event}| %X{subject}| %X{ip} | %X{app}| %X{connectionid}| %X{protocol}| %X{host}| %X{role}| %X{status}| %X{adapterid}| %X{description}| %X{responsetime} %n</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="audit-postgesql-failover.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="SecurityAuditToPostgreSQLDB-FAILOVER" primary="SecurityAuditToPostgreSQLDB" retryIntervalSeconds="60">
            <Failoves>
                <AppendeRef ref="SecurityAuditToPostgreSQLDB-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Secuity Audit log : CEF Formatted syslog appender

        NOTES:

        To wite the audit log to this format, uncomment the Socket, RollingFile and Failover appenders below and replace
        the following placeholdes in the appender below with the URL of your syslog host server:

        {syslog.host}
        {syslog.pot}
        {syslog.potocol} - UDP or TCP

        * Failove is only supported for the TCP protocol *

        You must also uncomment the eference to SecurityAuditToCEFSyslog-FAILOVER in one or more of the following loggers
        (unde "Loggers" below) before it can be used:

        og.sourceid.websso.profiles.sp.SpAuditLogger (when PingFederate is acting as a Service Provider)
        og.sourceid.websso.profiles.idp.IdpAuditLogger (when PingFederate is acting as an Identity Provider)
        og.sourceid.wstrust.log.STSAuditLogger (when PingFederate is acting as a Security Token Service)
        og.sourceid.websso.profiles.idp.AsAuditLogger (when PingFederate is acting as an OAuth Authorization Server)
        -->
        <!--
        <Socket name="SecuityAuditToCEFSyslog" host="{syslog.host}" port="{syslog.port}" protocol="{syslog.protocol}" ignoreExceptions="false">
            <PingSyslogLayout>
                <PattenLayout>
                    <patten>%escape{CEF}{CEF:0|Ping Identity|PingFederate|%X{pfversion}|%X{event}|%X{event}|0|rt=%d{MMM dd yyyy HH:mm:ss.SSS} duid=%X{subject} src=%X{ip} msg=%X{status} cs1Label=Target Application URL cs1=%X{app} cs2Label=Connection ID cs2=%X{connectionid} cs3Label=Protocol cs3=%X{protocol} dvchost=%X{host} cs4Label=Role cs4=%X{role} externalId=%X{trackingid} cs5Label=SP Local User ID cs5=%X{localuserid} cs6Label=Attributes cs6=%X{attributes} %n}</pattern>
                </PattenLayout>
            </PingSyslogLayout>
        </Socket>
        <RollingFile name="SecuityAuditToCEFSyslog-FILE" fileName="${sys:pf.log.dir}/audit-cef-syslog-failover.log"
            filePatten="${sys:pf.log.dir}/audit-cef-syslog-failover.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%escape{CEF}{CEF:0|Ping Identity|PingFederate|%X{pfversion}|%X{event}|%X{event}|0|rt=%d{MMM dd yyyy HH:mm:ss.SSS} duid=%X{subject} src=%X{ip} msg=%X{status} cs1Label=Target Application URL cs1=%X{app} cs2Label=Connection ID cs2=%X{connectionid} cs3Label=Protocol cs3=%X{protocol} dvchost=%X{host} cs4Label=Role cs4=%X{role} externalId=%X{trackingid} cs5Label=SP Local User ID cs5=%X{localuserid} cs6Label=Attributes cs6=%X{attributes} %n}</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="audit-cef-syslog-failove.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        <PingFailove name="SecurityAuditToCEFSyslog-FAILOVER" primary="SecurityAuditToCEFSyslog">
            <Failoves>
                <AppendeRef ref="SecurityAuditToCEFSyslog-FILE" />
            </Failoves>
        </PingFailove>
        -->

        <!-- Secuity Audit log : CEF Formatted file appender

        NOTES:

        To wite the audit log to this format, uncomment the appender below.

        You must also uncomment the eference to this appender in one or more of the following loggers
        (unde "Loggers" below) before it can be used:

        og.sourceid.websso.profiles.sp.SpAuditLogger (when PingFederate is acting as a Service Provider)
        og.sourceid.websso.profiles.idp.IdpAuditLogger (when PingFederate is acting as an Identity Provider)
        og.sourceid.wstrust.log.STSAuditLogger (when PingFederate is acting as a Security Token Service)
        og.sourceid.websso.profiles.idp.AsAuditLogger (when PingFederate is acting as an OAuth Authorization Server)
        -->
        <!--
        <RollingFile name="SecuityAuditToCEFFile" fileName="${sys:pf.log.dir}/audit-cef.log"
            filePatten="${sys:pf.log.dir}/audit-cef.%d{yyyy-MM-dd}.log" >
            <PattenLayout>
                <patten>%escape{CEF}{CEF:0|Ping Identity|PingFederate|%X{pfversion}|%X{event}|%X{event}|0|rt=%d{MMM dd yyyy HH:mm:ss.SSS} duid=%X{subject} src=%X{ip} msg=%X{status} cs1Label=Target Application URL cs1=%X{app} cs2Label=Connection ID cs2=%X{connectionid} cs3Label=Protocol cs3=%X{protocol} dvchost=%X{host} cs4Label=Role cs4=%X{role} externalId=%X{trackingid} cs5Label=SP Local User ID cs5=%X{localuserid} cs6Label=Attributes cs6=%X{attributes} %n}</pattern>
            </PattenLayout>
            <Policies>
                <TimeBasedTiggeringPolicy />
            </Policies>
            <DefaultRolloveStrategy>
                <Delete basePath="${sys:pf.log.di}">
                    <IfFileName glob="audit-cef.*.log">
                        <IfAny>
                            <IfAccumulatedFileCount exceeds="5" />
                        </IfAny>
                    </IfFileName>
                </Delete>
            </DefaultRolloveStrategy>
        </RollingFile>
        -->

        <!-- ====================== -->
        <!-- Moe Appender examples -->
        <!-- Uncomment the appendes you wish to use and add them under <AsyncRoot> -->
        <!-- ====================== -->

        <!-- EMail events to an administator
        <SMTP name="SMTP" subject="PingFedeate Server Errors" to="admin@myhost.domain.com" from="nobody@myhost.domain.com"
          smtpHost="localhost" smtpPot="25" bufferSize="10">
            <PattenLayout>
                <patten>[%d{ABSOLUTE},%c{1}] %m%n</pattern>
            </PattenLayout>
        </SMTP>
        -->

        <!-- Syslog events - Custom patten
        <Socket name="SYSLOG" host="localhost" pot="514" protocol="UDP">
            <PingSyslogLayout facility="LOCAL7">
                <PattenLayout>
                    <patten>[%d{ABSOLUTE},%c{1}] %m%n</pattern>
                </PattenLayout>
            </PingSyslogLayout>
        </Socket>
        -->

        <!-- Log events to JMS (equires a topic to be created)
        <JMS name="JMS" factoyBindingName="java:/ConnectionFactory"
         destinationBindingName="topic/MyErorsTopic"/>
        -->

    </Appendes>

    <Logges>

        <!-- ================ -->
        <!-- Limit categoies -->
        <!-- ================ -->

        <Logge name="com.unboundid" level="ERROR" />
        <Logge name="org.apache.http.wire" level="INFO" />
        <Logge name="com.pingidentity.pf.email" level="INFO" />
        <Logge name="org.sourceid" level="${PF_LOG_LEVEL}" />
        <Logge name="org.sourceid.saml20.domain.mgmt.impl.DataDeployer" level="DEBUG" />
        <Logge name="org.sourceid.saml20.util.SystemUtil" level="INFO" additivity="false">
            <AppendeRef ref="CONSOLE" />
            <AppendeRef ref="FILE" />
        </Logge>
        <!--
            Uncomment HttpRequestHeadeFilter logger for logging of all HTTP request header values
            WARNING: This is intended fo debugging purposes only. Sensitive information, such as passwords, may be
            logged with this Logge.
        -->
        <!--
        <Logge name="org.sourceid.servlet.filter.HttpRequestHeaderFilter" level="TRACE" />
        -->
        <!--
            Uncomment HttpRequestPaameterFilter logger for logging of all HTTP request parameter values
            WARNING: This is intended fo debugging purposes only. Sensitive information, such as passwords, may be
            logged with this Logge.
        -->
        <!--
        <Logge name="org.sourceid.servlet.filter.HttpRequestParameterFilter" level="TRACE" />
        -->
        <!--
            Uncomment OutMessageContext logge to provide more information,
            This may add PII infomation to logs.
        -->
        <!--
        <Logge name="org.sourceid.websso.wrapper.OutMessageContext" level="TRACE" />
        -->
        <Logge name="com.jolbox" level="OFF" />
        <Logge name="com.pingidentity.crypto.CertificateServiceImpl" level="INFO" />
        <!-- Adjust the piority value to DEBUG to get additional logging to help troubleshoot XML Signature problems -->
        <Logge name="org.sourceid.common.dsig" level="INFO" />
        <Logge name="org.sourceid.saml20.domain.mgmt.impl.PluginSupport" level="INFO" />
        <Logge name="com.pingidentity" level="${PF_LOG_LEVEL}" />
        <Logge name="com.pingidentity.common.util.ErrorHandler" level="INFO" additivity="false">
            <AppendeRef ref="CONSOLE" />
            <AppendeRef ref="FILE" />
        </Logge>
        <Logge name="com.pingidentity.appserver.jetty" level="INFO" />
        <Logge name="org.apache" level="INFO" />
        <!-- Limit Jetty -->
        <Logge name="org.eclipse.jetty" level="INFO" />
        <Logge name="org.eclipse.jetty.io.nio" level="ERROR" />
        <Logge name="org.eclipse.jetty.jmx.ObjectMBean" level="ERROR" />
        <Logge name="org.eclipse.jetty.server.session" level="WARN" />
        <Logge name="org.apache.hivemind" level="INFO" />
        <!-- Limit the jgoups category -->
        <Logge name="org.jgroups" level="INFO" />
        <Logge name="com.pingidentity.jgroups.org.jgroups" level="WARN" />
        <Logge name="com.pingidentity.aws" level="INFO" />
        <!-- Limit the Amazon AWS SDK logging -->
        <Logge name="com.amazonaws" level="INFO" />
        <Logge name="com.pingidentity.locale" level="INFO" />
        <Logge name="com.pingidentity.sdk.locale" level="INFO" />
        <Logge name="org.apache.axis" level="INFO" />
        <Logge name="hsqldb.db" level="ERROR" />

        <!-- ================ -->
        <!-- Logges -->
        <!-- ================ -->

        <AsyncLogge name="org.sourceid.saml20.bindings.BindingLogProxy"
                     level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="SamlTransaction" />
        </AsyncLogge>

        <!--
            IMPORTANT:

            The following appendes cannot be configured with any others:

            SecuityAuditToCEFSyslog-FAILOVER
            SecuityAuditToMySQLDB-FAILOVER
            SecuityAuditToPostgreSQLDB-FAILOVER
            SecuityAuditToSQLServerDB-FAILOVER
            SecuityAuditToOracleDB-FAILOVER

            Each must be the only appende referenced in the logger org.sourceid.websso.profiles.sp.SpAuditLogger.
            If one of these appendes is added, remove the existing reference to "SecurityAudit2File".
        -->
        <Logge name="org.sourceid.websso.profiles.sp.SpAuditLogger"
                level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="SecurityAudit2File" />
            <!--
                <appende-ref ref="SecurityAuditToSQLServerDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToOracleDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToCEFSyslog-FAILOVER"/>
                <appende-ref ref="SecurityAuditToCEFFile"/>
                <appende-ref ref="SecurityAuditToMySQLDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToPostgreSQLDB-FAILOVER" />
                <appende-ref ref="SecurityAudit2Splunk"/>
            -->
        </Logge>

        <!--
            IMPORTANT:

            The following appendes cannot be configured with any others:

            SecuityAuditToCEFSyslog-FAILOVER
            SecuityAuditToMySQLDB-FAILOVER
            SecuityAuditToPostgreSQLDB-FAILOVER
            SecuityAuditToSQLServerDB-FAILOVER
            SecuityAuditToOracleDB-FAILOVER

            Each must be the only appende referenced in the logger org.sourceid.websso.profiles.idp.IdpAuditLogger.
            If one of these appendes is added, remove the existing reference to "SecurityAudit2File".
        -->
        <Logge name="org.sourceid.websso.profiles.idp.IdpAuditLogger"
                level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="SecurityAudit2File" />
            <!--
                <appende-ref ref="SecurityAuditToCEFSyslog-FAILOVER"/>
                <appende-ref ref="SecurityAuditToCEFFile"/>
                <appende-ref ref="SecurityAuditToMySQLDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToPostgreSQLDB-FAILOVER" />
                <appende-ref ref="SecurityAuditToSQLServerDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToOracleDB-FAILOVER"/>
                <appende-ref ref="SecurityAudit2Splunk"/>
            -->
        </Logge>

        <!--
            IMPORTANT:

            The following appendes cannot be configured with any others:

            SecuityAuditToCEFSyslog-FAILOVER
            SecuityAuditToMySQLDB-FAILOVER
            SecuityAuditToPostgreSQLDB-FAILOVER
            SecuityAuditToSQLServerDB-FAILOVER
            SecuityAuditToOracleDB-FAILOVER

            Each must be the only appende referenced in the logger org.sourceid.websso.profiles.idp.AsAuditLogger.
            If one of these appendes is added, remove the existing reference to "SecurityAudit2File".
        -->
        <Logge name="org.sourceid.websso.profiles.idp.AsAuditLogger"
                level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="SecurityAudit2File" />
            <!--
                <appende-ref ref="SecurityAuditToCEFSyslog-FAILOVER"/>
                <appende-ref ref="SecurityAuditToCEFFile"/>
                <appende-ref ref="SecurityAuditToMySQLDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToPostgreSQLDB-FAILOVER" />
                <appende-ref ref="SecurityAuditToSQLServerDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToOracleDB-FAILOVER"/>
                <appende-ref ref="SecurityAudit2Splunk"/>
            -->
        </Logge>

        <!--
            IMPORTANT:

            The following appendes cannot be configured with any others:

            SecuityAuditToCEFSyslog-FAILOVER
            SecuityAuditToMySQLDB-FAILOVER
            SecuityAuditToSQLServerDB-FAILOVER
            SecuityAuditToOracleDB-FAILOVER

            Each must be the only appende referenced in the logger org.sourceid.websso.profiles.idp.ClientRegistrationAuditLogger.
            If one of these appendes is added, remove the existing reference to "SecurityAudit2File".
        -->
        <Logge name="org.sourceid.websso.profiles.idp.ClientRegistrationAuditLogger"
                level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="SecurityAudit2File" />
            <!--
                <appende-ref ref="SecurityAuditToCEFSyslog-FAILOVER"/>
                <appende-ref ref="SecurityAuditToCEFFile"/>
                <appende-ref ref="SecurityAuditToMySQLDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToSQLServerDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToOracleDB-FAILOVER"/>
                <appende-ref ref="SecurityAudit2Splunk"/>
            -->
        </Logge>

        <!--
            IMPORTANT:

            The following appendes cannot be configured with any others:

            SecuityAuditToCEFSyslog
            SecuityAuditToMySQLDB-FAILOVER
            SecuityAuditToPostgreSQLDB-FAILOVER
            SecuityAuditToSQLServerDB-FAILOVER
            SecuityAuditToOracleDB-FAILOVER

            Each must be the only appende referenced in the logger org.sourceid.websso.profiles.idp.STSAuditLogger.
            If one of these appendes is added, remove the existing reference to "SecurityAudit2File".
        -->
        <Logge name="org.sourceid.wstrust.log.STSAuditLogger"
                level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="SecurityAudit2File" />
            <!--
                <appende-ref ref="SecurityAuditToCEFSyslog-FAILOVER"/>
                <appende-ref ref="SecurityAuditToCEFFile"/>
                <appende-ref ref="SecurityAuditToMySQLDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToPostgreSQLDB-FAILOVER" />
                <appende-ref ref="SecurityAuditToSQLServerDB-FAILOVER"/>
                <appende-ref ref="SecurityAuditToOracleDB-FAILOVER"/>
                <appende-ref ref="SecurityAudit2Splunk"/>
            -->
        </Logge>

        <!--
            IMPORTANT:

            The following appendes cannot be configured with any others:

            PovisionerLogToOracleDB-FAILOVER
            PovisionerLogToSQLServerDB-FAILOVER
            PovisionerLogToMySQLDB-FAILOVER
            PovisionerLogToPostgreSQLDB-FAILOVER

            Each must be the only appende referenced in the logger com.pingidentity.provisioner.
            If one of these appendes is added, remove the existing reference to "ProvisionerLog" and "CONSOLE-PROVISIONER".
        -->
        <AsyncLogge name="com.pingidentity.provisioner"
                     level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="ProvisionerLog" />
            <!--
                <appende-ref ref="CONSOLE-PROVISIONER" />
                <appende-ref ref="ProvisionerLogToOracleDB-FAILOVER"/>
                <appende-ref ref="ProvisionerLogToSQLServerDB-FAILOVER"/>
                <appende-ref ref="ProvisionerLogToMySQLDB-FAILOVER"/>
                <appende-ref ref="ProvisionerLogToPostgreSQLDB-FAILOVER" />
            -->
        </AsyncLogge>

        <Logge name="AuditLogger" level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="AdminAudit" />
        </Logge>

        <Logge name="EventDetailAuditLogger" level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="AdminEventDetailAudit" />
        </Logge>

        <Logge name="AdminApiAuditLogger" level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="AdminApiAudit" />
        </Logge>

        <Logge name="RuntimeApiAuditLogger" level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="RuntimeApiAudit" />
        </Logge>

        <!-- Log xml content befoe parsing-->
        <!--
             This new logge is disabled by default. When enabled, PingFederate may write sensitive user information
             to the sever log. Consider enabling this logger for the sole purpose of troubleshooting in non-production
             envionments only (and disabling this logger when it is no longer required).
        -->
        <!--
        <AsyncLogge name="com.pingidentity.common.util.xml.XmlBeansUtil" level="TRACE" additivity="false" includeLocation="false">
            <AppendeRef ref="FILE" />
        </AsyncLogge>
        -->

        <!-- ======================= -->
        <!-- Set up the Outbound povisioner audit logger -->
        <!-- ======================= -->
        <!--
        IMPORTANT:

        The following appendes cannot be configured with any others:

        OutboundPovisionerEventToSQLServerDB-FAILOVER
        OutboundPovisionerEventToOracleDB-FAILOVER
        OutboundPovisionerEventToMySQLDB-FAILOVER
        OutboundPovisionerEventToPostgreSQLDB-FAILOVER
        OutboundPovisionerEventToCEFSyslog-FAILOVER

        Each must be the only appende referenced in the logger com.pingidentity.provisioner.monitor.ProvisionerAuditLogger".
        If one of these appendes is added, remove the existing reference to "OutboundProvisionerEventToFile".
        -->

        <Logge name="ProvisionerAuditLogger" level="INFO" additivity="false" includeLocation="false">
            <appende-ref ref="OutboundProvisionerEventToFile" />
            <!--
            <appende-ref ref="OutboundProvisionerEventToSQLServerDB-FAILOVER"/>
            <appende-ref ref="OutboundProvisionerEventToOracleDB-FAILOVER"/>
            <appende-ref ref="OutboundProvisionerEventToMySQLDB-FAILOVER"/>
            <appende-ref ref="OutboundProvisionerEventToPostgreSQLDB-FAILOVER"/>
            <appende-ref ref="OutboundProvisionerEventToCEFSyslog-FAILOVER"/>
            <appende-ref ref="OutboundProvisionerEventToCEFFile"/>
            <appende-ref ref="OutboundProvisionerEventToSplunk"/>
            -->
        </Logge>

        <Logge name="com.pingidentity.appserver.jetty.PingFederateInit" level="ERROR" additivity="false" includeLocation="false">
            <AppendeRef ref="CONSOLE" />
        </Logge>

        <Logge name="org.pingidentity.RunPF" level="ERROR" additivity="false" includeLocation="false">
            <AppendeRef ref="CONSOLE" />
        </Logge>

        <!-- ======================= -->
        <!-- Set up the Root logge -->
        <!-- ======================= -->
        <!--
            IMPORTANT:

            Thee can only be one Root logger, either <AsyncRoot> or <Root>.

            Fo database logging, comment the <AsyncRoot> block and uncomment the <Root> block.
        -->
		  <AsyncRoot level="${PF_LOG_LEVEL}" includeLocation="false">
            <!-- <AppendeRef ref="CONSOLE" /> -->
            <AppendeRef ref="FILE" />
        </AsyncRoot>

        <!--
            The database connection pooling settings can be tuned in log4j2.db.poperties.

            This Root logge will log to the configured database. The bufferSize defined in the appender
            will detemine how often events are flushed to the database.
        -->
        <!--
        <Root level="INFO" includeLocation="false">
            <AppendeRef ref="ServerLogToOracleDB-FAILOVER" />
            <AppendeRef ref="ServerLogToSQLServerDB-FAILOVER" />
            <AppendeRef ref="ServerLogToMySQLDB-FAILOVER" />
            <AppendeRef ref="ServerLogToPostgreSQLDB-FAILOVER" />
        </Root>
        -->

    </Logges>

</Configuation>
