#!/bin/bash

# NOTE:
# Before running this script, populate all the required secrets in the ping-cloud and cluster-tools
# kustomization.yaml files.

# The following script shows how to seal all the secrets in the kubernetes yaml file generated by kustomize.
# It requires kustomize and kubeseal to be installed.

SCRIPT_DIR=$(cd $(dirname "${0}"); pwd)
pushd "${SCRIPT_DIR}" &> /dev/null

SEALED_SECRETS_YAML='sealed-secrets.yaml'
KUSTOMIZATION_YAML='kustomization.yaml'

########################################################################################################################
# Trap and handle errors
#
# Arguments
#   ${1} -> The error code.
#   ${2} -> The line number where the error occurred.
########################################################################################################################
trap 'catch ${?} ${LINENO}' ERR
catch() {
  echo "Error code ${1} returned from line number ${2}"
  popd &> /dev/null
}

########################################################################################################################
# Verify that the provided binaries are available.
#
# Arguments
#   ${*} -> The list of required binaries.
########################################################################################################################
check_binaries() {
  STATUS=0
	for TOOL in ${*}; do
	  which "${TOOL}" &>/dev/null
    if test ${?} -ne 0; then
      echo "${TOOL} is required but missing"
      STATUS=1
    fi
  done
  return ${STATUS}
}

####################
#   Start script   #
####################

# Check for required binaries.
check_binaries "kustomize" "kubeseal"
HAS_REQUIRED_TOOLS=${?}
test ${HAS_REQUIRED_TOOLS} -ne 0 && exit 1

CERT_FILE=${1}

# If the certificate file is not provided, try to get the certificate from the Bitnami sealed secret service.
# The sealed-secrets controller must be running in the cluster, and it should be possible to access the Kubernetes
# API server for this to work.
if test -z "${CERT_FILE}"; then
  CERT_FILE=$(mktemp)
  echo "Fetching the sealed secret certificate from the cluster"
  kubeseal --fetch-cert --controller-namespace kube-system > "${CERT_FILE}"
fi

echo "----------------------------------------------------------------------------------------------------------------------------"
echo "WARNING!!! Ensure that ${CERT_FILE} contains the public key of the Bitnami sealed secret service running in your cluster"
echo "It may be obtained by running 'kubeseal --fetch-cert --controller-namespace kube-system' on the management node"
echo "----------------------------------------------------------------------------------------------------------------------------"
echo "Using certificate file ${CERT_FILE} for encrypting secrets"

SEALED_SECRETS_FILE=/tmp/sealed-secrets.yaml
rm -f "${SEALED_SECRETS_FILE}"

PATCHES_FILE=/tmp/patches.yaml
rm -f "${PATCHES_FILE}"

echo "Creating sealed secrets in ${SEALED_SECRETS_FILE} and patches to delete secrets in ${PATCHES_FILE}"

OUT_DIR=$(mktemp -d)
kustomize build --output "${OUT_DIR}"

for FILE in $(find "${OUT_DIR}" -type f | xargs grep -rl 'kind: Secret'); do
  NAME=$(grep 'name:' "${FILE}" | cut -d: -f2 | tr -d '[:space:]')
  NAMESPACE=$(grep 'namespace:' "${FILE}" | cut -d: -f2 | tr -d '[:space:]')

  # Append a patch to delete the secret to the patches file.
  cat >> "${PATCHES_FILE}" <<EOF
- |-
  apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
    namespace: ${NAMESPACE}
  \$patch: delete

EOF

  # Only seal secrets that have data in them.
  if grep '^data' "${FILE}" &> /dev/null; then
    echo "Creating sealed secret for \"${NAMESPACE}:${NAME}\""

    # Append the sealed secret to the sealed secrets file.
    ! test -f "${SEALED_SECRETS_FILE}" && printf "\n\n" > "${SEALED_SECRETS_FILE}"
    kubeseal --cert "${CERT_FILE}" -o yaml < "${FILE}" >> "${SEALED_SECRETS_FILE}"
    echo --- >> "${SEALED_SECRETS_FILE}"

    # Replace ping-cloud-* namespace to just ping-cloud because it is the default in the kustomization base.
    echo -n "${NAMESPACE}" | grep '^ping-cloud' &> /dev/null && NAMESPACE=ping-cloud
  else
    echo "Not creating sealed secret for \"${NAMESPACE}:${NAME}\" because it doesn't have any data"
  fi
done

echo
echo '------------------------'
echo '|  Next steps to take  |'
echo '------------------------'

echo "- Append the contents of ${SEALED_SECRETS_FILE} to ${SCRIPT_DIR}/${SEALED_SECRETS_YAML}"
echo "- Remove all Secret objects (search for 'kind: Secret') from all ${KUSTOMIZATION_YAML} files"
echo "- Add the flux-git-deploy patch in ${PATCHES_FILE} to cluster-tools/${KUSTOMIZATION_YAML} under 'patchesStrategicMerge:'"
echo "- Add all other patches in ${PATCHES_FILE} to ping-cloud/${KUSTOMIZATION_YAML} under 'patchesStrategicMerge:'"
echo "- Verify that there are no errors by running 'kustomize build > deploy.yaml' from the k8s-configs directory"
echo "- Validate that your updates are present in the deploy.yaml file generated above"
echo "- Push ${SEALED_SECRETS_YAML} and all modified ${KUSTOMIZATION_YAML} files into the cluster state repo"
echo "- Run this script for each CDE branch in the order - dev, test, stage, prod, if not already done"

popd &> /dev/null