#!/bin/bash

# The following script shows how to seal all the secrets in the kubernetes yaml file generated by kustomize.
# It requires kustomize and kubeseal to be installed.

SCRIPT_DIR=$(cd $(dirname "${0}"); pwd)
pushd "${SCRIPT_DIR}" &> /dev/null

SEALED_SECRETS_YAML='sealed-secrets.yaml'
KUSTOMIZATION_YAML='kustomization.yaml'

########################################################################################################################
# Trap and handle errors
#
# Arguments
#   ${1} -> The error code.
#   ${2} -> The line number where the error occurred.
########################################################################################################################
trap 'catch ${?} ${LINENO}' ERR
catch() {
  echo "Error code ${1} returned from line number ${2}"
  popd &> /dev/null
}

########################################################################################################################
# Verify that the provided binaries are available.
#
# Arguments
#   ${*} -> The list of required binaries.
########################################################################################################################
check_binaries() {
  STATUS=0
	for TOOL in ${*}; do
	  which "${TOOL}" &>/dev/null
    if test ${?} -ne 0; then
      echo "${TOOL} is required but missing"
      STATUS=1
    fi
  done
  return ${STATUS}
}

########################################################################################################################
# Prints script usage
########################################################################################################################
usage() {
  echo "Usage: ${0} [ -a ]"
  echo "  where a => append script output to ${SEALED_SECRETS_YAML} and ${KUSTOMIZATION_YAML} under ${SCRIPT_DIR}"
}

####################
#   Start script   #
####################

# Check for required binaries.
check_binaries "kustomize" "kubeseal"
HAS_REQUIRED_TOOLS=${?}
test ${HAS_REQUIRED_TOOLS} -ne 0 && exit 1

# Parse options.
APPEND='false'
while getopts ':ah' OPTION
do
  case ${OPTION} in
    a)
      APPEND='true'
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      usage
      exit 1
      ;;
  esac
done

# The sealed-secrets controller must be deployed to the cluster.
CERT_FILE=/tmp/cert.pem
echo "Fetching the sealed secret certificate from the cluster into ${CERT_FILE}"
kubeseal --fetch-cert --controller-namespace kube-system > "${CERT_FILE}"

SEALED_SECRETS_FILE=/tmp/sealed-secrets.yaml
rm -f "${SEALED_SECRETS_FILE}"

PATCHES_FILE=/tmp/patches.yaml
rm -f "${PATCHES_FILE}"

echo "Creating sealed secrets in ${SEALED_SECRETS_FILE} and patches in ${PATCHES_FILE}"

OUT_DIR=$(mktemp -d)
kustomize build --output "${OUT_DIR}"

for FILE in $(find "${OUT_DIR}" | xargs grep -rl 'kind: Secret'); do
   NAME=$(grep 'name:' "${FILE}" | cut -d: -f2 | tr -d '[:space:]')
   NAMESPACE=$(grep 'namespace:' "${FILE}" | cut -d: -f2 | tr -d '[:space:]')

  # Only seal secrets that have data in them.
  if grep '^data' "${FILE}" &> /dev/null; then
    echo "Creating sealed secret and patch for secret object \"${NAMESPACE}:${NAME}\""

    # Append the sealed secret to the sealed secrets file.
    if ! test -f "${SEALED_SECRETS_FILE}"; then
      # Add a couple of spaces to the file to start.
      echo > "${SEALED_SECRETS_FILE}"
      echo >> "${SEALED_SECRETS_FILE}"
    fi

    kubeseal --cert "${CERT_FILE}" -o yaml < "${FILE}" >> "${SEALED_SECRETS_FILE}"
    echo --- >> "${SEALED_SECRETS_FILE}"

    # Append the patch to the patches file.
    if ! test -f "${PATCHES_FILE}"; then
      # Add a couple of spaces to the file to start.
      echo > "${PATCHES_FILE}"
      echo >> "${PATCHES_FILE}"

      echo "patchesStrategicMerge:" >> "${PATCHES_FILE}"
      echo >> "${PATCHES_FILE}"
    fi

    cat >> "${PATCHES_FILE}" <<EOF
- |-
  apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
    namespace: ${NAMESPACE}
  \$patch: delete

EOF
  else
    echo "Not creating sealed secret and patch for object \"${NAMESPACE}:${NAME}\" because it doesn't have any data"
  fi
done

if test "${APPEND}" = 'true'; then
  echo "Appending the contents of ${SEALED_SECRETS_FILE} to the ${SEALED_SECRETS_YAML} file under ${SCRIPT_DIR}"
  cat "${SEALED_SECRETS_FILE}" >> "${SCRIPT_DIR}/${SEALED_SECRETS_YAML}"

  echo "Appending the patches in ${PATCHES_FILE} to the ${KUSTOMIZATION_YAML} under ${SCRIPT_DIR}"
  cat "${PATCHES_FILE}" >> "${SCRIPT_DIR}/${KUSTOMIZATION_YAML}"
fi

echo
echo '------------------------'
echo '|  Next steps to take  |'
echo '------------------------'

if test "${APPEND}" = 'false'; then
  echo "- Append the contents of ${SEALED_SECRETS_FILE} to the ${SEALED_SECRETS_YAML} file under ${SCRIPT_DIR}"
  echo "- Append the patches in ${PATCHES_FILE} to the ${KUSTOMIZATION_YAML} under ${SCRIPT_DIR}"
fi

echo "- Remove all Secret objects (search for 'kind: Secret') that don't have data from all ${KUSTOMIZATION_YAML} files"
echo "- Push ${SEALED_SECRETS_YAML} and all modified ${KUSTOMIZATION_YAML} files into the cluster state repo"
echo "- Run this script for each CDE in the order - dev, test, stage, prod, if not already done so"

popd &> /dev/null